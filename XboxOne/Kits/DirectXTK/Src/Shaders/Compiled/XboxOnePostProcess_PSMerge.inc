#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[72]
// Embedded Data:
//  0x00000048 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000043 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s0
mul r0.xyzw, r0.xyzw, cb0[17].xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mad o0.xyzw, cb0[16].xyzw, r1.xyzw, r0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[72], bundle is:[158] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSMerge.pdb
// Shader Semantic Hash      : 0x400a86475eeab224
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 124 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_CONST_BUFFER 0, offset 0x14:23 dwords
NumVgprs             = 10;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x68, dwords=0x1A)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 00000000000C: C0CA0110
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000014: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000018: C81C0100
  v_interp_p2_f32  v6, v1, attr0.x                      // 00000000001C: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000020: C81D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[6:7], s[12:19], s[20:23] dmask:0xf // 000000000028: F0800F00 00A30206
  image_sample  v[6:9], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000030: F0800F00 00A10606
  s_buffer_load_dwordx8  s[0:7], s[24:27], 0x40         // 000000000038: C2C01940
  s_waitcnt     vmcnt(1) & lgkmcnt(0)                   // 00000000003C: BF8C0071
  v_mul_legacy_f32  v0, s4, v2                          // 000000000040: 0E000404
  v_mul_legacy_f32  v1, s5, v3                          // 000000000044: 0E020605
  v_mul_legacy_f32  v2, s6, v4                          // 000000000048: 0E040806
  v_mul_legacy_f32  v3, s7, v5                          // 00000000004C: 0E060A07
  s_waitcnt     vmcnt(0)                                // 000000000050: BF8C0F70
  v_mac_f32     v0, s0, v6                              // 000000000054: 3E000C00
  v_mac_f32     v1, s1, v7                              // 000000000058: 3E020E01
  v_mac_f32     v2, s2, v8                              // 00000000005C: 3E041002
  v_mac_f32     v3, s3, v9                              // 000000000060: 3E061203
  s_mov_b64     exec, s[28:29]                          // 000000000064: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000068: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 00000000006C: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000070: F8001C0F 00000100
  s_endpgm                                              // 000000000078: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   10
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   81
//  CycleSimNWaves:             81
//  Code Size:                  124
//Assembler Counts:
//  num_32bit_ops                     : 25
//  num_64bit_ops                     : 3
//  num_alu                           : 14
//  num_fc                            : 11
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 10
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 10
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 124
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 81
// m_uCycleSimNWaves                 : 81

// Assembler Counts:
// num_32bit_ops                     : 25
// num_64bit_ops                     : 3
// num_alu                           : 14
// num_fc                            : 11
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 10
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 3
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSMerge[] =
{
     68,  88,  66,  67,   6, 212, 
     51, 160,  84,  12,  58, 146, 
    251, 201,  73, 108, 224,  35, 
     46, 221,   1,   0,   0,   0, 
    220,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 104,   4,   0,   0, 
    120,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 160,   3, 
      0,   0,  80,   0,   0,   0, 
    232,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     72,   0,   0,   0,  80,   0, 
      0,   0,  67,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   1,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   1,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   8, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  70, 142, 
     32,   0,   0,   0,   0,   0, 
     17,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   1,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  16,   0,   0,   0, 
     70,  14,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    160,   0,   0,   0,  23,   0, 
      1,   0,  41, 209,  15,   0, 
    120,   1, 237,  87, 191, 111, 
    211,  64,  24, 253, 206, 118, 
    221,  16, 130,  29, 149,  12, 
     13,  10,  18,  72,  12,  29, 
     40,  19,  19,  67, 212, 168, 
     72,  29,  10,  34, 144,  14, 
     85, 101,  66, 155, 196, 165, 
    145,  90,  18, 236,  12,  29, 
    170,  80, 150,  78,  12,  29, 
      1, 177, 240,  99, 101,  65, 
    204,  73,  96, 138,  16,  11, 
    127,   5,  18,  98,  96,  96, 
     96,  64, 192, 247,  46, 119, 
    173,   9, 176,  89,   2,   9, 
     63, 233, 221, 119, 239, 238, 
    252, 249, 157,  47, 145, 238, 
    123, 231, 146,  68, 127, 239, 
    253,  51, 196, 207,  79,  78, 
     31, 207,   8, 162,   9, 238, 
    115, 144,  17, 184, 127,  12, 
     45, 209, 182, 131, 150, 104, 
      6,  13,  22,  24,  68, 105, 
     14, 167, 152,  59, 204,  57, 
     38, 230,  52,  31,  62, 120, 
     94,  90,  95, 239, 149, 184, 
     75, 121, 230,  81, 230,  85, 
     69, 104, 147, 137, 148,  24, 
     71,  58, 128,  83,  30, 192, 
     66, 195, 208,  49,  10, 188, 
     87,   3, 243, 200,   5,  32, 
    234,  92,  18,  62, 154, 223, 
    163, 192, 140, 230,  25,   7, 
    188, 105,  63, 200,   9, 159, 
      0, 246, 251, 183,  49, 218, 
    227, 200,  29, 250, 160,  62, 
     39,   0, 231,  17,   5, 246, 
    130,  53,  64,  14, 130, 161, 
    191, 235, 140, 210, 248,  22, 
    216, 219, 128, 249,  39, 124, 
    103,  76, 163,  19, 129, 214, 
    200, 111,  11,  62, 129,  20, 
    119, 254,  83, 232, 111, 138, 
    111, 129, 211, 201,  50, 213, 
    223,  76,  66, 207, 159,  64, 
     67, 187, 125, 112, 127, 154, 
    190,  64, 105,  45, 198, 180, 
      9, 141, 132,  81, 141,  31, 
    186,  73,  85,  99, 210, 168, 
    186,   5,  53, 111, 146, 199, 
    218, 139, 232,  21, 214,  43, 
     17, 189, 202, 122,  53, 162, 
    107, 172, 107,   7,  90, 229, 
    119, 229, 251,  12,  19, 103, 
    205, 131, 221, 127, 153, 137, 
    199, 120, 152, 120, 140, 135, 
    137, 199, 120, 152, 120, 140, 
    135, 137, 199, 120, 152, 120, 
    140, 135, 137, 199, 216,  72, 
     93, 235,  81, 175, 155, 254, 
    214, 227, 187, 218, 171, 172, 
    120,  51,  48, 204, 175,  61, 
    190, 141,  15,  73,  20, 134, 
    130, 242,  67,  33,  78,  14, 
    239, 208, 189,  62, 185, 187, 
    159, 108, 227,  41,  95,  68, 
     57, 218, 143, 105,  46,  63, 
    120, 125, 155, 199,  45, 139, 
    156,   9, 219, 112, 236, 148, 
    229,  76, 166, 109, 167, 237, 
    242, 218,  12,  21, 133,  99, 
     20, 141, 172,  85,  52, 167, 
    236,  98, 193, 226, 252, 227, 
    247,  76, 186, 219, 207,  35, 
    142, 202, 143, 159, 145, 146, 
     11,  14,   1, 201,  99, 209, 
    146,  64, 174, 176, 132, 188, 
     27, 107, 200,  84,  60, 150, 
     67,  84, 120, 169, 234, 146, 
    125,  21, 207,  48, 143,  48, 
      5,  27,   2,  80, 171,  88, 
    100, 115, 203, 115,  47,  62, 
     84,  23, 246, 210,  40,  65, 
     37,  62, 170, 103, 222, 170, 
    136, 181,  25, 230,  33, 100, 
    201, 251,  11, 114, 234, 178, 
    110, 169,   8, 143, 184, 179, 
     59, 186,  26,  86, 249, 206, 
    171, 249, 179,  42,  98, 127, 
    168,  15, 199, 125,  92,  82, 
    243, 215, 153, 112,  58, 127, 
    193, 187, 230, 183,  91, 161, 
    183,  92, 107, 109, 207, 150, 
    150,  22, 102,  43, 107,  91, 
    237,  77,  63, 244,  22, 155, 
    157, 208, 187, 216,  12, 252, 
    122, 103, 121, 105, 209,  11, 
    131, 186,  87, 217,  88, 107, 
    248,  65, 232, 205, 183, 182, 
    218, 205,  77, 191,  33,  31, 
    186, 114, 203,  47, 183, 194, 
     78,  57, 104, 213, 253,  48, 
    188,  81, 174,  92, 246, 131, 
    155, 254, 185, 118, 163,  70, 
     63,   0, 100,  68, 226,  44, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  36, 178, 234,  94, 
     71, 134,  10,  64,  88,  80, 
     68,  80,  92,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  80, 111, 115, 
    116,  80, 114, 111,  99, 101, 
    115, 115,  95,  80,  83,  77, 
    101, 114, 103, 101,  46, 112, 
    100,  98
};
