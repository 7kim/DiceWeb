#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[61]
// Embedded Data:
//  0x0000003d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000038 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
log r0.xyz, |r0.xyzx|
mov o0.w, r0.w
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[61], bundle is:[151] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PS_SRGB.pdb
// Shader Semantic Hash      : 0x171aa884e439d679
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 132 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x70, dwords=0x1C)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  v_log_f32     v0, abs(v0)                             // 000000000034: D34E0100 00000100
  v_log_f32     v1, abs(v1)                             // 00000000003C: D34E0101 00000101
  v_log_f32     v2, abs(v2)                             // 000000000044: D34E0102 00000102
  s_mov_b32     s0, 0x3ee8ba2f                          // 00000000004C: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000054: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000058: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 00000000005C: 0E040400
  v_exp_f32     v0, v0                                  // 000000000060: 7E004B00
  v_exp_f32     v1, v1                                  // 000000000064: 7E024B01
  v_exp_f32     v2, v2                                  // 000000000068: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 00000000006C: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000070: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000074: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000078: F8001C0F 00000100
  s_endpgm                                              // 000000000080: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   81
//  CycleSimNWaves:             81
//  Code Size:                  132
//Assembler Counts:
//  num_32bit_ops                     : 22
//  num_64bit_ops                     : 5
//  num_alu                           : 15
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 3
//  num_inst_vop2                     : 5
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 132
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 81
// m_uCycleSimNWaves                 : 81

// Assembler Counts:
// num_32bit_ops                     : 22
// num_64bit_ops                     : 5
// num_alu                           : 15
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 3
// num_inst_vop2                     : 5
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PS_SRGB[] =
{
     68,  88,  66,  67,  67, 206, 
    249,  54, 175, 238, 253, 248, 
    115, 199, 198, 181, 118, 161, 
     23,  23,   1,   0,   0,   0, 
    144,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  32,   4,   0,   0, 
     48,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  88,   3, 
      0,   0,  80,   0,   0,   0, 
    214,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     61,   0,   0,   0,  80,   0, 
      0,   0,  56,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     47,   0,   0,   6, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16, 128, 129,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,  47, 186, 232,  62, 
     47, 186, 232,  62,  47, 186, 
    232,  62,   0,   0,   0,   0, 
     25,   0,   0,   5, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 153,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 161,  15,   0, 120,   1, 
    237,  87, 191, 107,  20,  65, 
     24, 253, 102, 118,  77,  46, 
     49, 217,  77,  33,  26, 245, 
    192, 148,  54,  81,  91,  45, 
     36,  38,  66, 138, 197,  95, 
    185,   3,  47,  97,  72, 114, 
    151,  91, 240,  32, 201,  45, 
    119,  41,  98, 225, 122, 129, 
     32, 130,  22,  41, 213,  74, 
    193, 194, 191, 193, 226, 238, 
    176, 186,  94,  16, 237,  44, 
     44,  82,  10,  54,  22,  98, 
    252, 222,  58,  19,  39, 167, 
    233,  22,  20, 220,   7, 239, 
    251, 230, 205, 204, 126, 251, 
    110, 102,  15, 102,  94, 248, 
    148, 224, 222, 135,  71, 183, 
    145, 191, 204, 111, 169, 143, 
    156, 143,  48, 133, 206, 192, 
    147,  81,  68, 162, 146, 135, 
     72, 116,  22,   1,  19,  36, 
    145, 203, 233,  24, 115, 155, 
     57, 197, 196, 152, 225, 179, 
    167, 103, 166, 185, 197,  36, 
     66, 137,  65, 230,  45, 205, 
    227,  76, 212, 135, 133,  97, 
     38, 202,   1,  38,   3,  14, 
      2, 195, 248,  48,  64, 191, 
    221,   7,  15, 108,  37,   1, 
    178,  93, 131,  66, 132,  63, 
    227,  52,  19, 207,  30,   6, 
    120,  51, 181, 144, 225,  19, 
    192, 239, 253, 219, 248, 233, 
    203, 142, 191, 246,   9, 192, 
    126, 216, 192, 214, 153, 121, 
    121, 189, 143, 102, 205,  46, 
    104, 141, 181, 192, 111, 235, 
     50,  15, 195,  30,  99,   4, 
     13,  11,  70, 163, 254, 128, 
    224, 221, 201, 113, 227,  63, 
    133, 249, 158, 176,  22,  88, 
    223,  49,  38, 190,  35,   3, 
     51, 158,  71, 160,  86,   7, 
    220,  25, 167, 175,  80,  70, 
    139,  62, 237,  64, 163, 160, 
    173, 241,  39, 112, 104,  81, 
     14, 202,  69,  63, 175, 199, 
     29,  82, 172, 149, 165,  23, 
     88,  47,  88, 122, 153, 245, 
    178, 165,  43, 172,  43, 251, 
     90, 215, 247, 147, 247,  73, 
      7, 123, 205, 157, 241, 191, 
    204, 204,  99,  58, 204,  60, 
    166, 195, 204,  99,  58, 204, 
     60, 166, 195, 204,  99,  58, 
    204,  60, 166, 195, 204,  99, 
    106, 164, 216, 221, 105, 199, 
    195, 223, 219,  36, 222, 116, 
    115, 226,  65,  87,  58, 223, 
    218, 124, 248, 238, 145,  24, 
    233,   9,  26, 234,   9,  49, 
    218, 187,  79, 143,  59, 228, 
    183,  62,  75,  42,  83, 228, 
    115,  91,  92, 127, 139, 179, 
    158, 224,  44,  56,  75, 206, 
    146, 243, 158, 211, 106, 159, 
    127, 189, 123, 153, 203, 122, 
     36, 165,  71, 174, 235,  81, 
     64, 177,   8, 100,  44,   3, 
     55,  30, 115, 249,  61, 253, 
    231,  77, 218, 234, 156,  68, 
     54,  23,   9,  27, 185, 100, 
    194,  62,  18, 229, 138,   3, 
     87, 131, 135, 250, 222,  17, 
    233,  60, 206,  28,  98, 186, 
     52, 192, 145, 232, 238, 187, 
    139, 159, 182,  95, 157,  58, 
    129,  54, 208, 213, 243, 158, 
    235,  60, 193,  60, 120,  23, 
    121, 137, 240,  27, 118, 245, 
    252, 247,  58, 227,  76, 142, 
    115, 184, 103, 110, 145, 186, 
     63, 103,  14, 234,  58, 195, 
    235,  81, 102, 191, 143,   9, 
     61,  62, 207, 132, 211, 153, 
     75, 106,  46, 140, 234,  77, 
     85, 170, 212,  55,  39, 175, 
     20, 103,  39,  11, 229, 181, 
    104,  53, 108, 170, 160, 182, 
    209,  84,  87, 107, 141, 112, 
    101, 163,  84,  12,  84, 179, 
    177, 162,  10, 119, 202, 213, 
    176, 209,  84,  51, 245, 181, 
    168, 182,  26,  86, 147, 135, 
    110, 172, 135, 197, 250, 122, 
    120, 173,  28,  45, 221,  44, 
     44,  21, 230, 102, 167, 207, 
     69, 213,  10, 253,   0, 128, 
    111, 225, 245,   0,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0, 121, 214,  57, 228, 
    132, 168,  26,  23,  88,  80, 
     68,  80,  88,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  84, 111, 110, 
    101,  77,  97, 112,  95,  80, 
     83,  95,  83,  82,  71,  66, 
     46, 112, 100,  98
};
