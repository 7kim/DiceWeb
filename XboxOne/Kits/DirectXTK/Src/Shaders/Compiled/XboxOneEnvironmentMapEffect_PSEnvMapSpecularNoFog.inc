#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[114]
// Embedded Data:
//  0x00000072 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000006d - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyzw, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mul r0.w, r0.w, r1.w
mad r0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mov o0.w, r1.w
mad o0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[114], bundle is:[204] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapSpecularNoFog.pdb
// Shader Semantic Hash      : 0xba74b26c0674405f
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 308 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 14;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x120, dwords=0x48)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[9:12], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000080: F0800F00 00C30902
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000088: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000008C: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x00           // 000000000090: C2800100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000094: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000098: C80C0100
  v_interp_p1_f32  v4, v0, attr0.z                      // 00000000009C: C8100200
  v_interp_p1_f32  v13, v0, attr0.w                     // 0000000000A0: C8340300
  v_interp_p2_f32  v2, v1, attr0.x                      // 0000000000A4: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 0000000000A8: C80D0101
  v_interp_p2_f32  v4, v1, attr0.z                      // 0000000000AC: C8110201
  v_interp_p2_f32  v13, v1, attr0.w                     // 0000000000B0: C8350301
  s_waitcnt     vmcnt(1)                                // 0000000000B4: BF8C0F71
  v_mul_legacy_f32  v2, v5, v2                          // 0000000000B8: 0E040505
  v_mul_legacy_f32  v3, v6, v3                          // 0000000000BC: 0E060706
  v_mul_legacy_f32  v4, v7, v4                          // 0000000000C0: 0E080907
  v_mul_legacy_f32  v5, v8, v13                         // 0000000000C4: 0E0A1B08
  v_interp_p1_f32  v6, v0, attr1.x                      // 0000000000C8: C8180400
  v_interp_p1_f32  v7, v0, attr1.y                      // 0000000000CC: C81C0500
  v_interp_p1_f32  v0, v0, attr1.z                      // 0000000000D0: C8000600
  s_waitcnt     vmcnt(0)                                // 0000000000D4: BF8C0F70
  v_mad_legacy_f32  v8, v9, v5, -v2                     // 0000000000D8: D2800008 840A0B09
  v_mad_legacy_f32  v9, v10, v5, -v3                    // 0000000000E0: D2800009 840E0B0A
  v_mad_legacy_f32  v10, v11, v5, -v4                   // 0000000000E8: D280000A 84120B0B
  v_interp_p2_f32  v6, v1, attr1.x                      // 0000000000F0: C8190401
  v_interp_p2_f32  v7, v1, attr1.y                      // 0000000000F4: C81D0501
  v_interp_p2_f32  v0, v1, attr1.z                      // 0000000000F8: C8010601
  v_mul_legacy_f32  v1, v12, v5                         // 0000000000FC: 0E020B0C
  v_mac_f32     v2, v6, v8                              // 000000000100: 3E041106
  v_mac_f32     v3, v7, v9                              // 000000000104: 3E061307
  v_mac_f32     v4, v0, v10                             // 000000000108: 3E081500
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mac_f32     v2, s0, v1                              // 000000000110: 3E040200
  v_mac_f32     v3, s1, v1                              // 000000000114: 3E060201
  v_mac_f32     v4, s2, v1                              // 000000000118: 3E080202
  s_mov_b64     exec, s[28:29]                          // 00000000011C: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000120: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000124: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000128: F8001C0F 00000100
  s_endpgm                                              // 000000000130: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   14
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  308
//Assembler Counts:
//  num_32bit_ops                     : 53
//  num_64bit_ops                     : 11
//  num_alu                           : 47
//  num_fc                            : 14
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 15
//  num_inst_vop3                     : 10
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 24
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 14
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 308
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 53
// num_64bit_ops                     : 11
// num_alu                           : 47
// num_fc                            : 14
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 15
// num_inst_vop3                     : 10
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 24
// num_inst_smem                     : 4
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapSpecularNoFog[] =
{
     68,  88,  66,  67,  59, 165, 
    206, 172, 182,  75, 197, 106, 
     67,  32,  16,   0,  51, 243, 
    175, 212,   1,   0,   0,   0, 
    123,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0, 240,   5,   0,   0, 
      0,   6,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,   0,   5,   0,   0, 
     80,   0,   0,   0,  64,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 114,   0, 
      0,   0,  80,   0,   0,   0, 
    109,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 130,   1,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  10, 114,  32,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 206,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 180,  16,   0, 120,   1, 
    237,  87, 207, 107,  19,  65, 
     20, 126, 179, 217, 221, 236, 
    102, 147,  77,  90,  21,  83, 
     77,  81, 208, 131, 151, 234, 
    161,  45, 130, 135,  88, 251, 
     67, 133, 226,  15,  76,  15, 
     37,  44, 109, 147, 118, 171, 
    193,  52, 137,  73,  20,  79, 
     53,  66,  15,  34,  69,  60, 
     22, 244,  34, 248,  23,  72, 
     15, 226, 161, 137, 122,  25, 
    164, 130, 212, 155, 167,  30, 
    252,   3, 122, 236,  65, 212, 
    247, 102, 119, 218,  88, 237, 
     45, 160, 200, 126, 240, 205, 
    219, 239, 237, 236, 204,  55, 
    121,  57, 204,  91,  77, 128, 
     64, 244, 216, 151,  44, 197, 
    236, 215, 228, 179,  85,   6, 
    160, 225,  51,   6,  17,   9, 
     43,  49,  26,   1,  70, 227, 
     52,   2, 156, 162, 129,  38, 
     40,   0,  54, 134, 227, 200, 
      1, 212,  67,  24, 233, 157, 
    228, 199, 245, 252, 112, 127, 
    255, 237,  97, 124, 132,  35, 
     72, 218,  46, 227, 115,  16, 
    105,  33, 207,  32, 105,  13, 
     90, 142, 128,  75, 238,  64, 
    167,   1, 161, 210, 176,   7, 
    100,  37, 130,  36,  36, 145, 
    114,  78,   8,  41, 215,  18, 
    112, 105, 248,  51, 200,  47, 
    237, 189,  31, 200, 155, 244, 
     67, 107, 202, 185, 116, 222, 
    191,  13, 239, 140, 158,  59, 
    121, 102,  89,  39,   2, 213, 
    163,  29, 228,  93, 166, 214, 
    253, 131, 200, 250, 110, 250, 
    154,   2, 157, 173, 133, 220, 
     15,  63,  16,  41, 122, 104, 
    131, 212,  84,   3,  93,  84, 
      6,  35,  59,  12,  96,  96, 
     84,  78, 136, 194, 235, 161, 
    179,  94, 161, 254, 115, 200, 
    255,  33,  69, 170,  14, 253, 
    231, 189,  95, 196, 131, 124, 
    127, 153,   6, 104,  52, 137, 
     79, 147, 176,  77,  74, 106, 
    134, 218, 171, 172, 167,  67, 
    164, 169, 200, 237,  26, 139, 
    167, 132,  97,  74, 181, 148, 
    169, 120,  10, 191, 199, 226, 
    162, 118,  80,  59, 109,  58, 
    139,  58, 219, 166, 103,  80, 
    207, 180, 233,  60, 234, 188, 
    212, 114, 253, 184, 216,  79, 
    213, 168, 214, 152,  92, 252, 
    151,  25, 120, 236,  12,   3, 
    143, 157,  97, 224, 177,  51, 
     12,  60, 118, 134, 129, 199, 
    206,  48, 240, 216,  25,   6, 
     30,  59,  67, 186,  31,  46, 
    170, 207, 215,  22,  35, 223, 
    215, 148, 208, 183,  53,  96, 
    202, 219,   4, 251, 208, 130, 
    168, 193,  33,  22, 229,  96, 
     39,  56, 139, 154, 156, 197, 
     98, 156, 217,  93,  92, 131, 
     39,  27,  74, 184,  91,   5, 
     35, 201, 193,  76, 113,   3, 
    150, 133,  54, 225, 177, 136, 
     26, 155, 248, 172, 225,  29, 
    144,  25,  61, 156, 153, 189, 
     92, 133,  71,  34, 111,  88, 
     58, 246, 111, 173, 243, 166, 
    165, 138, 248,   0, 150, 155, 
     16, 111, 108, 233, 218,  11, 
    188, 216,  54, 182,  20, 243, 
     61,  36,  89, 163,  37, 242, 
    172, 241,  14,  47, 253,  28, 
     24, 238, 175,  36,  56, 132, 
      6,  56,   3, 244, 192, 208, 
    131, 210, 197,  89, 104, 144, 
    223, 137,  47,  55,  53,  77, 
    181, 245, 176, 110, 135,  77, 
    195,  54, 142,  70, 108,  80, 
    209, 147, 150, 226, 216,  60, 
    240,  10, 190,  55, 160, 177, 
     97,  90, 145,  37,  19,  99, 
    196, 178, 151,  34,  24,  45, 
    171, 123, 137, 169, 232,  77, 
    235, 229,  76, 103,  60, 106, 
     41, 182, 222, 165, 166, 195, 
      7, 244,  52,  28,  50, 210, 
     98, 127,  69,  77,  51,  69, 
     79,  43, 138, 145,  78, 169, 
    248, 187, 236, 185,  31,   3, 
     60, 108, 246,  80, 244,  46, 
    215, 191, 194,  16,  19, 118, 
     65,  18, 115, 216, 194, 236, 
     64, 204,  80, 153, 184, 211, 
     75,  48,  74,  98, 238,  32, 
      6,   9, 177,  60, 230, 218, 
    219, 157, 134, 223,   4,  56, 
    126,  60, 137,  52, 145,  76, 
    116, 111, 178, 135, 245,  58, 
    222, 233, 161, 186,  94, 124, 
     85, 127,  67, 207, 132, 215, 
    254,  55,  43, 126, 164,  30, 
     45, 138, 220, 197,  75,  26, 
    126, 195, 166,  63, 255, 147, 
     31, 201,  55, 245,  31, 182, 
    236, 252, 252, 190,  79,  30, 
    104, 219, 159,  71, 103, 166, 
    222, 124, 175, 143, 164,  63, 
    175, 142,  36, 167,  35, 231, 
    156,  27, 110, 165,  92, 115, 
     38, 243, 229, 251, 125,  23, 
     38,  46, 245, 101, 114,  11, 
    149, 162,  91, 115, 198,  11, 
    245, 154,  51,  90, 168, 186, 
    179, 245, 201, 137, 113, 167, 
     86, 157, 117,  50, 183, 114, 
    115, 110, 181, 230, 140, 148, 
     23,  42, 133, 162,  59,  39, 
     62, 186,  86, 114, 199,  74, 
    247,  10, 213, 114, 105, 193, 
     45, 213, 175, 228,  42,  99, 
    243, 243, 248, 205, 244, 245, 
     12, 166,  81, 102,  42, 238, 
    236, 221,  98, 174, 122, 181, 
    124, 177, 124, 243, 116, 101, 
     46,  15,  63,   1,  10, 131, 
     21, 117,  88,  72,  83,  72, 
      8,   0,   0,   0,  95,  64, 
    116,   6, 108, 178, 116, 186, 
     88,  80,  68,  80, 115,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  69, 
    110, 118, 105, 114, 111, 110, 
    109, 101, 110, 116,  77,  97, 
    112,  69, 102, 102, 101,  99, 
    116,  95,  80,  83,  69, 110, 
    118,  77,  97, 112,  83, 112, 
    101,  99, 117, 108,  97, 114, 
     78, 111,  70, 111, 103,  46, 
    112, 100,  98
};
