#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[40]
// Embedded Data:
//  0x00000028 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000023 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mov o0.xyzw, r0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[40], bundle is:[140] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSCopy.pdb
// Shader Semantic Hash      : 0x1d86ac57509b6b64
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 76 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x38, dwords=0xE)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000014: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000001C: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000020: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610002
  s_mov_b64     exec, s[16:17]                          // 000000000030: BEFE0410
  s_waitcnt     vmcnt(0)                                // 000000000034: BF8C0F70
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000038: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 00000000003C: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000040: F8001C0F 00000100
  s_endpgm                                              // 000000000048: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   79
//  CycleSimNWaves:             79
//  Code Size:                  76
//Assembler Counts:
//  num_32bit_ops                     : 15
//  num_64bit_ops                     : 2
//  num_alu                           : 6
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 76
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 79
// m_uCycleSimNWaves                 : 79

// Assembler Counts:
// num_32bit_ops                     : 15
// num_64bit_ops                     : 2
// num_alu                           : 6
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSCopy[] =
{
     68,  88,  66,  67, 224, 159, 
    194,  67, 220,  91,  50,  37, 
    255, 225,  97, 135,  63, 238, 
    165, 137,   1,   0,   0,   0, 
     19,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 160,   3,   0,   0, 
    176,   3,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 216,   2, 
      0,   0,  80,   0,   0,   0, 
    182,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     40,   0,   0,   0,  80,   0, 
      0,   0,  35,   0,   0,   0, 
    106,   8,   0,   1,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   1,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 142,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 108,  15,   0, 120,   1, 
    237,  87, 191,  79, 219,  64, 
     24, 253, 206, 118, 105, 160, 
    128, 169, 212, 129,  74,  32, 
     49, 118, 129, 185,  98, 168, 
    138, 130, 212, 129, 170,  88, 
     13,  82,  81, 116,   2, 242, 
    195, 136, 168, 161, 182, 226, 
     12, 237,  18,  96,  65,  12, 
     12, 140, 149, 186, 116, 232, 
    216, 161, 127,  65,  18, 117, 
    242, 216, 161, 127,   2,   3, 
     35,  99,   6,  20, 250,  61, 
    231, 142,  30, 129, 110, 150, 
     64, 170, 159, 244, 238, 249, 
    249, 190, 251, 252, 249, 206, 
    150, 238, 234,  46,  37, 248, 
    109, 191, 248,   6,  93, 236, 
     55,  55, 143,  89,  31,  48, 
    133,  82, 224, 243,   4,  90, 
    162, 185,  73, 180,  68, 207, 
    208,  32, 192,  34, 114,  88, 
    158,  48,  95,  51,  95,  50, 
    209, 167, 185, 189, 253, 102, 
    137,  40, 100,  18,  33,   5, 
     98,  87,  21, 241, 104,  30, 
     78,  35, 204,  81,  38, 210, 
      1,  90,   1,  27,  13,   3, 
    227, 134, 129, 177,  26, 232, 
    215,  30, 106, 230,  32,  31, 
    205, 237, 120, 204, 188,  45, 
    183,   6, 106, 211, 185, 160, 
    168,  19, 192, 251, 222,  53, 
      6, 117, 153, 237, 223, 117, 
      2, 176,  30,  38, 176, 116, 
     58, 238,  84, 197, 233,  57, 
    235,  41, 143, 185, 192, 187, 
    117, 153, 255, 194,  37,  99, 
     28,  23,   6, 180,  71, 254, 
     17, 193, 171, 150, 227, 139, 
    255,  20, 250, 123, 194,  92, 
     96, 126, 167, 152, 234,  55, 
     75, 160, 251,   7, 191, 210, 
    126,   7,  60, 153, 166,  30, 
    156, 246,  98, 200, 219, 240, 
     72, 104, 122, 252,  28,  54, 
    109,  88,  15, 173,  13, 119, 
     70, 245, 219,  36, 217,  75, 
    195,  23, 217,  23,  13, 191, 
    197, 126, 203, 240, 101, 246, 
    229,  43, 175, 242, 187, 201, 
    243,  44,  27, 107, 205,  55, 
     91, 247, 153,  89, 141, 233, 
     48, 171,  49,  29, 102,  53, 
    166, 195, 172, 198, 116, 152, 
    213, 152,  14, 179,  26, 211, 
     97,  86,  99, 106, 164, 150, 
    115, 210, 110, 141, 245, 219, 
     36, 126, 118, 115, 226, 176, 
    107, 217,  23, 109, 222, 124, 
    199,  36, 198,  99,  65, 163, 
    177,  16,  19, 241,  30,  29, 
    119, 200, 221,  63, 183, 168, 
     68,  83,  78, 191,  29, 186, 
    236, 135, 247, 141, 116, 208, 
    121,  10, 213,   7,   2,  19, 
    185,  36, 224,  10, 137, 115, 
    196, 181,  45, 190,  55, 216, 
    204, 210, 115, 165, 211,  76, 
    156, 149, 156, 228,   4,  69, 
     84, 125, 255, 197, 123, 247, 
    253, 112,  22, 215, 192, 145, 
    138, 219,  81,  58, 199, 188, 
    126, 166,  72, 142, 163,  55, 
    240,  67, 197, 127,  85, 138, 
    189,  53, 246, 211, 147, 250, 
    164, 170, 238, 255,  82,  26, 
     43,  69, 173, 143, 152, 195, 
    117, 156, 169, 126, 201,  68, 
    165, 249,  69, 249, 214,  15, 
    131,  72, 174, 151, 131, 143, 
    243,  75, 107, 175, 230,  11, 
    165, 221, 176, 238,  71, 114, 
    165, 214, 140, 228, 114, 173, 
    225,  87, 154, 235, 107,  43, 
     50, 106,  84, 100,  97, 167, 
     84, 245,  27, 145, 204,   7, 
    187,  97, 173, 238,  87, 147, 
     65, 171,  31, 124,  47, 136, 
    154,  94,  35, 168, 248,  81, 
    180, 233,  21, 242,  65, 248, 
    105,  33, 172, 150, 233,  15, 
      9, 124, 217,  60,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    100, 107, 155,  80,  87, 172, 
    134,  29,  88,  80,  68,  80, 
     91,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  80, 111, 115, 116,  80, 
    114, 111,  99, 101, 115, 115, 
     95,  80,  83,  67, 111, 112, 
    121,  46, 112, 100,  98
};
