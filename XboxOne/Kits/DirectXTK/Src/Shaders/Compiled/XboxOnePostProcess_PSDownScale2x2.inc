#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[97]
// Embedded Data:
//  0x00000061 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
mov r0.xyzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  ige r1.y, r1.x, l(4)
  breakc_nz r1.y
  add r1.yz, v1.xxyx, cb0[r1.x + 0].xxyx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.yzyy, t0.xyzw, s0
  add r0.xyzw, r0.xyzw, r2.xyzw
  iadd r1.x, r1.x, l(1)
endloop 
mul o0.xyzw, r0.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[97], bundle is:[177] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSDownScale2x2.pdb
// Shader Semantic Hash      : 0x43bcccd272b37fa2
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 228 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 20;
NumSgprs             = 28;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xD0, dwords=0x34)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[24:25], exec                          // 000000000000: BE98047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_waitcnt     lgkmcnt(0)                              // 00000000000C: BF8C007F
  s_buffer_load_dwordx2  s[0:1], s[16:19], 0x00         // 000000000010: C2401100
  s_buffer_load_dwordx2  s[20:21], s[16:19], 0x04       // 000000000014: C24A1104
  s_buffer_load_dwordx2  s[22:23], s[16:19], 0x08       // 000000000018: C24B1108
  s_buffer_load_dwordx2  s[16:17], s[16:19], 0x0c       // 00000000001C: C248110C
  s_mov_b32     m0, s2                                  // 000000000020: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000024: C8080000
  v_interp_p1_f32  v0, v0, attr0.y                      // 000000000028: C8000100
  v_interp_p2_f32  v2, v1, attr0.x                      // 00000000002C: C8090001
  v_interp_p2_f32  v0, v1, attr0.y                      // 000000000030: C8010101
  s_waitcnt     lgkmcnt(0)                              // 000000000034: BF8C007F
  v_add_f32     v8, s0, v2                              // 000000000038: 06100400
  v_add_f32     v9, s1, v0                              // 00000000003C: 06120001
  v_add_f32     v3, s20, v2                             // 000000000040: 06060414
  v_add_f32     v4, s21, v0                             // 000000000044: 06080015
  v_add_f32     v5, s22, v2                             // 000000000048: 060A0416
  v_add_f32     v6, s23, v0                             // 00000000004C: 060C0017
  image_sample  v[8:11], v[8:9], s[4:11], s[12:15] dmask:0xf // 000000000050: F0800F00 00610808
  image_sample  v[12:15], v[3:4], s[4:11], s[12:15] dmask:0xf // 000000000058: F0800F00 00610C03
  v_add_f32     v16, s16, v2                            // 000000000060: 06200410
  v_add_f32     v17, s17, v0                            // 000000000064: 06220011
  image_sample  v[2:5], v[5:6], s[4:11], s[12:15] dmask:0xf // 000000000068: F0800F00 00610205
  image_sample  v[16:19], v[16:17], s[4:11], s[12:15] dmask:0xf // 000000000070: F0800F00 00611010
  s_waitcnt     vmcnt(2)                                // 000000000078: BF8C0F72
  v_add_f32     v0, v8, v12                             // 00000000007C: 06001908
  v_add_f32     v1, v9, v13                             // 000000000080: 06021B09
  v_add_f32     v6, v10, v14                            // 000000000084: 060C1D0A
  v_add_f32     v7, v11, v15                            // 000000000088: 060E1F0B
  s_waitcnt     vmcnt(1)                                // 00000000008C: BF8C0F71
  v_add_f32     v0, v0, v2                              // 000000000090: 06000500
  v_add_f32     v1, v1, v3                              // 000000000094: 06020701
  v_add_f32     v2, v6, v4                              // 000000000098: 06040906
  v_add_f32     v3, v7, v5                              // 00000000009C: 06060B07
  s_waitcnt     vmcnt(0)                                // 0000000000A0: BF8C0F70
  v_add_f32     v0, v0, v16                             // 0000000000A4: 06002100
  v_add_f32     v1, v1, v17                             // 0000000000A8: 06022301
  v_add_f32     v2, v2, v18                             // 0000000000AC: 06042502
  v_add_f32     v3, v3, v19                             // 0000000000B0: 06062703
  s_mov_b32     s0, 0x3e800000                          // 0000000000B4: BE8003FF 3E800000
  v_mul_legacy_f32  v0, s0, v0                          // 0000000000BC: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 0000000000C0: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 0000000000C4: 0E040400
  v_mul_legacy_f32  v3, s0, v3                          // 0000000000C8: 0E060600
  s_mov_b64     exec, s[24:25]                          // 0000000000CC: BEFE0418
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 0000000000D0: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000000D4: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000D8: F8001C0F 00000100
  s_endpgm                                              // 0000000000E0: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   20
//  NumSRegs:                   28
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   81
//  CycleSimNWaves:             81
//  Code Size:                  228
//Assembler Counts:
//  num_32bit_ops                     : 46
//  num_64bit_ops                     : 5
//  num_alu                           : 30
//  num_fc                            : 16
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 4
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 26
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 5
//  num_vmem_group                    : 2
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 20
// m_uNumSRegs                       : 28
// m_uSCCodeSize                     : 228
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 81
// m_uCycleSimNWaves                 : 81

// Assembler Counts:
// num_32bit_ops                     : 46
// num_64bit_ops                     : 5
// num_alu                           : 30
// num_fc                            : 16
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 4
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 26
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 5
// constant_literal_operands         : 0
// num_tex                           : 5
// num_vmem_group                    : 2
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSDownScale2x2[] =
{
     68,  88,  66,  67, 244,  65, 
     41, 129, 167,  96, 111,  34, 
    149, 101, 251, 152, 147, 234, 
    226,  69,   1,   0,   0,   0, 
    147,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0,  24,   5,   0,   0, 
     40,   5,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  80,   4, 
      0,   0,  80,   0,   0,   0, 
     20,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     97,   0,   0,   0,  80,   0, 
      0,   0,  92,   0,   0,   0, 
    106,   8,   0,   1,  89,   8, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   3,   0, 
      0,   0,  54,   0,   0,   8, 
    242,   0,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5,  18,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     48,   0,   0,   1,  33,   0, 
      0,   7,  34,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,   4,   0, 
      0,   0,   3,   0,   4,   3, 
     26,   0,  16,   0,   1,   0, 
      0,   0,   0,   0,   0,   9, 
     98,   0,  16,   0,   1,   0, 
      0,   0,   6,  17,  16,   0, 
      1,   0,   0,   0,   6, 129, 
     32,   4,   0,   0,   0,   0, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      2,   0,   0,   0, 150,   5, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   2,   0, 
      0,   0,  30,   0,   0,   7, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  10,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   1,   0,   0,   0, 
     22,   0,   0,   1,  56,   0, 
      0,  10, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,   0,   0, 
    128,  62,   0,   0, 128,  62, 
      0,   0, 128,  62,   0,   0, 
    128,  62,  62,   0,   0,   1, 
     53,  16,   0,   0, 179,   0, 
      0,   0,  23,   0,   1,   0, 
     41,  44,  16,   0, 120,   1, 
    237,  87,  77,  79,  19,  81, 
     20, 189,  51, 243, 184,  76, 
     75, 157, 182, 138,  10, 138, 
    136,  95, 193, 133, 176, 160, 
    174,  92,  40,   2, 137,  70, 
     22,  34, 101, 209, 144,   9, 
     50, 109,  39, 129,   4, 104, 
    237,  52, 145, 133,  41, 117, 
    231, 130,   5,  43, 195, 202, 
     24, 163, 191, 192,  45, 161, 
    218,  85,  23, 184, 241,  15, 
    184, 225,   7, 176, 116,  97, 
    196, 123, 135, 247,  96, 168, 
    178, 155,  68,  19, 231,  36, 
    231, 222, 119, 222, 215, 156, 
    153,  55, 139, 119, 111, 165, 
    192, 199, 189, 233, 173, 215, 
    156, 119,  63, 188, 249,  86, 
    214,   0,  58, 168,  77, 201, 
    207, 140, 205,  83,  28,   1, 
    118,  44, 142,   0,  55,  57, 
    240,   4,  29, 160, 155,  82, 
     31, 113, 151,  56,  74, 228, 
     49, 197,  47,  59, 253,  99, 
    153, 204, 224,  24,  53, 161, 
    151, 120, 134, 248,  68, 114, 
    152, 200, 251, 247,  19, 217, 
      6, 111, 199,  16,  28,  36, 
    144,   3,  65, 249,   8, 226, 
      2,   7,   9,  94, 163, 230, 
    112,  38,  91,  71, 112,  57, 
    252,  25,  25,  34, 251,  63, 
      9, 236,  77, 249,  97, 127, 
    242, 115, 249, 239, 251, 183, 
    113, 240, 189, 142,  34,  83, 
    157,  19, 131, 207,  35,   8, 
     62,  58, 158, 195, 120,  33, 
    207, 209, 224,  64, 216, 144, 
     90, 157, 229,  39, 226,  73, 
    216,  39, 168, 239, 160, 160, 
     52, 239, 143,  26, 237, 106, 
     82, 227,  63,  69, 240, 127, 
    225, 255, 144, 191,  77, 146, 
    168, 160, 198, 111, 115, 128, 
    122, 131, 185, 209,   3, 223, 
     89,  41, 173, 181, 105, 131, 
     53, 111,  24, 212, 124, 120, 
      6, 204, 233, 157, 250,  92, 
    178,  79, 142,  27,  96, 147, 
    182,   3, 122, 150, 244, 108, 
     64, 207, 147, 158,  15, 232, 
     60, 233, 252, 161, 150, 251, 
     39, 253, 231, 233,   6, 159, 
     53, 117, 214, 254, 101,  70, 
     30, 195,  97, 228,  49,  28, 
     70,  30, 195,  97, 228,  49, 
     28,  70,  30, 195,  97, 228, 
     49,  28,  70,  30,  67,  35, 
    212, 196, 230, 118,  45, 254, 
    115, 155, 238, 106, 159, 215, 
     96, 189,   1, 233, 209, 166, 
     72,  63, 106, 154, 233, 201, 
    102,  34, 253, 176, 169,  27, 
     63, 182, 233,  50, 222, 162, 
    187,  93,  75, 131,  88,  75, 
    211, 180, 150,  63,  79, 164, 
     80, 131, 211, 216,  45,  16, 
    207, 130, 137, 231,  68,  28, 
    207,  67,   2,  33,  89, 223, 
     51,  77, 135,  46, 172, 245, 
     61,  35, 225,  64,  74,  12, 
     96,  26, 174, 250, 253,  29, 
    250,  65, 127,  42, 229,  64, 
     37, 185, 222,  48, 123,   1, 
     99,  23, 117, 140,  95,  74, 
     96, 215, 101,  11, 159,  81, 
     31,  21,  95, 168, 117, 234, 
    136,  49, 129, 157,  93, 136, 
    101, 238, 187,  66, 125, 215, 
    116, 212, 111,   8,  52,   6, 
     17, 247, 141,  58, 121, 170, 
    223,  37, 251,  22, 232, 186, 
      5,  66,  88, 128, 104, 245, 
      8, 122, 143, 246, 251,  44, 
    188, 108, 244, 114,  62,  86, 
    208,  73, 152, 254, 132,  67, 
    248,  74, 104, 199,  74,  15, 
    127,  25, 245,  37,  56,  75, 
    152, 242,  50, 190,  43, 107, 
    158, 235, 196,  24,  81, 163, 
    135,  51,   6, 136,  66,  86, 
    158, 239, 214,  62,  86, 190, 
    238, 108, 141, 115, 155,  49, 
     42, 215,  14, 168,  76,  12, 
    238,  13, 240, 158, 195, 111, 
     88, 144, 243, 115,  50, 115, 
     77, 192, 117, 128, 229,  87, 
    171,   4, 233, 229, 149,  28, 
    175, 203, 204, 239, 210,  69, 
    108, 247, 241,  86, 142,  23, 
    137, 236, 116, 252, 142,  61, 
    237, 150,  75, 158, 157, 203, 
    151,  86, 135, 238, 207,  60, 
     24, 202,  58, 203, 229,  37, 
    215, 179,  39,  23, 171, 158, 
     61, 177,  88, 113,  11, 213, 
    220, 204, 164, 237,  85,  10, 
    118, 118, 193,  41, 186,  21, 
    207,  30,  47,  45, 151,  23, 
    151, 220, 162, 191, 232, 241, 
    138,  59,  85, 242, 170,  83, 
    149,  82, 193, 245, 188, 167, 
     83, 217, 137, 210, 243, 149, 
    108, 193,  89, 114,  71,  86, 
     71, 134, 203, 197,  60, 252, 
      2, 193, 112, 245, 173,   0, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 162, 127, 
    179, 114, 210, 204, 188,  67, 
     88,  80,  68,  80,  99,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  80, 
    111, 115, 116,  80, 114, 111, 
     99, 101, 115, 115,  95,  80, 
     83,  68, 111, 119, 110,  83, 
     99,  97, 108, 101,  50, 120, 
     50,  46, 112, 100,  98
};
