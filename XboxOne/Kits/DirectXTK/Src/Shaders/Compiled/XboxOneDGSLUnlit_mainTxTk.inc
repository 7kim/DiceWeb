#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[67]
// Embedded Data:
//  0x00000043 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000003e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.w, r0.w, v1.w
eq r1.x, r0.w, l(0.000000)
discard_nz r1.x
mul o0.xyz, r0.xyzx, v1.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[67], bundle is:[160] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLUnlit_mainTxTk.pdb
// Shader Semantic Hash      : 0xf40f8239754becb1
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 2, channelMask  3, param1, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 144 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 8;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x7C, dwords=0x1F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v5, off, off done vm          // 000000000008: F8001803 00000501
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v5                       // 000000000004: 5E000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v0, v5                      // 000000000004: 5C000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v0, v5                      // 000000000004: 5A000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v0, v5                          // 000000000004: 60000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v0, v5                          // 000000000004: 62000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v0, v5 done vm            // 000000000008: F800180F 05000201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000014: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 00000000001C: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0)                                // 000000000038: BF8C0F70
  v_mul_legacy_f32  v5, v5, v6                          // 00000000003C: 0E0A0D05
  v_cmp_eq_f32  vcc, 0, v5                              // 000000000040: 7C040A80
  s_andn2_b64   s[16:17], s[16:17], vcc // wrscc        // 000000000044: 8A906A10
  s_cbranch_scc0  label_001E                            // 000000000048: BF84000B
  s_and_b64     exec, exec, s[16:17] // wrscc           // 00000000004C: 87FE107E
  s_wqm_b64     exec, exec // wrscc                     // 000000000050: BEFE0A7E
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000054: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000058: C81C0100
  v_interp_p1_f32  v0, v0, attr0.z                      // 00000000005C: C8000200
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000060: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000064: C81D0101
  v_interp_p2_f32  v0, v1, attr0.z                      // 000000000068: C8010201
  v_mul_legacy_f32  v1, v2, v6                          // 00000000006C: 0E020D02
  v_mul_legacy_f32  v2, v3, v7                          // 000000000070: 0E040F03
  v_mul_legacy_f32  v0, v4, v0                          // 000000000074: 0E000104
label_001E:
  s_mov_b64     exec, s[16:17]                          // 000000000078: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 00000000007C: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v5                       // 000000000080: 5E000B00
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000084: F8001C0F 00000001
  s_endpgm                                              // 00000000008C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   8
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  144
//Assembler Counts:
//  num_32bit_ops                     : 32
//  num_64bit_ops                     : 2
//  num_alu                           : 19
//  num_fc                            : 13
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 2
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 8
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 144
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 32
// num_64bit_ops                     : 2
// num_alu                           : 19
// num_fc                            : 13
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 2
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLUnlit_mainTxTk[] =
{
     68,  88,  66,  67, 236, 234, 
    214,  53, 249, 220, 174,  91, 
    166,  26, 228,  51, 211, 253, 
    109, 241,   1,   0,   0,   0, 
     99,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0, 240,   4,   0,   0, 
      0,   5,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 148,   3,   0,   0, 
     80,   0,   0,   0, 229,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  67,   0, 
      0,   0,  80,   0,   0,   0, 
     62,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   1,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   2,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   2,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     58,  16,  16,   0,   1,   0, 
      0,   0,  24,   0,   0,   7, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     13,   0,   4,   3,  10,   0, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   7, 114,  32, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 162,   0,   0,   0, 
     23,   0,   1,   0,  41, 176, 
     15,   0, 120,   1, 237,  87, 
     61, 104,  19,  97,  24, 126, 
    191, 203,  93,  72, 243, 119, 
      1,  59,  36,  80,  81, 156, 
     58,  88, 119, 197, 193, 208, 
     66, 135,   8, 138, 137,  80, 
    234,  81, 155,  52,  87, 140, 
    230, 143,  36,  66, 135,  18, 
    163, 136, 130, 116, 200, 224, 
    224, 207,  38, 142,  10,  58, 
    184,  38, 193, 233,   6, 221, 
    157, 156, 196, 201, 193, 161, 
     67,   7, 137, 190, 207, 221, 
    247, 225, 181, 218, 237, 192, 
    130, 247, 192, 243, 190, 247, 
    220, 247, 222, 155,  39, 223, 
    119,   7, 223, 247, 198,  36, 
     23, 159, 158, 127, 125, 129, 
    252, 238, 245, 181, 189,  61, 
    206,   6,  83, 200,  12,  60, 
     73,  33,  18,  85, 211, 136, 
     68, 243,   8,  40, 208, 136, 
     98, 156, 102, 153,  67, 230, 
      5,  38, 198,  20, 159,  61, 
    253, 152, 223, 220, 252, 156, 
    231,  75,  66, 139,  56, 243, 
    178, 228,  73,  38,  63,  78, 
    199, 152,  24,  67,  59,  64, 
    101,  64,  71,  96, 192,   7, 
    106, 253, 136,  34,  48,  80, 
    159, 100, 170, 113, 100, 127, 
     15, 178,  17, 254, 142,  83, 
     76, 248,  63,  12, 240, 166, 
    122,  33, 195,  39, 128, 255, 
    251, 175, 225, 249, 242, 199, 
    223, 235,   4,  96,  61, 252, 
    192, 210, 169, 186, 121, 185, 
    142, 106, 206, 206,  75, 173, 
    214, 114, 194,  60,  12,  63, 
     25, 152, 111,  63, 148,  70, 
    191, 168, 224, 151, 138,  27, 
     69,  53, 158, 189,  12, 223, 
    248, 207, 160, 222,  89, 204, 
      5, 136, 119,  93, 126, 102, 
     46, 212, 248,   9,   4,  26, 
    140, 193,  97, 150, 240, 217, 
     49,  60,  45,  88, 123, 107, 
    229, 233,   8,  52, 154, 249, 
     53, 127,  20, 194, 208, 214, 
     40,  65, 107, 230,  28, 107, 
     30, 101, 109, 177, 182, 124, 
    122, 149, 245, 170,  79, 175, 
    179,  94, 247, 233,  10, 235, 
    138, 210, 170, 191, 233, 253, 
    158, 129, 181, 230, 155, 253, 
    163, 204, 208,  99,  48,  12, 
     61,   6, 195, 208,  99,  48, 
     12,  61,   6, 195, 208,  99, 
     48,  12,  61,   6, 195, 208, 
     99,  96, 164, 190,  62,  28, 
    245, 227, 211,  17, 137, 247, 
    147, 152, 120,  48, 209,  34, 
     63,  70, 164, 199,  28,  50, 
    146, 142, 208, 103,  28,  97, 
    164, 156,  59, 180,  51,  38, 
    115, 240,  93, 211, 202,  68, 
    145, 172,  35,  34,  57, 167, 
    109, 238, 140, 141,  84,  60, 
     61, 136, 235, 219, 153, 155, 
    195,  71,   9, 186,  63, 238, 
    103, 166,  15, 221,  94, 148, 
    117,  72, 204,  57, 188, 121, 
    117,   4, 229,  28,  33, 142, 
     59,  66,  19, 142, 150, 210, 
    210,  17,  83,  79, 235, 130, 
    210,  25, 125,  58, 226, 189, 
    227, 190, 189,  39, 209, 221, 
    113,  14,  23, 238,  62, 245, 
      0,  98,  94, 133, 130, 171, 
    184,  17, 206,  27,  10, 143, 
    229,  25, 100,  91, 230,  44, 
    115, 134, 169, 203, 147, 222, 
    219, 111, 133, 219, 103, 239, 
    153, 187, 184,   6,  62, 200, 
    186,  87,  50, 227,  60, 185, 
    255,  92, 242,  18, 225,  15, 
    236, 202, 250,  47,  50, 227, 
    136, 130,  61, 121,  90, 157, 
    118, 229, 253,  89, 185, 105, 
     79, 202,  12, 175,   9, 230, 
     65,  31, 167, 229, 184, 197, 
    132, 211, 197, 115, 214,  21, 
    187, 221, 234,  90,  43, 149, 
    214, 214,  66, 190, 180, 188, 
     80,  44,  55, 218, 117, 187, 
    107,  21, 106, 189, 174, 181, 
     84, 235, 216,  27, 189, 149, 
     82, 193, 234, 118,  54, 172, 
    226, 141, 114, 213, 238, 116, 
    173, 197,  86, 163,  93, 171, 
    219,  85, 247, 161,  75,  77, 
    123, 105, 185, 120, 241, 106, 
    179,  94, 235,  93, 111, 148, 
    107, 205, 210,  86, 233, 214, 
    153, 118, 181,  66, 191,   0, 
     23, 219, 238, 168,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    177, 236,  75, 117,  57, 130, 
     15, 244,  88,  80,  68,  80, 
     91,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68,  71,  83,  76,  85, 
    110, 108, 105, 116,  95, 109, 
     97, 105, 110,  84, 120,  84, 
    107,  46, 112, 100,  98
};
