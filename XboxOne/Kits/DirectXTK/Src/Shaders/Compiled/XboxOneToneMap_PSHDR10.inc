#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[170]
// Embedded Data:
//  0x000000aa - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x000000a5 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
dp3 r1.x, l(0.627404, 0.329282, 0.043314, 0.000000), r0.xyzx
dp3 r1.y, l(0.069097, 0.919540, 0.011361, 0.000000), r0.xyzx
dp3 r1.z, l(0.016392, 0.088013, 0.895595, 0.000000), r0.xyzx
mov o0.w, r0.w
mul r0.xyz, r1.xyzx, cb0[0].yyyy
mul r0.xyz, r0.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, l(0.159302, 0.159302, 0.159302, 0.000000)
exp r0.xyz, r0.xyzx
mad r1.xyz, r0.xyzx, l(18.851563, 18.851563, 18.851563, 0.000000), l(0.835938, 0.835938, 0.835938, 0.000000)
mad r0.xyz, r0.xyzx, l(18.687500, 18.687500, 18.687500, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
div r0.xyz, r1.xyzx, r0.xyzx
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(78.843750, 78.843750, 78.843750, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[170], bundle is:[200] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSHDR10.pdb
// Shader Semantic Hash      : 0x1be1714a927f3cff
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 376 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 8;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x164, dwords=0x59)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v3, off, off done vm          // 000000000008: F8001803 00000301
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000004: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v0, v3                      // 000000000004: 5C000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v0, v3                      // 000000000004: 5A000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v0, v3                          // 000000000004: 60000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v0, v3                          // 000000000004: 62000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v0, v3 done vm            // 000000000008: F800180F 03000201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000014: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000018: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610002
  s_buffer_load_dword  s0, s[16:19], 0x01               // 00000000002C: C2001101
  s_waitcnt     vmcnt(0)                                // 000000000030: BF8C0F70
  s_nop         0x0000                                  // 000000000034: BF800000
  v_mul_legacy_f32  v4, 0x3d31699a, v2                  // 000000000038: 0E0804FF 3D31699A
  v_mul_legacy_f32  v5, 0x3c3a2454, v2                  // 000000000040: 0E0A04FF 3C3A2454
  v_mul_legacy_f32  v2, 0x3f6545b7, v2                  // 000000000048: 0E0404FF 3F6545B7
  v_madmk_f32   v4, v1, 0x3ea897a6, v4                  // 000000000050: 40080901 3EA897A6
  v_madmk_f32   v5, v1, 0x3f6b66f9, v5                  // 000000000058: 400A0B01 3F6B66F9
  v_madmk_f32   v1, v1, 0x3db44044, v2                  // 000000000060: 40020501 3DB44044
  v_madmk_f32   v2, v0, 0x3f209d8c, v4                  // 000000000068: 40040900 3F209D8C
  v_madmk_f32   v4, v0, 0x3d8d82ba, v5                  // 000000000070: 40080B00 3D8D82BA
  v_madmk_f32   v0, v0, 0x3c8647ad, v1                  // 000000000078: 40000300 3C8647AD
  s_waitcnt     lgkmcnt(0)                              // 000000000080: BF8C007F
  v_mul_legacy_f32  v1, s0, v2                          // 000000000084: 0E020400
  v_mul_legacy_f32  v2, s0, v4                          // 000000000088: 0E040800
  v_mul_legacy_f32  v0, s0, v0                          // 00000000008C: 0E000000
  s_mov_b32     s0, 0x38d1b717                          // 000000000090: BE8003FF 38D1B717
  v_mul_legacy_f32  v1, s0, v1                          // 000000000098: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 00000000009C: 0E040400
  v_mul_legacy_f32  v0, s0, v0                          // 0000000000A0: 0E000000
  v_log_f32     v1, abs(v1)                             // 0000000000A4: D34E0101 00000101
  v_log_f32     v2, abs(v2)                             // 0000000000AC: D34E0102 00000102
  v_log_f32     v0, abs(v0)                             // 0000000000B4: D34E0100 00000100
  s_mov_b32     s0, 0x3e232000                          // 0000000000BC: BE8003FF 3E232000
  v_mul_legacy_f32  v1, s0, v1                          // 0000000000C4: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 0000000000C8: 0E040400
  v_mul_legacy_f32  v0, s0, v0                          // 0000000000CC: 0E000000
  v_exp_f32     v1, v1                                  // 0000000000D0: 7E024B01
  v_exp_f32     v2, v2                                  // 0000000000D4: 7E044B02
  v_exp_f32     v0, v0                                  // 0000000000D8: 7E004B00
  s_mov_b32     s0, 0x41958000                          // 0000000000DC: BE8003FF 41958000
  v_mov_b32     v4, 0x4196d000                          // 0000000000E4: 7E0802FF 4196D000
  v_mad_f32     v5, v1, s0, 1.0                         // 0000000000EC: D2820005 03C80101
  v_mad_f32     v6, v2, s0, 1.0                         // 0000000000F4: D2820006 03C80102
  v_mad_f32     v7, v0, s0, 1.0                         // 0000000000FC: D2820007 03C80100
  v_madak_f32   v1, v1, v4, 0x3f560000                  // 000000000104: 42020901 3F560000
  v_madak_f32   v2, v2, v4, 0x3f560000                  // 00000000010C: 42040902 3F560000
  v_madak_f32   v0, v0, v4, 0x3f560000                  // 000000000114: 42000900 3F560000
  v_rcp_f32     v4, v5                                  // 00000000011C: 7E085505
  v_rcp_f32     v5, v6                                  // 000000000120: 7E0A5506
  v_rcp_f32     v6, v7                                  // 000000000124: 7E0C5507
  v_mul_f32     v1, v1, v4                              // 000000000128: 10020901
  v_mul_f32     v2, v2, v5                              // 00000000012C: 10040B02
  v_mul_f32     v0, v0, v6                              // 000000000130: 10000D00
  v_log_f32     v1, v1                                  // 000000000134: 7E024F01
  v_log_f32     v2, v2                                  // 000000000138: 7E044F02
  v_log_f32     v0, v0                                  // 00000000013C: 7E004F00
  s_mov_b32     s0, 0x429db000                          // 000000000140: BE8003FF 429DB000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000148: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 00000000014C: 0E040400
  v_mul_legacy_f32  v0, s0, v0                          // 000000000150: 0E000000
  v_exp_f32     v1, v1                                  // 000000000154: 7E024B01
  v_exp_f32     v2, v2                                  // 000000000158: 7E044B02
  v_exp_f32     v0, v0                                  // 00000000015C: 7E004B00
  s_mov_b64     exec, s[20:21]                          // 000000000160: BEFE0414
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000164: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000168: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000016C: F8001C0F 00000001
  s_endpgm                                              // 000000000174: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   8
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   104
//  CycleSimNWaves:             104
//  Code Size:                  376
//Assembler Counts:
//  num_32bit_ops                     : 61
//  num_64bit_ops                     : 8
//  num_alu                           : 52
//  num_fc                            : 15
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 5
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 8
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 13
//  num_inst_vop2                     : 29
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 8
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 376
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 104
// m_uCycleSimNWaves                 : 104

// Assembler Counts:
// num_32bit_ops                     : 61
// num_64bit_ops                     : 8
// num_alu                           : 52
// num_fc                            : 15
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 5
// num_inst_sopc                     : 0
// num_inst_sop1                     : 8
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 13
// num_inst_vop2                     : 29
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSHDR10[] =
{
     68,  88,  66,  67, 172,  23, 
     16, 138,  75, 136,  83, 167, 
    161, 179, 168,  80,  15,  58, 
     17, 255,   1,   0,   0,   0, 
      8,   7,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 152,   6,   0,   0, 
    168,   6,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 208,   5, 
      0,   0,  80,   0,   0,   0, 
    116,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
    170,   0,   0,   0,  80,   0, 
      0,   0, 165,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  16,   0, 
      0,  10,  18,   0,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0, 140, 157,  32,  63, 
    166, 151, 168,  62, 154, 105, 
     49,  61,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,   0,   0,  10, 
     34,   0,  16,   0,   1,   0, 
      0,   0,   2,  64,   0,   0, 
    186, 130, 141,  61, 249, 102, 
    107,  63,  84,  36,  58,  60, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     16,   0,   0,  10,  66,   0, 
     16,   0,   1,   0,   0,   0, 
      2,  64,   0,   0, 173,  71, 
    134,  60,  68,  64, 180,  61, 
    183,  69, 101,  63,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  86, 133,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,   2,  64, 
      0,   0,  23, 183, 209,  56, 
     23, 183, 209,  56,  23, 183, 
    209,  56,   0,   0,   0,   0, 
     47,   0,   0,   6, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16, 128, 129,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,  32,  35,  62,   0,  32, 
     35,  62,   0,  32,  35,  62, 
      0,   0,   0,   0,  25,   0, 
      0,   5, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  15, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0, 208, 150,  65,   0, 208, 
    150,  65,   0, 208, 150,  65, 
      0,   0,   0,   0,   2,  64, 
      0,   0,   0,   0,  86,  63, 
      0,   0,  86,  63,   0,   0, 
     86,  63,   0,   0,   0,   0, 
     50,   0,   0,  15, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0, 128, 149,  65,   0, 128, 
    149,  65,   0, 128, 149,  65, 
      0,   0,   0,   0,   2,  64, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     14,   0,   0,   7, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  47,   0, 
      0,   5, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0, 176, 157,  66,   0, 176, 
    157,  66,   0, 176, 157,  66, 
      0,   0,   0,   0,  25,   0, 
      0,   5, 114,  32,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     62,   0,   0,   1,  53,  16, 
      0,   0, 202,   0,   0,   0, 
     23,   0,   1,   0,  41, 181, 
     16,   0, 120,   1, 237,  87, 
    207,  79,  19,  65,  20, 126, 
     51, 157, 182, 219,  22, 218, 
    146, 144, 136,  17, 147,  38, 
    114, 240, 130,  17, 195, 193, 
     16,  74, 151,  95, 193, 216, 
    104,  13,  20, 131, 186,  65, 
     90,  88,  67,  35, 208,  74, 
     57, 112,  90,  42,   7,  79, 
    152,  24,   3, 254,  32, 114, 
     51, 198, 139, 137,   7,  12, 
      9, 135, 162, 158, 122, 144, 
    248,   3, 255,   1, 239,  30, 
     60, 106,  66, 168, 239,  45, 
     51, 186, 160, 120, 106, 162, 
     49, 253, 146, 111, 190, 253, 
    118, 102, 222, 188, 153, 221, 
    195, 188,  23,  97, 176,  81, 
     31, 185, 178,  73, 186, 238, 
     61, 181, 180, 200,   1, 220, 
    248, 204, 144, 164, 132,   7, 
    181, 212,   2, 140, 132, 168, 
      5,  56,  78,  13,  13, 192, 
    177,  26,  74,   3, 114,  22, 
    189, 142,  74, 125, 138, 203, 
     15, 223, 118, 109, 190, 217, 
    234, 194,  71, 168,  67,   6, 
    144, 227, 146,  81,  36, 205, 
    109,  69,  82,  88,  10,  71, 
     80,  74,  80, 235, 211,  56, 
     39,  40, 157, 163,  72,   5, 
    129, 196,  84, 108, 144,  58, 
     99, 128,  73, 205, 239, 209, 
    139, 220,  31, 219,   9, 202, 
     77, 197,  34, 149, 219, 183, 
    247, 251, 183, 177, 155, 215, 
    207, 150, 168, 190,  19, 129, 
    190, 135,  19,  65, 164, 122, 
     21, 150,  27, 113,  81, 131, 
    104, 146, 158, 206, 130, 246, 
    246,  18, 121,  16, 202,   8, 
    249, 219, 252, 128, 242,  20, 
    223, 195,  48, 234, 159,  14, 
    245,  63,   7, 253, 139,   4, 
     58,  11, 250,  23, 233, 108, 
    228, 241, 218,  80, 253, 151, 
    168, 129, 194,   6, 241,  78, 
      3, 124,  37, 167,  60,  67, 
     79, 243, 149, 119, 145, 167, 
     96,  78, 143, 199, 204, 220, 
    124,  24, 188,  48,  28, 106, 
     68, 143, 189, 232,  13, 244, 
    134, 195,  95,  70, 127, 217, 
    225,  71, 208, 143,  56, 124, 
     26, 125,  90, 121,  21,  63, 
    180, 187, 158, 139, 190,  53, 
    190, 180, 254, 101,  86, 115, 
    172,  12, 171,  57,  86, 134, 
    213,  28,  43, 195, 106, 142, 
    149,  97,  53, 199, 202, 176, 
    154,  99, 101,  88, 205, 177, 
     98,   4,  75,  44,  22,  45, 
    255,  78,  17,  24, 127, 197, 
     93, 219,  69, 188, 120, 151, 
    128, 213, 148,  24, 248,  74, 
    140, 213, 150, 230,  96,  97, 
      3,  66, 133,  47,  28,  82, 
    192, 234, 224, 117,  46, 132, 
     30, 239, 119, 101, 161,   5, 
    151,  51,  45, 209, 178, 240, 
      7, 147,  77, 109, 237, 101, 
     33, 130, 107, 189, 102, 140, 
    249,  52, 253, 201, 253, 167, 
     29,  44, 224, 215, 191,  93, 
    187,  30, 195, 251, 161, 222, 
    163, 175,  70, 193,  39, 244, 
    133, 149,  72,  12,   2, 154, 
    190,  62, 127,  59, 138, 133, 
    131, 254, 172, 239,  86, 187, 
     29,  95, 240,  32, 104, 130, 
    202, 139,  96, 217,  85,  40, 
     30,  90, 123, 127,  26,  56, 
    190, 195, 152, 244, 142, 177, 
    243,  91,  12,  47, 151,  28, 
    149, 211,  37,  19, 149,  46, 
    199,  52,  22,  34, 199,  58, 
    246, 140, 141, 115, 139, 199, 
    133,   5, 113, 252,   6, 212, 
     95,  88, 234,  44, 115, 205, 
    130, 119, 247,  58, 221,  48, 
    255, 129, 177, 146, 203, 131, 
    202,  81, 189, 168, 128, 202, 
    124,  28, 235, 203, 139,  49, 
    238,  19, 182, 130,  15, 108, 
    117,  15, 106, 150, 103, 208, 
    111, 121,   7, 107,  44,  28, 
     19, 230,   1,  17, 198, 194, 
     49, 204,  18, 184,  70,   2, 
    215,  72, 200,  53, 158, 175, 
    116,  29, 148,  67, 189, 216, 
     41, 226,  25, 236, 185,  99, 
      3, 220, 220,  56,  76,  15, 
    246, 125, 124,  31, 180, 221, 
     17,  10, 182,  19, 108,  79, 
     57, 100,  79, 195, 119,  53, 
    164,  18, 143, 100, 129,  48, 
     43, 181,   9, 233,  67,  50, 
     89, 161,  81,  28,   1,  30, 
    108, 241, 220, 218, 231, 238, 
    158, 189, 241, 233,   8,  61, 
     19,  62, 202,  57, 171,  82, 
     35,  72, 103, 108, 128, 199, 
    212, 252, 130, 109,  57, 254, 
    179,  84, 170,  83, 168,  54, 
      9, 170, 170, 155,  78,   3, 
    209,  72,  29, 136, 122, 169, 
    180,  23, 170, 227, 247, 231, 
    209,  42, 251, 169, 174, 161, 
     76, 187, 219, 140, 126,  51, 
    151, 205,  27,  67, 233, 236, 
    108, 115, 103, 178, 175, 121, 
     32,  53, 153, 155,  48, 243, 
     70,  60,  51, 147,  55, 122, 
     50, 211, 230, 232, 204,  80, 
     50, 110, 228, 167,  71, 141, 
    129, 241, 212, 152,  57, 157, 
     55, 186, 179, 147, 185, 204, 
    132,  57, 102,  79,  74,  76, 
    153, 201, 236, 148, 121,  46, 
    149, 187, 122,  97, 224,  76, 
     79, 127, 203, 201,  19, 185, 
    177,  52, 124,   7,  95, 214, 
     26,  28,  88,  72,  83,  72, 
      8,   0,   0,   0, 255,  60, 
    127, 146,  74, 113, 225,  27, 
     88,  80,  68,  80,  88,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  84, 
    111, 110, 101,  77,  97, 112, 
     95,  80,  83,  72,  68,  82, 
     49,  48,  46, 112, 100,  98
};
