#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[45]
// Embedded Data:
//  0x0000002d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000028 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul o0.xyzw, r0.xyzw, v0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[45], bundle is:[153] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneSpriteEffect_SpritePixelShader.pdb
// Shader Semantic Hash      : 0xd100b1d8462105a9
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  3, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 124 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 9;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x68, dwords=0x1A)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000014: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 00000000001C: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000030: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000038: C8200200
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000003C: C8000300
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000040: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000044: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000048: C8210201
  v_interp_p2_f32  v0, v1, attr0.w                      // 00000000004C: C8010301
  s_waitcnt     vmcnt(0)                                // 000000000050: BF8C0F70
  v_mul_legacy_f32  v1, v2, v6                          // 000000000054: 0E020D02
  v_mul_legacy_f32  v2, v3, v7                          // 000000000058: 0E040F03
  v_mul_legacy_f32  v3, v4, v8                          // 00000000005C: 0E061104
  v_mul_legacy_f32  v0, v5, v0                          // 000000000060: 0E000105
  s_mov_b64     exec, s[16:17]                          // 000000000064: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000068: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 00000000006C: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000070: F8001C0F 00000001
  s_endpgm                                              // 000000000078: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   9
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   79
//  CycleSimNWaves:             79
//  Code Size:                  124
//Assembler Counts:
//  num_32bit_ops                     : 27
//  num_64bit_ops                     : 2
//  num_alu                           : 18
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 9
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 124
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 79
// m_uCycleSimNWaves                 : 79

// Assembler Counts:
// num_32bit_ops                     : 27
// num_64bit_ops                     : 2
// num_alu                           : 18
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE SpriteEffect_SpritePixelShader[] =
{
     68,  88,  66,  67,  91, 228, 
      9, 234, 167, 162,  48, 244, 
    200,  41, 216, 122, 192,  88, 
     42, 111,   1,   0,   0,   0, 
     95,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    132,   0,   0,   0, 184,   0, 
      0,   0, 224,   3,   0,   0, 
    240,   3,   0,   0,  73,  83, 
     71,  78,  72,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  62,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  32,   3,   0,   0, 
     80,   0,   0,   0, 200,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  45,   0, 
      0,   0,  80,   0,   0,   0, 
     40,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   0,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 155,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 168,  15,   0, 120,   1, 
    237,  87, 191, 111, 211,  64, 
     20, 126, 231,  31,  81,  26, 
     26, 187,  64, 135,  20,  90, 
    169, 221, 186, 148,  63, 128, 
      1, 136, 202, 143, 161,  67, 
     43,  82, 161, 170, 178,  66, 
    147, 198,  85,  34, 181, 141, 
    149, 100, 232, 128,  66,  88, 
    152,  58, 116,  44,  76,  12, 
      8, 193, 200, 198, 148,  68, 
     76,  55, 128,  68,  55,  70, 
    254,   4, 198,  14, 168, 240, 
     62, 251,  14, 156,  64,  55, 
     75,  32, 225,  79, 250, 222, 
    187, 207, 126, 247, 252, 206, 
    103,  75, 247,  94, 187,  20, 
    226,  85, 110, 112,  19, 190, 
     89, 126, 112, 227,   5, 123, 
    155,  41, 148,   7, 142, 243, 
    176,  68, 107,  14,  44, 209, 
     34,  12,   2,  12, 162,   9, 
    118, 211, 204,  71, 204,  91, 
     76, 220, 211, 252, 248,  97, 
     88, 124, 254, 236, 164, 200, 
     67,  66, 138,  28, 115,  85, 
    241,  42, 147, 167, 211,  37, 
     38, 114,  32,  29, 160,  61, 
     96, 194,  48,  44, 152,  49, 
    100,  96,  20,  38, 153, 200, 
      5, 192, 199, 115, 144,  15, 
    243, 103, 204,  49, 241, 236, 
    243, 128, 218, 116,  46, 120, 
     29, 139, 245, 254, 109,  68, 
    117, 197, 237, 175, 125,   2, 
    176,  31, 113,  96, 235, 116, 
    220, 180, 218,  71, 253, 206, 
     22, 149, 198, 250, 176, 182, 
     33, 243,  60, 124, 103, 224, 
    125, 199, 161,  53, 242, 101, 
     40, 250, 168,  50, 226,  50, 
     81,  22, 163, 255,  11, 250, 
     91, 197, 187,   0, 167, 152, 
    234,  55,  11, 161, 239,  95, 
    129, 161, 222,   0,  60,  42, 
    208,  41, 148, 214, 130, 117, 
    180,  87, 145,  54, 161, 145, 
     44, 174,  89,   9, 219,  40, 
    155, 130, 202, 238, 236,  79, 
    237, 177, 246,  98, 122, 147, 
    245, 102,  76, 111, 177, 222, 
    138, 233,  42, 235, 170, 214, 
     58, 191,  27,  62, 207,  12, 
    247, 154,  47, 118, 255, 101, 
    166,  53,  38, 195, 180, 198, 
    100, 152, 214, 152,  12, 211, 
     26, 147,  97,  90,  99,  50, 
     76, 107,  76, 134, 105, 141, 
    137, 145, 186, 214,  81, 191, 
    155,  59, 235, 147, 120,  63, 
    204, 138, 167,  67, 195, 252, 
    214,  39,  43,  43, 201, 158, 
    148, 194, 154, 144, 194, 206, 
    203, 199, 116,  56,  32, 183, 
    247, 213,  48,  42,  60, 163, 
     32,  73, 204,  74,  50, 230, 
     37,  55,  87,  82, 208, 140, 
     20,  98,  78,  10,  99,  65, 
     10,  83, 200, 192,  61,  28, 
     24, 121, 195,  49,  93, 203, 
    177,  46, 102,  28,  91, 144, 
     51, 101, 157, 245, 249, 156, 
     56, 114, 206,  36, 122,  50, 
    152, 193,  32,  60, 147, 142, 
     33,  27,  69, 104, 132, 202, 
     18,  35, 173,  64,  79, 245, 
     27, 117, 229,  11,  76, 244, 
     30, 150, 234, 234, 222, 216, 
     11, 119,  63, 191, 165,  19, 
    140, 129, 119,  42, 238,  88, 
    249, 121, 230, 104,  15, 242, 
     18, 230,  55, 124,  81, 241, 
    159, 148, 199,  89,  28, 231, 
    111,  71, 119, 182, 234, 186, 
     62, 160, 159,  42, 141,  90, 
     47,  48, 199, 235,  40, 168, 
    184,  58,  19, 149,  46,  95, 
    247, 238, 251,  65, 179, 237, 
    109,  84, 155,   7,  75, 197, 
    245, 123,  75, 165, 202,  94, 
    176, 235, 183, 189, 149,  70, 
    167, 237, 221, 110, 180, 252, 
    237, 206, 198, 250, 138, 215, 
    110, 109, 123, 165, 122, 165, 
    230, 183, 218, 222, 114, 115, 
     47, 104, 236, 250, 181, 112, 
    210, 234, 190,  95,  10,  90, 
    141, 142, 127, 103, 103, 135, 
     99,  31,  70,  98, 173, 113, 
    224, 239,  70, 241, 215, 130, 
     90, 149, 126,   0, 203,  81, 
    231,  80,  88,  72,  83,  72, 
      8,   0,   0,   0, 169,   5, 
     33,  70, 216, 177,   0, 209, 
     88,  80,  68,  80, 103,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  83, 
    112, 114, 105, 116, 101,  69, 
    102, 102, 101,  99, 116,  95, 
     83, 112, 114, 105, 116, 101, 
     80, 105, 120, 101, 108,  83, 
    104,  97, 100, 101, 114,  46, 
    112, 100,  98
};
