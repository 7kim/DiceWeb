#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[20]
// Embedded Data:
//  0x00000014 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000000f - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
mov o0.xyzw, v1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[20], bundle is:[126] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLUnlit_main.pdb
// Shader Semantic Hash      : 0x4b2fb1f9a556ae7d
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 56 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 5;
NumSgprs             = 5;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x24, dwords=0x9)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v0, off, off done vm          // 000000000008: F8001803 00000002
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000000: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000004: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000000: 5C020702
  v_cvt_pknorm_u16_f32  v0, v4, v0                      // 000000000004: 5C000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000000: 5A020702
  v_cvt_pknorm_i16_f32  v0, v4, v0                      // 000000000004: 5A000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000000: 60020702
  v_cvt_pk_u16_u32  v0, v4, v0                          // 000000000004: 60000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000000: 62020702
  v_cvt_pk_i16_i32  v0, v4, v0                          // 000000000004: 62000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v0 done vm            // 000000000008: F800180F 00040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b32     m0, s2                                  // 000000000000: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000004: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000008: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 00000000000C: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 000000000010: C80D0101
  v_interp_p1_f32  v4, v0, attr0.z                      // 000000000014: C8100200
  v_interp_p2_f32  v4, v1, attr0.z                      // 000000000018: C8110201
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000001C: C8000300
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000020: C8010301
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000024: 5E020702
  v_cvt_pkrtz_f16_f32  v0, v4, v0                       // 000000000028: 5E000104
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000002C: F8001C0F 00000001
  s_endpgm                                              // 000000000034: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   5
//  NumSRegs:                   5
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  56
//Assembler Counts:
//  num_32bit_ops                     : 12
//  num_64bit_ops                     : 1
//  num_alu                           : 10
//  num_fc                            : 2
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 1
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 1
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 8
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 5
// m_uNumSRegs                       : 5
// m_uSCCodeSize                     : 56
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 12
// num_64bit_ops                     : 1
// num_alu                           : 10
// num_fc                            : 2
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 1
// num_inst_sopc                     : 0
// num_inst_sop1                     : 1
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 8
// num_inst_smem                     : 0
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 0
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLUnlit_main[] =
{
     68,  88,  66,  67, 225, 145, 
    136, 201, 146,  74,  84, 216, 
    223, 231, 111,   7,  57,  70, 
     43, 159,   1,   0,   0,   0, 
     27,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0, 172,   3,   0,   0, 
    188,   3,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   0, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  80,   2,   0,   0, 
     80,   0,   0,   0, 148,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  20,   0, 
      0,   0,  80,   0,   0,   0, 
     15,   0,   0,   0, 106,   8, 
      0,   1,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  30,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    128,   0,   0,   0,  23,   0, 
      1,   0,  41,  24,  15,   0, 
    120,   1, 237, 151,  61,  75, 
    195,  64,  24, 199, 159,  75, 
    235,  75, 125, 107, 221,  58, 
     56,  56, 186,  84, 113,  19, 
    113, 176,  40, 136,  84,  80, 
    108, 149,  82,  14, 109, 107, 
      3,   6, 250,  70,  83, 208, 
     69, 209, 111, 224, 168, 206, 
    186,  10, 126,   1, 117, 204, 
    232, 232,  71, 112, 115, 173, 
     32, 232, 243,  79, 239,  48, 
    218, 170,  75,  16, 193, 252, 
    225, 247,  60, 249, 231,  46, 
    151,  39, 185,   4, 238, 226, 
     81, 114, 245, 244,  48, 187, 
    135, 156, 217, 189,  91, 158, 
    227, 220, 195,   8, 149, 161, 
    211,  97,  68, 162, 123, 149, 
     39,  16, 208, 193, 104, 247, 
      1,  51, 204,  60, 131,  54, 
     13,  81,  44, 121, 126,  54, 
    157, 236, 231, 163,  16, 211, 
    203, 172,  43, 134,  24,  12, 
     49, 192, 240,  48, 238, 241, 
    103, 233, 115, 221, 218, 112, 
    141,  22, 198, 215, 234, 232, 
     91,  66, 232,  46,  60,  14, 
    106, 255,  74, 168,  77,  11, 
    227, 234, 123, 126, 119, 205, 
    111, 169, 227,  57,  89, 122, 
    158,  32, 204, 135,  87,  35, 
      8,  63,   8, 207,   5, 238, 
    152, 175, 244, 202,  66, 238, 
     38, 212, 212,  43, 248, 163, 
    242,  78, 200,  63,  83,  24, 
    129, 133, 119, 129, 239,  37, 
    198, 168, 223, 204, 149, 110, 
    143,  32, 208, 209,  45,  56, 
    137,  83,  11,  78, 123, 193, 
    190, 253, 173, 181, 125,   8, 
     30,  63, 144, 215, 179,  51, 
    250, 140, 173, 176, 160, 173, 
    232,  24, 181, 220, 251, 245, 
     25, 146, 189, 244, 248,  28, 
    251, 156, 199, 231, 217, 231, 
     61, 190, 200, 190, 168, 189, 
     30,  63, 234, 222,  47, 172, 
    231, 250, 240,  47,  19, 212, 
    232,  15,  65, 141, 254,  16, 
    212, 232,  15,  65, 141, 254, 
     16, 212, 232,  15,  65, 141, 
    254,  16, 212, 232,  27, 100, 
    132,  94, 110, 120, 177, 237, 
      8, 138,  56,  36, 134,  28, 
     33, 134,  29,  50,  98, 142, 
     48,  70,  29, 222, 112,  57, 
     34,  36,  28,  94, 227, 125, 
     88,  35,  18,  29, 223, 234, 
    205, 192, 163, 218,  47, 196, 
     25, 172,  71, 195, 238,  14, 
    141, 232, 224, 106, 243, 242, 
    249, 122,  42, 133,  99, 104, 
     70, 245, 143, 171,  60, 206, 
     96, 255, 246, 174,  11, 132, 
     14, 229,  85, 255,  53, 149, 
    177,  22, 198, 250, 119, 196, 
    221, 101, 176, 212, 249,  35, 
    149, 247,  85, 198, 246,  97, 
    144, 249,  92, 199, 169, 106, 
    207,  50, 168, 116,  97,  86, 
    174, 155, 245, 154,  45, 179, 
    197, 218, 126,  34, 153,  89, 
     74, 164,  11, 149, 122, 217, 
    180, 101, 202, 106, 218, 114, 
    209, 106, 152,  59, 205, 108, 
     38,  37, 237, 198, 142,  76, 
    239,  22,  74, 102, 195, 150, 
     11, 181,  74, 221,  42, 155, 
     37, 247, 162, 213, 170, 185, 
    184, 148,  94, 217, 168, 150, 
    173, 230, 118, 165,  96,  85, 
     39, 235, 165,  34, 189,   1, 
     37,  58, 202,  86,  88,  72, 
     83,  72,   8,   0,   0,   0, 
    125, 174,  86, 165, 249, 177, 
     47,  75,  88,  80,  68,  80, 
     87,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68,  71,  83,  76,  85, 
    110, 108, 105, 116,  95, 109, 
     97, 105, 110,  46, 112, 100, 
     98
};
