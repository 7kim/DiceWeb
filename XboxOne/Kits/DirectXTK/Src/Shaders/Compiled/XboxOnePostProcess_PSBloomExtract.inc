#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[67]
// Embedded Data:
//  0x00000043 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000003e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
add r0.xyzw, r0.xyzw, -cb0[16].xyzw
add r1.xyzw, -cb0[16].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div_sat o0.xyzw, r0.xyzw, r1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[67], bundle is:[163] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSBloomExtract.pdb
// Shader Semantic Hash      : 0xd68a02fe4c903825
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 176 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 8;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x9C, dwords=0x27)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[20:21], exec                          // 000000000000: BE94047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000014: C80C0100
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000018: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610002
  s_buffer_load_dwordx4  s[0:3], s[16:19], 0x40         // 00000000002C: C2801140
  s_waitcnt     lgkmcnt(0)                              // 000000000030: BF8C007F
  v_subrev_f32  v4, s0, 1.0                             // 000000000034: D20A0004 0001E400
  v_subrev_f32  v5, s1, 1.0                             // 00000000003C: D20A0005 0001E401
  v_subrev_f32  v6, s2, 1.0                             // 000000000044: D20A0006 0001E402
  v_subrev_f32  v7, s3, 1.0                             // 00000000004C: D20A0007 0001E403
  s_waitcnt     vmcnt(0)                                // 000000000054: BF8C0F70
  v_subrev_f32  v0, s0, v0                              // 000000000058: 0A000000
  v_subrev_f32  v1, s1, v1                              // 00000000005C: 0A020201
  v_subrev_f32  v2, s2, v2                              // 000000000060: 0A040402
  v_subrev_f32  v3, s3, v3                              // 000000000064: 0A060603
  v_rcp_f32     v4, v4                                  // 000000000068: 7E085504
  v_rcp_f32     v5, v5                                  // 00000000006C: 7E0A5505
  v_rcp_f32     v6, v6                                  // 000000000070: 7E0C5506
  v_rcp_f32     v7, v7                                  // 000000000074: 7E0E5507
  v_mul_f32     v0, v0, v4 clamp                        // 000000000078: D2100800 00020900
  v_mul_f32     v1, v1, v5 clamp                        // 000000000080: D2100801 00020B01
  v_mul_f32     v2, v2, v6 clamp                        // 000000000088: D2100802 00020D02
  v_mul_f32     v3, v3, v7 clamp                        // 000000000090: D2100803 00020F03
  s_mov_b64     exec, s[20:21]                          // 000000000098: BEFE0414
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 00000000009C: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000000A0: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000A4: F8001C0F 00000100
  s_endpgm                                              // 0000000000AC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   8
//  NumSRegs:                   24
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  176
//Assembler Counts:
//  num_32bit_ops                     : 24
//  num_64bit_ops                     : 10
//  num_alu                           : 22
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 6
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 8
// m_uNumSRegs                       : 24
// m_uSCCodeSize                     : 176
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 24
// num_64bit_ops                     : 10
// num_alu                           : 22
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 6
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSBloomExtract[] =
{
     68,  88,  66,  67, 218,  37, 
     89,  82,  18, 136, 189, 186, 
     97,  10,  33,  51, 228,  63, 
      8,   2,   1,   0,   0,   0, 
    227,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 104,   4,   0,   0, 
    120,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 160,   3, 
      0,   0,  80,   0,   0,   0, 
    232,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     67,   0,   0,   0,  80,   0, 
      0,   0,  62,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   9, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70, 142,  32, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     16,   0,   0,   0,   0,   0, 
      0,  12, 242,   0,  16,   0, 
      1,   0,   0,   0,  70, 142, 
     32, 128,  65,   0,   0,   0, 
      0,   0,   0,   0,  16,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0, 128,  63,  14,  32, 
      0,   7, 242,  32,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   1,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 165,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 248,  15,   0, 120,   1, 
    237,  87,  77, 107,  19,  81, 
     20, 189, 239, 205, 116, 146, 
     76, 147,  76,  11,  42,  21, 
     92, 168,  84,  20, 161, 186, 
    113,  33,  46, 164, 182, 138, 
     66,  11,   6, 147,  64,  41, 
     67, 109,  62,   6,  12,  36, 
     78, 200, 204, 162, 171,  49, 
    110, 197,  69,  23,  46, 212, 
    181,  63, 160, 191,  32,  81, 
     87, 217,   9,  65, 252,   1, 
    226, 210, 133, 184, 234,  66, 
    170, 247,  76, 223, 212,  49, 
     90,  87,   3,  74, 153,   3, 
    231, 158,  57, 121, 243, 238, 
    156, 204,  75, 224, 189,  93, 
    139,  66,  92,  62, 238, 159, 
    133,  94, 255, 250, 238, 227, 
     46, 235,  20,  83,  40,   5, 
    158,  23,  80,  89, 139, 168, 
     68,  23,  80, 112, 131,  36, 
    202, 178, 204,  49, 119, 152, 
    139,  76, 140,  69, 124, 249, 
    226, 204,  18, 209,  69,  38, 
    209,  44, 115, 154,  89,  86, 
    196,  28, 147, 121,  66,  41, 
    218,   1, 145,   2,  58,  10, 
     35, 210,   8, 240,   6,  51, 
      2,  60,  71,   9,   1, 141, 
    247,  32,   7, 229, 207, 192, 
    151,  70, 254, 195, 128, 108, 
     81,  47,  40, 114,   2, 200, 
    254, 175, 177, 159, 235, 103, 
      5, 163, 117,   2, 176,  30, 
    113,  96, 233, 112,  15, 112, 
     71, 173, 163, 134, 194, 176, 
    149, 143, 214, 242,  53, 243, 
     48, 124, 103, 204, 224,  34, 
    134, 200, 163, 191,  33, 184, 
    235, 223,  94, 234,  17,   7, 
    126, 139,   0, 222,   5, 126, 
    139, 120,  55, 234, 111,  22, 
     34,  26,  63, 143,  66, 253, 
     33, 184,  61,  71, 248, 219, 
     49, 246, 189, 152, 240,  26, 
     60,  26, 198,  61,  22,  79, 
    163,  13, 153, 145,  27, 214, 
     41,  53, 174, 145, 205, 222, 
    142, 249, 117, 246, 235,  49, 
    191, 201, 126,  51, 230, 235, 
    236, 235,   7,  94, 245, 183, 
    194, 231,  73,  13, 107, 205, 
     31,   6, 255,  51, 211, 140, 
    201,  48, 205, 152,  12, 211, 
    140, 201,  48, 205, 152,  12, 
    211, 140, 201,  48, 205, 152, 
     12, 211, 140, 137, 145,   2, 
    253, 217,  32,  48, 247,   6, 
    188,  87, 123,  35, 181, 111, 
      3, 222, 120, 143,  72, 228, 
     71, 130, 114,  35,  33,  10, 
    163,  71, 244, 116,  72,  86, 
    255, 139, 164,  26,  45, 206, 
    246, 223, 194, 235, 100, 142, 
    233, 147, 224, 179, 157,  57, 
     22, 172,   6, 171, 100, 205, 
    176, 106, 172,  93, 139, 231, 
    240,  81,  71,  72, 105,  74, 
     93,  55,  53, 195,  48, 245, 
    106,  54, 152, 170, 154, 129, 
     81, 205,   7, 153, 106,  49, 
    160, 236, 204, 152, 114, 146, 
      4, 171, 152, 150,  36,  89, 
    101,  65, 146, 198, 170,  89, 
    146, 142, 233, 156, 105, 114, 
    111,  74, 143, 135,  39, 161, 
    216,  20,  79,  34,  27, 222, 
    112, 128, 208, 233, 226, 151, 
     99,  68,  56, 141,  63, 203, 
     67,  21, 222, 171, 115, 203, 
    142, 210, 121, 102, 142,  41, 
    248, 225, 192, 105, 166, 174, 
     78, 138, 231, 174, 110, 175, 
    238, 201,  39,  31, 112,  13, 
    228, 213, 166, 252, 179, 154, 
    139, 123, 227, 189, 137,  94, 
    161, 252, 134,  43, 106, 222, 
    188,  82, 236, 239, 177, 167, 
     47,  70, 167, 101, 213, 175, 
    162, 198,  87, 149, 226, 187, 
    224, 252,  59, 153, 163, 173, 
    198, 155,  76,  36,  93, 190, 
    102, 223, 115, 186, 174, 103, 
    175, 213, 221, 173, 133,  27, 
    149, 219,  11, 229,  90, 167, 
    219, 118,  60, 123, 165, 229, 
    123, 246, 205,  86, 207, 105, 
    248, 107, 149,  21, 219, 235, 
     53, 236, 242, 131,  90, 211, 
    233, 121, 246, 178, 219, 233, 
    182, 218,  78,  51, 156, 116, 
    247, 161,  83, 114,  61, 191, 
    212, 115,  27, 142, 231, 221, 
     47, 149, 151, 218, 174, 219, 
    185, 181, 229, 247, 106,  13, 
    255,  82, 183,  89, 167,  31, 
     24, 153, 237, 145,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  37,  56, 144,  76, 
    254,   2, 138, 214,  88,  80, 
     68,  80,  99,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  80, 111, 115, 
    116,  80, 114, 111,  99, 101, 
    115, 115,  95,  80,  83,  66, 
    108, 111, 111, 109,  69, 120, 
    116, 114,  97,  99, 116,  46, 
    112, 100,  98
};
