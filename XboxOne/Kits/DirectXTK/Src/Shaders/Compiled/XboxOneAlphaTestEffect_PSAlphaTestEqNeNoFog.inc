#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[95]
// Embedded Data:
//  0x0000005f - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005a - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r1.x, r0.w, v0.w, -cb0[1].x
mul r0.xyzw, r0.xyzw, v0.xyzw
mov o0.xyzw, r0.xyzw
lt r0.x, |r1.x|, cb0[1].y
movc r0.x, r0.x, cb0[1].z, cb0[1].w
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[95], bundle is:[170] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneAlphaTestEffect_PSAlphaTestEqNeNoFog.pdb
// Shader Semantic Hash      : 0xf70810b2367c602a
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  3, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 160 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 10;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x8C, dwords=0x23)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v3, off, off done vm          // 000000000008: F8001803 00000301
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000004: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v0, v3                      // 000000000004: 5C000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v0, v3                      // 000000000004: 5A000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v0, v3                          // 000000000004: 60000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v0, v3                          // 000000000004: 62000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v0, v3 done vm            // 000000000008: F800180F 03000201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000010: C8080400
  v_interp_p2_f32  v2, v1, attr1.x                      // 000000000014: C8090401
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000018: C80C0500
  v_interp_p2_f32  v3, v1, attr1.y                      // 00000000001C: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400202
  s_buffer_load_dwordx4  s[0:3], s[12:15], 0x04         // 00000000002C: C2800D04
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000038: BF8C0070
  v_mad_legacy_f32  v7, v5, v6, -s0                     // 00000000003C: D2800007 80020D05
  v_interp_p1_f32  v8, v0, attr0.x                      // 000000000044: C8200000
  v_interp_p2_f32  v8, v1, attr0.x                      // 000000000048: C8210001
  v_interp_p1_f32  v9, v0, attr0.y                      // 00000000004C: C8240100
  v_interp_p2_f32  v9, v1, attr0.y                      // 000000000050: C8250101
  v_interp_p1_f32  v0, v0, attr0.z                      // 000000000054: C8000200
  v_interp_p2_f32  v0, v1, attr0.z                      // 000000000058: C8010201
  v_mul_legacy_f32  v1, v2, v8                          // 00000000005C: 0E021102
  v_mul_legacy_f32  v2, v3, v9                          // 000000000060: 0E041303
  v_mul_legacy_f32  v0, v4, v0                          // 000000000064: 0E000104
  v_mul_legacy_f32  v3, v5, v6                          // 000000000068: 0E060D05
  v_cmp_gt_f32  vcc, s1, abs(v7)                        // 00000000006C: D008026A 00020E01
  v_mov_b32     v4, s2                                  // 000000000074: 7E080202
  v_mov_b32     v5, s3                                  // 000000000078: 7E0A0203
  v_cndmask_b32  v4, v5, v4, vcc                        // 00000000007C: 00080905
  v_cmp_gt_f32  vcc, 0, v4                              // 000000000080: 7C080880
  s_andn2_b64   s[16:17], s[16:17], vcc // wrscc        // 000000000084: 8A906A10
  s_mov_b64     exec, s[16:17]                          // 000000000088: BEFE0410
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 00000000008C: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v0, v3                       // 000000000090: 5E000700
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000094: F8001C0F 00000001
  s_endpgm                                              // 00000000009C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   10
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  160
//Assembler Counts:
//  num_32bit_ops                     : 32
//  num_64bit_ops                     : 4
//  num_alu                           : 24
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 1
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 2
//  num_inst_vop2                     : 7
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 12
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 10
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 160
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 32
// num_64bit_ops                     : 4
// num_alu                           : 24
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 1
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 2
// num_inst_vop2                     : 7
// num_inst_vop3                     : 0
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 12
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE AlphaTestEffect_PSAlphaTestEqNeNoFog[] =
{
     68,  88,  66,  67, 203, 138, 
    115, 197, 119,  78,  45,  52, 
    251,  28, 206,  35, 223, 221, 
    102, 145,   1,   0,   0,   0, 
    113,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    132,   0,   0,   0, 184,   0, 
      0,   0, 236,   4,   0,   0, 
    252,   4,   0,   0,  73,  83, 
     71,  78,  72,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  62,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  44,   4,   0,   0, 
     80,   0,   0,   0,  11,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  95,   0, 
      0,   0,  80,   0,   0,   0, 
     90,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   8,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,  11, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  58,  16, 
     16,   0,   0,   0,   0,   0, 
     10, 128,  32, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  49,   0, 
      0,   9,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16, 128, 129,   0,   0,   0, 
      1,   0,   0,   0,  26, 128, 
     32,   0,   0,   0,   0,   0, 
      1,   0,   0,   0,  55,   0, 
      0,  11,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16,   0,   0,   0,   0,   0, 
     42, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     58, 128,  32,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
     49,   0,   0,   7,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     10,   0,  16,   0,   0,   0, 
      0,   0,   1,  64,   0,   0, 
      0,   0,   0,   0,  13,   0, 
      4,   3,  10,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    172,   0,   0,   0,  23,   0, 
      1,   0,  41, 242,  15,   0, 
    120,   1, 237,  87,  61, 107, 
     20,  81,  20, 189, 239, 205, 
     76,  50,  27, 179, 179,  43, 
     73, 177,   1,  11, 197,  21, 
     68, 136, 216,  40,  34,  22, 
     89,  19, 181, 136, 196, 144, 
    221,  34, 132,  33, 110,  54, 
     59,  49,   9, 155, 236, 154, 
    221, 194,  34, 172, 147,  78, 
    196,  34, 165, 101,  10,  75, 
     43, 127, 192,  70, 131, 197, 
     20,   9, 136, 181,  96, 227, 
     15,  16,  17, 180,   8, 209, 
    123, 102, 223,  35,  99,  76, 
    186,   1,   5, 231, 192, 185, 
    247, 157, 247, 121, 103, 238, 
     12, 188, 251,  53,  67,  33, 
     62,  93, 121,  85, 131, 191, 
    250, 121,  99, 103,  81,  16, 
     89, 220, 102,  23, 122, 224, 
     69,  26, 150, 232, 169,   3, 
     75, 116,  17,   6,  19,  36, 
     81,  31, 187,  65, 230,  22, 
    115, 132, 137,  49, 205, 189, 
    221, 111, 133, 189,  93, 121, 
    139, 155, 148, 101, 158,  98, 
     78,  41, 158, 101, 154, 204, 
     28,  19, 123,  96,  59,  64, 
    123, 192, 128,  97,  96,  94, 
    180, 159, 143, 165,  94,  38, 
    128, 254, 126,  38, 250,   0, 
    248, 232,  92, 242,  96, 142, 
     71, 158, 137, 179,  79,   2, 
     98, 211, 123, 193, 235, 185, 
    120, 222, 191, 141, 110,  92, 
    135,  22, 212, 121,   2, 144, 
    143,  40, 144,  58, 204,   1, 
    174, 171,  60, 234, 247, 123, 
     79, 105,  60,  31, 158, 237, 
     13, 243,  36, 252, 100,  32, 
    151,  81, 104, 141, 119, 223, 
     67, 221, 143, 170,  71,  12, 
     16, 217, 104, 253,  95, 192, 
    183,  10, 224,  93, 128, 147, 
     76, 245, 155, 133, 208, 227, 
    231,  97, 200, 223,   6,  55, 
    115, 244,   3,  74, 107, 193, 
    186, 155, 171, 174,  54, 160, 
    177,  89,  84, 115, 242, 132, 
     37, 103, 249,  71, 152, 205, 
    156,  97, 205, 163, 172,  93, 
    214, 110,  68, 207, 176, 158, 
    137, 232,  50, 235, 114,  68, 
     87,  88,  87, 180, 214, 251, 
    103, 186, 231,  25, 200,  53, 
    119, 182, 255, 101,  38,  49, 
    198, 195,  36, 198, 120, 152, 
    196,  24,  15, 147,  24, 227, 
     97,  18,  99,  60,  76,  98, 
    140, 135,  73, 140, 177, 145, 
    218, 230, 102, 167, 221, 119, 
    208, 145, 198, 126, 135,  47, 
    247, 111, 201, 180,   3,  97, 
    166,   2, 178, 250,   3,  97, 
    165, 131,  39, 244, 124, 155, 
     50, 254,  23,  41,  71, 200, 
     76, 251,  59, 100, 228,   2, 
     97,  12,   5,  13, 238, 239, 
     37, 255, 131, 149, 150,  62, 
     87,  98, 129, 160, 115,   1, 
    137, 124,  32, 196, 133, 128, 
     47, 173, 129, 144,  34, 144, 
    167, 165,  99,  12, 152, 142, 
     41, 200, 177, 210,  61, 206, 
    178, 180, 223,  11,  71, 146, 
    148, 118, 219, 144, 125, 109, 
     43, 101, 147, 111, 219, 235, 
    217, 229, 205, 103,  89, 243, 
    160, 195, 119, 201, 223, 238, 
    162,  68,  27, 219,  67, 104, 
    132, 247, 214,  35, 176, 187, 
     51,  52,  66, 197,   7,  69, 
    203, 133, 112,  25, 247, 161, 
    182, 211, 120, 167, 234, 148, 
     45, 229,  81, 191, 165, 152, 
     66,  85,  50,  88, 111, 114, 
      5,   2,  92,  42, 175,  95, 
    123, 157, 181, 191, 163,  13, 
    236, 171,  53,  31, 149,  71, 
    253,  25, 221, 155, 232,  37, 
    204,  31, 200, 171, 203, 251, 
    160, 242, 168, 117, 112, 135, 
    119, 116, 117, 172, 246,  27, 
     83, 227,  55, 149,  71,  44, 
    168, 119, 143, 198, 225, 170, 
    241,  85,  38,  34,  29, 189, 
    225,  78, 121, 141, 122, 211, 
    157, 174, 212,  31,  15,  23, 
     74, 119, 135, 139, 115,  43, 
    141, 154, 215, 116, 199, 151, 
     90,  77, 119, 108, 105, 205, 
    155, 111,  77, 151, 198, 221, 
    230, 218, 188,  91,  92, 156, 
    171, 122, 107,  77, 119, 180, 
    190, 210,  88, 170, 121, 213, 
    112, 209, 253,  85, 175,  80, 
    107,  44, 206, 149, 188, 102, 
    235, 246, 194,   2,  79, 127, 
     48,  89,  60, 236, 121,  52, 
    225,  77, 212, 239, 212,  31, 
     94, 110,  84,  43, 244,  11, 
     40, 159, 240, 137,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  42,  96, 124,  54, 
    178,  16,   8, 247,  88,  80, 
     68,  80, 109,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  65, 108, 112, 
    104,  97,  84, 101, 115, 116, 
     69, 113,  78, 101,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
