#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[93]
// Embedded Data:
//  0x0000005d - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000058 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyz, r0.xyzx, cb0[0].xxxx
mad r0.xyz, r0.xyzx, cb0[0].xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, r0.w
div r0.xyz, r1.xyzx, r0.xyzx
log r0.xyz, |r0.xyzx|
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[93], bundle is:[166] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSReinhard_SRGB.pdb
// Shader Semantic Hash      : 0xb994bd4a7c54ca4a
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 192 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 7;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xAC, dwords=0x2B)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v4, s0, v0                          // 000000000034: 0E080000
  v_mul_legacy_f32  v5, s0, v1                          // 000000000038: 0E0A0200
  v_mul_legacy_f32  v6, s0, v2                          // 00000000003C: 0E0C0400
  v_mad_f32     v0, v0, s0, 1.0                         // 000000000040: D2820000 03C80100
  v_mad_f32     v1, v1, s0, 1.0                         // 000000000048: D2820001 03C80101
  v_mad_f32     v2, v2, s0, 1.0                         // 000000000050: D2820002 03C80102
  v_rcp_f32     v0, v0                                  // 000000000058: 7E005500
  v_mul_f32     v0, v4, v0                              // 00000000005C: 10000104
  v_rcp_f32     v1, v1                                  // 000000000060: 7E025501
  v_mul_f32     v1, v5, v1                              // 000000000064: 10020305
  v_rcp_f32     v2, v2                                  // 000000000068: 7E045502
  v_mul_f32     v2, v6, v2                              // 00000000006C: 10040506
  v_log_f32     v0, abs(v0)                             // 000000000070: D34E0100 00000100
  v_log_f32     v1, abs(v1)                             // 000000000078: D34E0101 00000101
  v_log_f32     v2, abs(v2)                             // 000000000080: D34E0102 00000102
  s_mov_b32     s0, 0x3ee8ba2f                          // 000000000088: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000090: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000094: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 000000000098: 0E040400
  v_exp_f32     v0, v0                                  // 00000000009C: 7E004B00
  v_exp_f32     v1, v1                                  // 0000000000A0: 7E024B01
  v_exp_f32     v2, v2                                  // 0000000000A4: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 0000000000A8: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 0000000000AC: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 0000000000B0: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000B4: F8001C0F 00000100
  s_endpgm                                              // 0000000000BC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   7
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   87
//  CycleSimNWaves:             87
//  Code Size:                  192
//Assembler Counts:
//  num_32bit_ops                     : 31
//  num_64bit_ops                     : 8
//  num_alu                           : 27
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 6
//  num_inst_vop2                     : 11
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 7
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 192
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 87
// m_uCycleSimNWaves                 : 87

// Assembler Counts:
// num_32bit_ops                     : 31
// num_64bit_ops                     : 8
// num_alu                           : 27
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 6
// num_inst_vop2                     : 11
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSReinhard_SRGB[] =
{
     68,  88,  66,  67,  13, 202, 
     17, 183, 103,  54, 191,  63, 
    112,  33, 249, 148, 117, 200, 
     66, 223,   1,   0,   0,   0, 
     84,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 220,   4,   0,   0, 
    236,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88,  20,   4, 
      0,   0,  80,   0,   0,   0, 
      5,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     93,   0,   0,   0,  80,   0, 
      0,   0,  88,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   2,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     50,   0,   0,  13, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,   6, 128,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128,  63,   0,   0, 128,  63, 
      0,   0,   0,   0,  54,   0, 
      0,   5, 130,  32,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     14,   0,   0,   7, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  47,   0, 
      0,   6, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16, 128, 129,   0,   0,   0, 
      0,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,  47, 186, 
    232,  62,  47, 186, 232,  62, 
     47, 186, 232,  62,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    168,   0,   0,   0,  23,   0, 
      1,   0,  41,   5,  16,   0, 
    120,   1, 237,  87,  59, 111, 
    211,  80,  24, 253, 238, 181, 
    211,  38,  33, 175, 129,   1, 
     68,  37,  24, 144,  64,  66, 
    133, 161,  76,  12,   8, 210, 
     74, 149,  26, 241,  80,  30, 
     34, 138, 172,  54,  73,  99, 
    169, 145, 210, 196, 138,  59, 
     32,  81, 153, 192, 204, 208, 
      1, 137, 199, 204, 192, 192, 
     31,   0, 137, 164,  48,  69, 
    140, 176,  34, 177,  48,  48, 
     50,  50,  84,  45, 223,  49, 
    247,   6,  19, 232, 102,   9, 
     36, 124, 164, 115, 143, 143, 
    175, 253, 249, 216, 215, 195, 
    119,  99,  57, 242, 145, 168, 
     61,  58,   3,  29, 124, 124, 
    241, 169,  46, 136,  98, 124, 
    204, 226,  43, 240,  56, 141, 
    145, 232, 121,   6,  35, 209, 
     89,  12, 184,  64,  18, 205, 
    178,  28, 101, 238,  50, 175, 
     48,  49, 167, 185, 176, 224, 
    230, 159,  62, 185, 147, 231, 
     67, 194, 163, 146, 204,  91, 
    138,  39, 153, 113, 230,   9, 
     38, 206, 163,  28, 160,  21, 
     48,  48,  48, 116,  14, 141, 
     25, 230,  17, 166, 134, 201, 
    228,  40,  62, 160, 193,  26, 
    100,  99, 248,  51, 240, 210, 
    200, 127,  24, 144,  77, 215, 
    130,  34,  39, 128, 247, 253, 
    219, 248, 145, 235, 231,   8, 
    234, 117,   2, 176,  30,  65, 
     96, 233, 112,  13,  80,  85, 
    235, 168, 191, 111,  71, 249, 
    224,  90,  30, 134,   3, 134, 
    250, 109,  38, 208,  30, 245, 
    103,   4,  87, 197, 194, 254, 
    167, 192, 191,   8, 224,  91, 
    224,  95, 196, 183, 201,  50, 
     53, 244, 252,  57,  12,  52, 
     24, 129,  59, 199, 232,  27, 
    156, 246,  98, 202,  27, 240, 
     40,  24, 244,  88,  60, 131, 
     86, 229, 172,  92, 205, 206, 
    169, 121, 131,  44, 246,  86, 
    192, 215, 216, 215,   2, 190, 
    206, 190,  30, 240,  77, 246, 
    205, 137,  87, 245, 179, 254, 
    243, 164, 129, 181, 230, 147, 
    222, 191, 204,  40,  99,  56, 
    140,  50, 134, 195,  40,  99, 
     56, 140,  50, 134, 195,  40, 
     99,  56, 140,  50, 134, 195, 
     40,  99, 104,  36, 207, 220, 
     25, 122, 201, 253, 161,  52, 
    246, 134, 220, 191, 189, 225, 
    198, 123,  44,  40,  49,  38, 
    145,  26,  11, 145,  30, 223, 
    165,   7,  35, 202,  14, 190, 
     74, 236, 204, 210, 244, 214, 
    129, 167, 120, 134, 100,  50, 
     67, 102, 138, 187, 254, 251, 
    239,  73, 140,  13, 193,  42, 
     88,  37, 171, 100, 165,  10, 
    151,  22, 148,  19,  21, 233, 
    197,  12, 153, 147,  21, 211, 
    155, 137, 153,  57,  18, 215, 
     63, 160,  79,  20, 172, 130, 
     85, 178,  74, 214,   3,  99, 
     48, 188, 240, 234, 203, 101, 
    142, 196, 181,  37, 215,  54, 
     51,  84,  32,  79,  20, 164, 
     39,  11, 166, 151,  51, 247, 
    135, 220, 107, 254, 218, 171, 
    210, 189, 209, 113,  40, 154, 
    228, 105, 196, 253,  11,  38, 
    240,  29,   7,  10, 110,  43, 
    252, 219, 248,  92,  10, 170, 
    240,  89, 237,  99, 118, 149, 
    158, 102,  38, 152, 130,  31, 
     14, 160, 142, 233, 239,  30, 
    137,  86, 222, 149, 183,  87, 
     94,  63, 124, 137,  99,  96, 
     78,  53, 233, 123, 234, 222, 
     83, 204,  96, 109, 162, 103, 
     24, 126, 195, 146, 186, 239, 
    162,  82, 244, 251, 232, 241, 
     51, 122, 215, 170, 234, 181, 
    212, 188, 165,  20, 239, 130, 
     61, 236, 116, 142, 109,  53, 
    223,  96,  34, 233, 226,  37, 
    171, 104,  59,  61, 215, 170, 
     54, 123, 183, 231, 175, 150, 
    151, 231,  75, 141,  77, 167, 
     99, 187,  86, 161, 189, 229, 
     90,  75, 237, 190, 189, 190, 
     85,  45,  23,  44, 183, 191, 
    110, 149,  54,  26,  45, 187, 
    239,  90, 139, 189,  77, 167, 
    221, 177,  91, 254,  77,  55, 
    186, 118, 185, 215, 181, 175, 
     53, 156, 181, 155, 165, 162, 
    221, 238, 110,  52, 250, 173, 
    181,  82, 113,  57, 127, 222, 
    105,  53, 233,  59, 240,  67, 
    239, 185,  88,  72,  83,  72, 
      8,   0,   0,   0,  74, 202, 
     84, 124,  74, 189, 148, 185, 
     88,  80,  68,  80,  96,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  84, 
    111, 110, 101,  77,  97, 112, 
     95,  80,  83,  82, 101, 105, 
    110, 104,  97, 114, 100,  95, 
     83,  82,  71,  66,  46, 112, 
    100,  98
};
