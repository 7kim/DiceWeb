#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[32]
// Embedded Data:
//  0x00000020 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000001b - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
dcl_temps 1
eq r0.x, v1.w, l(0.000000)
discard_nz r0.x
mov o0.xyzw, v1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[32], bundle is:[132] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLUnlit_mainTk.pdb
// Shader Semantic Hash      : 0xbe231a2f87fdf261
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 72 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 0;
extUserElementCount  = 0;
NumVgprs             = 5;
NumSgprs             = 5;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x34, dwords=0xD)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, off, off, off done vm         // 000000000008: F8001801 00000003
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v4, off, off done vm          // 000000000008: F8001803 00000403
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v2, off, off done vm          // 000000000008: F8001803 00000203
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v3, v4                       // 000000000000: 5E020903
  v_cvt_pkrtz_f16_f32  v0, v0, v2                       // 000000000004: 5E000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v3, v4                      // 000000000000: 5C020903
  v_cvt_pknorm_u16_f32  v0, v0, v2                      // 000000000004: 5C000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v3, v4                      // 000000000000: 5A020903
  v_cvt_pknorm_i16_f32  v0, v0, v2                      // 000000000004: 5A000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v3, v4                          // 000000000000: 60020903
  v_cvt_pk_u16_u32  v0, v0, v2                          // 000000000004: 60000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v3, v4                          // 000000000000: 62020903
  v_cvt_pk_i16_i32  v0, v0, v2                          // 000000000004: 62000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v3, v4, v0, v2 done vm            // 000000000008: F800180F 02000403
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[0:1], exec                            // 000000000000: BE80047E
  s_mov_b32     m0, s2                                  // 000000000004: BEFC0302
  v_interp_p1_f32  v2, v0, attr0.w                      // 000000000008: C8080300
  v_interp_p2_f32  v2, v1, attr0.w                      // 00000000000C: C8090301
  v_cmp_eq_f32  vcc, 0, v2                              // 000000000010: 7C040480
  s_andn2_b64   s[0:1], s[0:1], vcc // wrscc            // 000000000014: 8A806A00
  v_interp_p1_f32  v3, v0, attr0.x                      // 000000000018: C80C0000
  v_interp_p2_f32  v3, v1, attr0.x                      // 00000000001C: C80D0001
  v_interp_p1_f32  v4, v0, attr0.y                      // 000000000020: C8100100
  v_interp_p2_f32  v4, v1, attr0.y                      // 000000000024: C8110101
  v_interp_p1_f32  v0, v0, attr0.z                      // 000000000028: C8000200
  v_interp_p2_f32  v0, v1, attr0.z                      // 00000000002C: C8010201
  s_mov_b64     exec, s[0:1]                            // 000000000030: BEFE0400
  v_cvt_pkrtz_f16_f32  v1, v3, v4                       // 000000000034: 5E020903
  v_cvt_pkrtz_f16_f32  v0, v0, v2                       // 000000000038: 5E000500
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000003C: F8001C0F 00000001
  s_endpgm                                              // 000000000044: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   5
//  NumSRegs:                   5
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   83
//  CycleSimNWaves:             83
//  Code Size:                  72
//Assembler Counts:
//  num_32bit_ops                     : 16
//  num_64bit_ops                     : 1
//  num_alu                           : 11
//  num_fc                            : 5
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 1
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 3
//  num_inst_sop2                     : 1
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 2
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 8
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 5
// m_uNumSRegs                       : 5
// m_uSCCodeSize                     : 72
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 83
// m_uCycleSimNWaves                 : 83

// Assembler Counts:
// num_32bit_ops                     : 16
// num_64bit_ops                     : 1
// num_alu                           : 11
// num_fc                            : 5
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 1
// num_inst_sopc                     : 0
// num_inst_sop1                     : 3
// num_inst_sop2                     : 1
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 2
// num_inst_vop3                     : 0
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 8
// num_inst_smem                     : 0
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 0
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLUnlit_mainTk[] =
{
     68,  88,  66,  67, 142,   8, 
     70, 112, 169, 130, 148,  83, 
    236, 184,  86, 133, 199,  98, 
      5,  86,   1,   0,   0,   0, 
    101,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0, 244,   3,   0,   0, 
      4,   4,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   0, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 152,   2,   0,   0, 
     80,   0,   0,   0, 166,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  32,   0, 
      0,   0,  80,   0,   0,   0, 
     27,   0,   0,   0, 106,   8, 
      0,   1,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      1,   0,   0,   0,  24,   0, 
      0,   7,  18,   0,  16,   0, 
      0,   0,   0,   0,  58,  16, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,   0,   0, 
      0,   0,  13,   0,   4,   3, 
     10,   0,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    242,  32,  16,   0,   0,   0, 
      0,   0,  70,  30,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    134,   0,   0,   0,  23,   0, 
      1,   0,  41,  42,  15,   0, 
    120,   1, 237, 151,  79, 107, 
     19,  65,  24, 198, 223, 217, 
     93,  75, 131, 109, 147, 222, 
    138, 120,  16, 122,  41,  66, 
     45,  94,  61, 181, 180, 208, 
     66,  11, 138, 137,  16, 194, 
     16, 147,  52, 139, 174, 230, 
    207, 146, 205, 161,   7,  41, 
    241, 164, 244, 212, 163, 122, 
    246, 224, 209,  79, 144, 122, 
    220, 143, 225, 103, 240, 148, 
    131,  90, 159, 103,  51, 131, 
    107, 218, 234, 101,  17, 193, 
    125, 224,  55, 239,  62,  59, 
    255, 222, 205,  76,  96, 230, 
    118,  81,  18,  61, 145, 213, 
     58,  99, 245, 227, 198, 121, 
      7, 241,  26,  80,  38,  82, 
    111,  22,  89, 138, 124,  54, 
    113, 141,   5,  27,  56, 211, 
     54, 100,  15, 108,   2, 214, 
     89, 208,  99, 243, 221, 219, 
    187,  91, 115, 120, 114,   1, 
     99, 217,  80,   2,  28, 226, 
     58,  96, 127,  62, 207, 202, 
    190,  99, 223, 217, 122,  76, 
    157, 136, 239, 231, 129, 213, 
    108,  59, 105, 179, 184,  92, 
    203, 128, 115,  95,  37, 230, 
    102, 197, 113, 109, 219, 223, 
    245, 249,  91, 186, 240, 157, 
    144,  93,  39, 138, 235, 145, 
    214,  18, 139,  63, 136, 223, 
     69,  62, 129, 171, 116,  14, 
     49,  94,  38, 230,  52, 167, 
    176, 169, 210,  11, 242, 159, 
    201,  99,   1, 241, 183, 224, 
     30, 125,   0, 204, 223,  44, 
    145, 173, 159,  46, 213, 232, 
    140, 156, 174, 200, 132, 206, 
    122,   5, 207,  61, 111, 189, 
     75, 159, 116,  76, 121,  12, 
    238,  22, 156,  58,  22, 172, 
     94, 188,  41,  19, 206,   7, 
    175, 225, 117, 202, 215, 224, 
    107,  41, 223, 128, 111, 164, 
    124,  11, 190, 101, 189,  29, 
    191,  56, 157, 207,  49, 107, 
    125, 252,  47, 147, 231, 152, 
     13, 121, 142, 217, 144, 231, 
    152,  13, 121, 142, 217, 144, 
    231, 152,  13, 121, 142, 217, 
    144, 231, 152,  25, 114, 236, 
    141, 198, 142, 251, 117,  44, 
    238, 124, 172, 220,  66,  60, 
    242, 188,  23, 242, 108, 116, 
     34, 178,  16,  43,  89, 140, 
     69, 149,  98, 165, 150,  99, 
     28,  68,  99, 229, 168,  88, 
    188, 239,  99, 156, 249, 126, 
     57,  51, 138, 188,  60,  43, 
    153, 203, 193, 196, 220,  31, 
     86,  64,   1, 120, 201, 141, 
     77, 164, 249, 229, 219, 171, 
    141,  27, 171,  99,  62,  83, 
    123, 166, 253, 154, 137, 183, 
    192,   2, 248, 169, 247,  44, 
     46,  40,  52, 237,  27,  38, 
    242,  14, 200,  99, 237,  18, 
     18,  74, 100, 222, 159, 154, 
    248, 218,  68,  94,  39, 120, 
     23, 155, 205, 227, 131, 169, 
    175,   1, 102, 186, 125,  79, 
     63, 244, 195, 126, 164, 171, 
    173, 254, 209, 250,  86, 101, 
    119, 189, 220, 236, 134,  29, 
     63, 210, 251, 193,  48, 210, 
     59, 193, 192,  63,  28,  86, 
     43, 251,  58,  26,  28, 234, 
    242, 211, 102, 219,  31,  68, 
    122, 187, 223,  13, 131, 142, 
    223,  78,  58, 221, 239, 249, 
     59, 187, 229, 131,  71, 189, 
     78,  48, 124, 220, 109,   6, 
    189, 202, 243,  59,  97, 187, 
     37,  63,   0, 169,  25, 209, 
    159,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     97, 242, 253, 135,  47,  26, 
     35, 190,  88,  80,  68,  80, 
     89,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68,  71,  83,  76,  85, 
    110, 108, 105, 116,  95, 109, 
     97, 105, 110,  84, 107,  46, 
    112, 100,  98
};
