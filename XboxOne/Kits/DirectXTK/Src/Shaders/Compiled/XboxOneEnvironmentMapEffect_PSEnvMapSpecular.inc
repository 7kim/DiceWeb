#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[134]
// Embedded Data:
//  0x00000086 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000081 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyzw, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mul r0.w, r0.w, r1.w
mad r0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mad r0.xyz, cb0[0].xyzx, r0.wwww, r0.xyzx
mad r1.xyz, cb0[11].xyzx, r1.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[134], bundle is:[212] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMapSpecular.pdb
// Shader Semantic Hash      : 0x9245f13ca1767e58
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 356 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 14;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x150, dwords=0x54)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[9:12], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000080: F0800F00 00C30902
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000088: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000008C: BF8C007F
  s_buffer_load_dwordx4  s[4:7], s[0:3], 0x00           // 000000000090: C2820100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000094: C8080000
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000098: C80C0100
  v_interp_p1_f32  v4, v0, attr0.z                      // 00000000009C: C8100200
  v_interp_p1_f32  v13, v0, attr0.w                     // 0000000000A0: C8340300
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x2c           // 0000000000A4: C280012C
  v_interp_p2_f32  v2, v1, attr0.x                      // 0000000000A8: C8090001
  v_interp_p2_f32  v3, v1, attr0.y                      // 0000000000AC: C80D0101
  v_interp_p2_f32  v4, v1, attr0.z                      // 0000000000B0: C8110201
  v_interp_p2_f32  v13, v1, attr0.w                     // 0000000000B4: C8350301
  s_waitcnt     vmcnt(1)                                // 0000000000B8: BF8C0F71
  v_mul_legacy_f32  v2, v5, v2                          // 0000000000BC: 0E040505
  v_mul_legacy_f32  v3, v6, v3                          // 0000000000C0: 0E060706
  v_mul_legacy_f32  v4, v7, v4                          // 0000000000C4: 0E080907
  v_mul_legacy_f32  v5, v8, v13                         // 0000000000C8: 0E0A1B08
  v_interp_p1_f32  v6, v0, attr1.x                      // 0000000000CC: C8180400
  v_interp_p1_f32  v7, v0, attr1.y                      // 0000000000D0: C81C0500
  v_interp_p1_f32  v8, v0, attr1.z                      // 0000000000D4: C8200600
  s_waitcnt     vmcnt(0)                                // 0000000000D8: BF8C0F70
  v_mad_legacy_f32  v9, v9, v5, -v2                     // 0000000000DC: D2800009 840A0B09
  v_mad_legacy_f32  v10, v10, v5, -v3                   // 0000000000E4: D280000A 840E0B0A
  v_mad_legacy_f32  v11, v11, v5, -v4                   // 0000000000EC: D280000B 84120B0B
  v_interp_p2_f32  v6, v1, attr1.x                      // 0000000000F4: C8190401
  v_interp_p2_f32  v7, v1, attr1.y                      // 0000000000F8: C81D0501
  v_interp_p2_f32  v8, v1, attr1.z                      // 0000000000FC: C8210601
  v_mul_legacy_f32  v12, v12, v5                        // 000000000100: 0E180B0C
  v_mac_f32     v2, v6, v9                              // 000000000104: 3E041306
  v_mac_f32     v3, v7, v10                             // 000000000108: 3E061507
  v_mac_f32     v4, v8, v11                             // 00000000010C: 3E081708
  s_waitcnt     lgkmcnt(0)                              // 000000000110: BF8C007F
  v_mac_f32     v2, s4, v12                             // 000000000114: 3E041804
  v_mac_f32     v3, s5, v12                             // 000000000118: 3E061805
  v_mac_f32     v4, s6, v12                             // 00000000011C: 3E081806
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000120: C8000700
  v_mad_legacy_f32  v6, s0, v5, -v2                     // 000000000124: D2800006 840A0A00
  v_mad_legacy_f32  v7, s1, v5, -v3                     // 00000000012C: D2800007 840E0A01
  v_mad_legacy_f32  v8, s2, v5, -v4                     // 000000000134: D2800008 84120A02
  v_interp_p2_f32  v0, v1, attr1.w                      // 00000000013C: C8010701
  v_mac_f32     v2, v0, v6                              // 000000000140: 3E040D00
  v_mac_f32     v3, v0, v7                              // 000000000144: 3E060F00
  v_mac_f32     v4, v0, v8                              // 000000000148: 3E081100
  s_mov_b64     exec, s[28:29]                          // 00000000014C: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000150: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000154: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000158: F8001C0F 00000100
  s_endpgm                                              // 000000000160: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   14
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   89
//  CycleSimNWaves:             89
//  Code Size:                  356
//Assembler Counts:
//  num_32bit_ops                     : 59
//  num_64bit_ops                     : 14
//  num_alu                           : 55
//  num_fc                            : 15
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 18
//  num_inst_vop3                     : 13
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 26
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 14
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 356
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 89
// m_uCycleSimNWaves                 : 89

// Assembler Counts:
// num_32bit_ops                     : 59
// num_64bit_ops                     : 14
// num_alu                           : 55
// num_fc                            : 15
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 18
// num_inst_vop3                     : 13
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 26
// num_inst_smem                     : 5
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMapSpecular[] =
{
     68,  88,  66,  67, 140, 150, 
     10, 158, 142, 129, 211, 141, 
     68,  95,  13, 135,   5,  34, 
    252,  57,   1,   0,   0,   0, 
    230,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0,  96,   6,   0,   0, 
    112,   6,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 112,   5,   0,   0, 
     80,   0,   0,   0,  92,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 134,   0, 
      0,   0,  80,   0,   0,   0, 
    129,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 130,   1,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 130,   0,  16,   0, 
      0,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  10, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,  11,   0,   0,   0, 
    246,  15,  16,   0,   1,   0, 
      0,   0,  70,   2,  16, 128, 
     65,   0,   0,   0,   0,   0, 
      0,   0,  50,   0,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0, 246,  31,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    214,   0,   0,   0,  23,   0, 
      1,   0,  41, 223,  16,   0, 
    120,   1, 237,  87, 207, 107, 
     19,  65,  20, 126, 179, 153, 
    221, 236, 143, 116, 147,  86, 
    197,  84,  83,  84, 244, 208, 
    131,  21, 161, 138, 160, 178, 
    106, 107,  81,  41, 162, 216, 
     28, 106,  89, 106, 127, 100, 
    139, 133, 182, 137,  73,  45, 
    130,  80,  83, 137,  32,  82, 
     68, 188, 232,  65, 145, 130, 
    127, 128, 127,  65,  91, 235, 
    101, 240,  88, 255,   0, 193, 
    147, 199, 246, 230, 161, 168, 
    239,  77, 102, 218,  88, 237, 
     45, 160,  72,  62, 248, 230, 
    237,  55, 179,  51, 251, 205, 
    188,  61, 204, 251, 156,   2, 
    137, 245,  55, 147, 247,  41, 
    126, 121, 157, 125, 193,  13, 
      0,  19, 159,  25, 146,  34, 
    225, 101,  19, 181,   0, 211, 
     73, 106,   1, 218, 169, 161, 
     23, 240,  93,  31, 195,  65, 
    100,  14, 245, 121, 140,  52, 
    166, 217, 217,  57, 215,  53, 
     54, 246, 168,  11,  31,  97, 
     31, 146,  62, 119,  83, 241, 
     12, 146, 230, 158,  66, 210, 
    178, 180,  28,   1, 151, 220, 
    132,  69,  13, 130,  83, 179, 
     13,  45,  72, 101,  75, 174, 
    173, 189, 198, 144, 122,  45, 
    137, 136, 154,  63, 227,  10, 
    146,  60, 236,   4, 242, 166, 
    253, 208, 154, 106, 251, 114, 
    191, 127,  27, 213,  61,  86, 
    221, 233,  61, 235,  60,  17, 
     40,  31, 181, 160, 125, 234, 
    174,  13, 181, 105, 125, 102, 
     41, 181,  49, 234, 166, 189, 
     45,  35, 119, 194,  15,  68, 
    134,  30, 106, 160,  53, 229, 
    201,  82, 167, 100, 177,   3, 
      0,  54,  70, 227, 176,  76, 
    188,  21, 195, 211,  76, 211, 
    200, 255,  13, 253, 175,  82, 
    164, 236, 208,  63, 175, 142, 
     87,  66, 143, 103, 169, 129, 
    242,  18, 241,  89,  26, 190, 
    145, 210, 154, 161, 174, 102, 
    182, 170,  99, 164,  41, 201, 
    181,  26, 147, 103, 196,  97, 
    144, 123, 198,  96,  50, 131, 
    243,  49, 185, 168,  67, 212, 
     97, 141,  30,  64,  61,  80, 
    163, 135,  80,  15, 213, 232, 
     17, 212,  35,  90, 235, 245, 
    147, 242, 123, 220, 164,  92, 
     99, 231, 236, 191, 204, 134, 
    199, 250, 176, 225, 177,  62, 
    108, 120, 172,  15,  27,  30, 
    235, 195, 134, 199, 250, 176, 
    225, 177,  62, 108, 120, 172, 
     15, 233, 126,  56, 203,  95, 
     45, 206, 186, 223,  23, 141, 
    216, 198,  34,  48, 227, 125, 
    138, 125,  92, 134, 132,  45, 
    160,  41,  33, 192,  79,   9, 
    150, 112,   4, 107, 106,  18, 
    204, 111,  22,  38,  60,  93, 
     53, 226,  45,  28, 236, 180, 
      0,  39,  35, 108, 152, 151, 
    218, 129,  39,  50, 154,  44, 
    251, 201, 196,  59,  32, 179, 
     91,   5, 115, 218,   4, 135, 
    199, 178, 223, 246,  44, 172, 
    223, 150, 207,  57,  30, 151, 
    241,   1, 204,  47,  65, 178, 
    188, 102, 153,  11, 120, 177, 
     45, 175,  25, 206,   7,  72, 
    179, 242, 178, 236, 103,  15, 
     87, 240, 210,  47, 128, 225, 
    247, 141, 148, 128, 216,   9, 
    113, 148, 149,  87,  24, 160, 
     15, 134,  62, 140, 102, 193, 
     98,  39, 197, 157, 228, 252, 
    146, 105, 114, 223, 138,  91, 
    126, 220, 177, 125, 123, 191, 
    235,   3,  71,  95, 102,  70, 
    128, 117,  80,  20, 112, 220, 
    129, 242, 170, 227, 185,  21, 
     23, 163, 235, 249,  21,  15, 
    163, 231, 181,  84,  24,  71, 
    127, 102, 155,  96, 214,  33, 
    145, 240, 210, 190, 181, 139, 
      7, 241,  61,  86,  96, 239, 
    181,   3, 242, 192, 211,  60, 
     48, 211,  86,  96, 165, 237, 
      0, 226,  32,  44, 156,   7, 
    174,  91, 137,  99, 100, 174, 
     95, 177,  49,  26,  46, 174, 
     19, 103, 120,  78,  60, 128, 
    164,  21,  64, 179,  29, 100, 
     56, 158, 227, 182, 251,  52, 
    192, 220,  82,  43, 197, 234, 
    101, 252,  87, 216, 242, 133, 
     45, 144, 196,  62,  44, 121, 
     54,  33, 223, 224,  76, 214, 
      0,  26, 140,  58, 177, 111, 
     55,   6,  13, 185,  60, 246, 
    213, 150,  71, 239,  84, 209, 
     48, 175, 226,  17, 164, 131, 
    100, 178, 218, 171, 150,  82, 
     92,  85, 200, 253, 179,  51, 
     11, 103, 215, 123, 158, 211, 
     51, 225, 171, 154,  35,  84, 
    164, 154,  46, 129, 220, 194, 
     91, 106, 126,  67,  74,  27, 
     85, 145,   2, 213,  43, 190, 
    174,  20,  85, 221, 120,  92, 
    141, 183, 171,  72, 123, 246, 
    144, 219, 125,  92,  86, 227, 
    121,  36,  57, 237,  62,  29, 
    222, 136,  10, 249,  82, 216, 
     63, 146, 191, 215, 113,  33, 
    123, 169, 163, 111, 120, 178, 
     48,  17, 149, 194, 222, 241, 
    233,  82, 120, 113, 188,  24, 
    141,  78, 247, 103, 123, 195, 
     82, 113,  52, 236, 187,  61, 
    156, 139, 138, 165, 176,  59, 
     63,  89,  24, 159, 136, 114, 
    114, 210, 181, 169, 168, 103, 
    106, 102, 188, 152, 159, 154, 
    140, 166, 166, 175,  14,  23, 
    122, 198, 198, 112, 206, 173, 
    235, 125, 216, 141, 178, 175, 
     16, 141, 222, 157,  24,  46, 
     30,  43, 228,  70, 224,  39, 
    173, 108,  30, 187,   0,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  88, 126, 118, 161, 
     60, 241,  69, 146,  88,  80, 
     68,  80, 110,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  69, 110, 118, 
    105, 114, 111, 110, 109, 101, 
    110, 116,  77,  97, 112,  69, 
    102, 102, 101,  99, 116,  95, 
     80,  83,  69, 110, 118,  77, 
     97, 112,  83, 112, 101,  99, 
    117, 108,  97, 114,  46, 112, 
    100,  98
};
