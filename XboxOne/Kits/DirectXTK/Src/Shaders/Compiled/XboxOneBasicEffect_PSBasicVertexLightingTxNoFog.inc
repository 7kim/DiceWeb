#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[62]
// Embedded Data:
//  0x0000003e - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000039 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v0.xyzw
mad o0.xyz, v1.xyzx, r0.wwww, r0.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[62], bundle is:[169] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneBasicEffect_PSBasicVertexLightingTxNoFog.pdb
// Shader Semantic Hash      : 0xf7732a536fbb27d2
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 160 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 12;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x8C, dwords=0x23)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr2.x                      // 000000000014: C8080800
  v_interp_p1_f32  v3, v0, attr2.y                      // 000000000018: C80C0900
  v_interp_p2_f32  v2, v1, attr2.x                      // 00000000001C: C8090801
  v_interp_p2_f32  v3, v1, attr2.y                      // 000000000020: C80D0901
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000030: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000038: C8200200
  v_interp_p1_f32  v9, v0, attr0.w                      // 00000000003C: C8240300
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000040: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000044: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000048: C8210201
  v_interp_p2_f32  v9, v1, attr0.w                      // 00000000004C: C8250301
  v_interp_p1_f32  v10, v0, attr1.x                     // 000000000050: C8280400
  v_interp_p1_f32  v11, v0, attr1.y                     // 000000000054: C82C0500
  v_interp_p1_f32  v0, v0, attr1.z                      // 000000000058: C8000600
  s_waitcnt     vmcnt(0)                                // 00000000005C: BF8C0F70
  v_mul_legacy_f32  v2, v2, v6                          // 000000000060: 0E040D02
  v_mul_legacy_f32  v3, v3, v7                          // 000000000064: 0E060F03
  v_mul_legacy_f32  v4, v4, v8                          // 000000000068: 0E081104
  v_mul_legacy_f32  v5, v5, v9                          // 00000000006C: 0E0A1305
  v_interp_p2_f32  v10, v1, attr1.x                     // 000000000070: C8290401
  v_interp_p2_f32  v11, v1, attr1.y                     // 000000000074: C82D0501
  v_interp_p2_f32  v0, v1, attr1.z                      // 000000000078: C8010601
  v_mac_f32     v2, v10, v5                             // 00000000007C: 3E040B0A
  v_mac_f32     v3, v11, v5                             // 000000000080: 3E060B0B
  v_mac_f32     v4, v0, v5                              // 000000000084: 3E080B00
  s_mov_b64     exec, s[16:17]                          // 000000000088: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 00000000008C: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000090: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000094: F8001C0F 00000100
  s_endpgm                                              // 00000000009C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   12
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  160
//Assembler Counts:
//  num_32bit_ops                     : 36
//  num_64bit_ops                     : 2
//  num_alu                           : 27
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 9
//  num_inst_vop3                     : 3
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 18
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 12
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 160
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 36
// num_64bit_ops                     : 2
// num_alu                           : 27
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 9
// num_inst_vop3                     : 3
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 18
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE BasicEffect_PSBasicVertexLightingTxNoFog[] =
{
     68,  88,  66,  67,  68,  82, 
    143, 127,  27,  95, 236, 228, 
    114, 124, 100, 105,  84, 216, 
    117, 106,   1,   0,   0,   0, 
      5,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 124,   4,   0,   0, 
    140,   4,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  80,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 164,   3,   0,   0, 
     80,   0,   0,   0, 233,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  62,   0, 
      0,   0,  80,   0,   0,   0, 
     57,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   0,   0,   0,   0, 
     98,  16,   0,   3, 114,  16, 
     16,   0,   1,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   2,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   2,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    171,   0,   0,   0,  23,   0, 
      1,   0,  41, 214,  15,   0, 
    120,   1, 237,  87, 191,  79, 
     20,  65,  20, 126, 179,  59, 
    119, 238, 177, 112, 135,  63, 
    162,  16,  49, 193, 136, 138, 
     70, 108, 104, 136,  49,  68, 
      1, 181, 128,  40, 241, 136, 
     33, 100, 131, 220, 193,   2, 
    151,   0, 119, 185, 189, 130, 
     10, 177, 177, 162, 160,  20, 
     19,  19,  11,  90, 255,   2, 
    205,  29, 177, 154, 218, 194, 
    202, 210, 218,  88, 152,  72, 
     97, 208, 247, 237, 205, 224, 
    130, 210, 109, 162, 137, 251, 
     37, 223, 123, 251, 237, 204, 
    188, 125,  59, 111,  55, 121, 
    243,  33,  71,  33,   6, 118, 
     79, 127, 134,  31, 121, 249, 
    122, 235,  19, 251,  20,  83, 
    104,  15,  60, 111, 131,  37, 
    170, 101,  97, 137, 122,  97, 
     48, 193,  34, 106, 101, 119, 
    138, 249, 138, 121, 139, 137, 
     49, 195, 254, 126, 123, 232, 
    197, 150,  59, 196, 151, 132, 
     16, 224, 184, 102,  15, 147, 
    151, 211,  89, 102, 134, 137, 
    112, 128, 241, 128,  13, 195, 
    144,  48, 135, 128,  53, 102, 
    252,   4,  19, 177,   0, 248, 
    104,  12, 242,  97, 254, 140, 
     75,  76, 228, 127,  20, 144, 
    155, 137,   5, 143, 103,   2, 
    120, 223, 191, 141, 102,  94, 
     81, 251, 171,  78,   0, 234, 
     17,   5,  74, 103, 230,  13, 
    232,  58, 154,  61,  27, 211, 
    218, 212, 114, 135, 121,  20, 
    126,  48,  14, 239, 153, 209, 
    168,  71, 154, 154,  31,  85, 
     90, 156,  33, 114, 216,  91, 
     23, 136, 218, 113, 231, 255, 
    128, 249,  86, 177,  23, 216, 
     95, 188, 186, 254, 205,  66, 
    152, 113, 222,  21, 198, 122, 
      3, 220, 236, 160,  93,  40, 
    163,   5, 235, 102, 109, 154, 
    218, 134,  70, 192, 168, 230, 
    159, 211,  58,  70, 211, 210, 
    181, 166, 115,  93, 188, 158, 
    139, 203, 218,  99, 237,  69, 
    244,  20, 235, 169, 136, 158, 
     97,  61,  19, 209,  69, 214, 
     69, 163,  77, 252,  92, 248, 
     60, 153,  66, 173, 249, 230, 
    218, 191, 204,  36, 199, 120, 
    152, 228,  24,  15, 147,  28, 
    227,  97, 146,  99,  60,  76, 
    114, 140, 135,  73, 142, 241, 
     48, 201,  49,  54, 210, 154, 
    220, 172, 175, 181, 236, 213, 
     73, 188, 219, 113, 196, 179, 
     29, 203, 254,  94,  39, 199, 
     81, 148, 105,  85, 194, 201, 
     40, 145, 105,  83,  79, 104, 
    163,  65, 185, 245,  47, 150, 
     85, 224,  21,  29, 138,  68, 
    151,  34, 171,  91, 145, 221, 
    163,   4, 117,  42,  33, 206, 
     41,  97, 157,  87, 194, 190, 
    168,  72, 246,  42,  74,  93, 
     83, 220, 196, 171,  74, 110, 
    163,  97, 181, 201, 172, 157, 
     75, 103, 229, 113,  39, 155, 
     58, 217, 146,  21, 242, 138, 
     18, 169,  62,  37, 210,  66, 
    181, 184, 114, 208, 117, 211, 
    131, 228,  58, 131, 237, 114, 
    175, 206, 189, 228, 129,  94, 
    148, 232, 105, 163,  19, 190, 
    217, 200,  30, 132,  19,  78, 
    216,  71, 168, 164, 192, 113, 
     97,  31, 219, 250,  76, 178, 
    161, 125,   7,  19, 231,  47, 
    201, 201,   1, 239,  47, 191, 
     41, 231, 175,   6, 223, 112, 
     13, 124, 212, 243, 222, 106, 
    223, 205,  60, 120,  78, 217, 
    134, 249,  13,  82,  55, 231, 
     95, 245,  58, 244, 235, 232, 
    209, 179, 230, 244, 171, 239, 
    247, 232, 121,  93, 218,  35, 
     87, 151, 121,  56, 143, 155, 
    122, 188, 202,  68, 166, 195, 
     55, 188, 135, 126, 165,  28, 
    120, 147, 197, 242, 106, 223, 
    237, 137, 123, 125, 249, 194, 
    114, 101, 201,  15, 188, 209, 
     82,  45, 240,  70,  74,  85, 
    127, 182,  54,  57,  49, 234, 
      5, 213,  89,  47, 191,  88, 
    152, 243, 171, 129,  55,  92, 
     94, 174, 148, 150, 252, 185, 
    112, 209, 131,  21, 127, 168, 
     16, 148, 102, 239, 204, 207, 
    243, 212, 199, 227, 249,  80, 
     61, 242, 171,  53, 127, 117, 
    172, 180, 176,  88,  43, 173, 
     44,  76, 172, 222,  47, 223, 
     45,  47,  92, 175, 204,  21, 
    233,  39,   8,  12, 242, 242, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 210,  39, 
    187, 111,  83,  42, 115, 247, 
     88,  80,  68,  80, 113,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  66, 
     97, 115, 105,  99,  69, 102, 
    102, 101,  99, 116,  95,  80, 
     83,  66,  97, 115, 105,  99, 
     86, 101, 114, 116, 101, 120, 
     76, 105, 103, 104, 116, 105, 
    110, 103,  84, 120,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
