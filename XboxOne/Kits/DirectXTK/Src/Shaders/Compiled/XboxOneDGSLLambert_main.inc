#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[161]
// Embedded Data:
//  0x000000a1 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000009c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[21], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 3
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
dp3_sat r0.w, cb1[9].xyzx, r0.xyzx
mul r1.xyz, r0.wwww, cb1[1].xyzx
mul r1.xyz, r1.xyzx, v1.xyzx
mad r1.xyz, cb0[0].xyzx, cb1[0].xyzx, r1.xyzx
dp3_sat r0.w, cb1[10].xyzx, r0.xyzx
mul r2.xyz, r0.wwww, cb1[2].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
dp3_sat r0.w, cb1[11].xyzx, r0.xyzx
dp3_sat r0.x, cb1[12].xyzx, r0.xyzx
mul r0.xyz, r0.xxxx, cb1[4].xyzx
mul r2.xyz, r0.wwww, cb1[3].xyzx
mad r1.xyz, r2.xyzx, v1.xyzx, r1.xyzx
mad_sat o0.xyz, r0.xyzx, v1.xyzx, r1.xyzx
mov o0.w, v1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[161], bundle is:[205] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLLambert_main.pdb
// Shader Semantic Hash      : 0x19ae90e4e9cc0931
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 3, channelMask  7, param1, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 360 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_CONST_BUFFER 0, offset 0x0:3 dwords
;  extUserElements 1[1] = IMM_CONST_BUFFER 1, offset 0x4:7 dwords
NumVgprs             = 16;
NumSgprs             = 42;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000003

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x154, dwords=0x55)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, off, off, off done vm        // 000000000008: F8001801 0000000A
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v11, off, off done vm        // 000000000008: F8001803 00000B0A
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v0, off, off done vm         // 000000000008: F8001803 0000000A
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v10, v11                     // 000000000000: 5E02170A
  v_cvt_pkrtz_f16_f32  v0, v6, v0                       // 000000000004: 5E000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v10, v11                    // 000000000000: 5C02170A
  v_cvt_pknorm_u16_f32  v0, v6, v0                      // 000000000004: 5C000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v10, v11                    // 000000000000: 5A02170A
  v_cvt_pknorm_i16_f32  v0, v6, v0                      // 000000000004: 5A000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v10, v11                        // 000000000000: 6002170A
  v_cvt_pk_u16_u32  v0, v6, v0                          // 000000000004: 60000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v10, v11                        // 000000000000: 6202170A
  v_cvt_pk_i16_i32  v0, v6, v0                          // 000000000004: 62000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v10, v11, v6, v0 done vm          // 000000000008: F800180F 00060B0A
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000000: C0C20100
  s_mov_b32     m0, s2                                  // 000000000004: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000008: C8080600
  v_interp_p1_f32  v3, v0, attr1.y                      // 00000000000C: C80C0500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000010: C8090601
  s_waitcnt     lgkmcnt(0)                              // 000000000014: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[8:11], 0x24          // 000000000018: C2800924
  v_interp_p1_f32  v4, v0, attr1.x                      // 00000000001C: C8100400
  v_interp_p2_f32  v3, v1, attr1.y                      // 000000000020: C80D0501
  v_mul_legacy_f32  v5, v2, v2                          // 000000000024: 0E0A0502
  v_interp_p2_f32  v4, v1, attr1.x                      // 000000000028: C8110401
  v_mac_f32     v5, v3, v3                              // 00000000002C: 3E0A0703
  s_buffer_load_dwordx4  s[12:15], s[8:11], 0x28        // 000000000030: C2860928
  v_mac_f32     v5, v4, v4                              // 000000000034: 3E0A0904
  s_buffer_load_dwordx4  s[16:19], s[8:11], 0x04        // 000000000038: C2880904
  s_buffer_load_dwordx4  s[20:23], s[8:11], 0x2c        // 00000000003C: C28A092C
  v_rsq_f32     v5, v5                                  // 000000000040: 7E0A5D05
  s_buffer_load_dwordx4  s[24:27], s[8:11], 0x00        // 000000000044: C28C0900
  s_buffer_load_dwordx4  s[28:31], s[8:11], 0x30        // 000000000048: C28E0930
  v_mul_legacy_f32  v2, v2, v5                          // 00000000004C: 0E040B02
  s_buffer_load_dwordx4  s[4:7], s[4:7], 0x00           // 000000000050: C2820500
  s_buffer_load_dwordx4  s[32:35], s[8:11], 0x08        // 000000000054: C2900908
  v_mul_legacy_f32  v3, v3, v5                          // 000000000058: 0E060B03
  s_waitcnt     lgkmcnt(0)                              // 00000000005C: BF8C007F
  v_mul_legacy_f32  v6, s2, v2                          // 000000000060: 0E0C0402
  s_buffer_load_dwordx4  s[36:39], s[8:11], 0x0c        // 000000000064: C292090C
  v_mul_legacy_f32  v4, v4, v5                          // 000000000068: 0E080B04
  v_mac_f32     v6, s1, v3                              // 00000000006C: 3E0C0601
  s_buffer_load_dwordx4  s[8:11], s[8:11], 0x10         // 000000000070: C2840910
  v_mad_legacy_f32  v6, s0, v4, v6 clamp                // 000000000074: D2800806 041A0800
  v_interp_p1_f32  v5, v0, attr0.x                      // 00000000007C: C8140000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000080: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000084: C8200200
  v_mul_legacy_f32  v9, s14, v2                         // 000000000088: 0E12040E
  v_mul_legacy_f32  v10, s16, v6                        // 00000000008C: 0E140C10
  v_mul_legacy_f32  v11, s17, v6                        // 000000000090: 0E160C11
  v_mul_legacy_f32  v6, s18, v6                         // 000000000094: 0E0C0C12
  v_interp_p2_f32  v5, v1, attr0.x                      // 000000000098: C8150001
  v_interp_p2_f32  v7, v1, attr0.y                      // 00000000009C: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 0000000000A0: C8210201
  v_mac_f32     v9, s13, v3                             // 0000000000A4: 3E12060D
  v_mul_legacy_f32  v12, s22, v2                        // 0000000000A8: 0E180416
  v_mul_legacy_f32  v10, v10, v5                        // 0000000000AC: 0E140B0A
  v_mul_legacy_f32  v11, v11, v7                        // 0000000000B0: 0E160F0B
  v_mul_legacy_f32  v6, v6, v8                          // 0000000000B4: 0E0C1106
  v_mov_b32     v13, s24                                // 0000000000B8: 7E1A0218
  v_mov_b32     v14, s25                                // 0000000000BC: 7E1C0219
  v_mov_b32     v15, s26                                // 0000000000C0: 7E1E021A
  v_mad_legacy_f32  v9, s12, v4, v9 clamp               // 0000000000C4: D2800809 0426080C
  v_mac_f32     v12, s21, v3                            // 0000000000CC: 3E180615
  v_mul_legacy_f32  v2, s30, v2                         // 0000000000D0: 0E04041E
  v_mac_f32     v10, s4, v13                            // 0000000000D4: 3E141A04
  v_mac_f32     v11, s5, v14                            // 0000000000D8: 3E161C05
  v_mac_f32     v6, s6, v15                             // 0000000000DC: 3E0C1E06
  v_mul_legacy_f32  v13, s32, v9                        // 0000000000E0: 0E1A1220
  v_mul_legacy_f32  v14, s33, v9                        // 0000000000E4: 0E1C1221
  v_mul_legacy_f32  v9, s34, v9                         // 0000000000E8: 0E121222
  v_mad_legacy_f32  v12, s20, v4, v12 clamp             // 0000000000EC: D280080C 04320814
  v_mac_f32     v2, s29, v3                             // 0000000000F4: 3E04061D
  v_mac_f32     v10, v13, v5                            // 0000000000F8: 3E140B0D
  v_mac_f32     v11, v14, v7                            // 0000000000FC: 3E160F0E
  v_mac_f32     v6, v9, v8                              // 000000000100: 3E0C1109
  v_mad_legacy_f32  v2, s28, v4, v2 clamp               // 000000000104: D2800802 040A081C
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mul_legacy_f32  v3, s36, v12                        // 000000000110: 0E061824
  v_mul_legacy_f32  v4, s37, v12                        // 000000000114: 0E081825
  v_mul_legacy_f32  v9, s38, v12                        // 000000000118: 0E121826
  v_mul_legacy_f32  v12, s8, v2                         // 00000000011C: 0E180408
  v_mul_legacy_f32  v13, s9, v2                         // 000000000120: 0E1A0409
  v_mul_legacy_f32  v2, s10, v2                         // 000000000124: 0E04040A
  v_mac_f32     v10, v3, v5                             // 000000000128: 3E140B03
  v_mac_f32     v11, v4, v7                             // 00000000012C: 3E160F04
  v_mac_f32     v6, v9, v8                              // 000000000130: 3E0C1109
  v_mad_legacy_f32  v10, v12, v5, v10 clamp             // 000000000134: D280080A 042A0B0C
  v_mad_legacy_f32  v11, v13, v7, v11 clamp             // 00000000013C: D280080B 042E0F0D
  v_mad_legacy_f32  v6, v2, v8, v6 clamp                // 000000000144: D2800806 041A1102
  v_interp_p1_f32  v0, v0, attr0.w                      // 00000000014C: C8000300
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000150: C8010301
  v_cvt_pkrtz_f16_f32  v1, v10, v11                     // 000000000154: 5E02170A
  v_cvt_pkrtz_f16_f32  v0, v6, v0                       // 000000000158: 5E000106
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 00000000015C: F8001C0F 00000001
  s_endpgm                                              // 000000000164: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   16
//  NumSRegs:                   42
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   82
//  CycleSimNWaves:             82
//  Code Size:                  360
//Assembler Counts:
//  num_32bit_ops                     : 74
//  num_64bit_ops                     : 8
//  num_alu                           : 65
//  num_fc                            : 16
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 0
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 1
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 40
//  num_inst_vop3                     : 9
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 14
//  constant_literal_operands         : 0
//  num_tex                           : 1
//  num_vmem_group                    : 0
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 16
// m_uNumSRegs                       : 42
// m_uSCCodeSize                     : 360
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 82
// m_uCycleSimNWaves                 : 82

// Assembler Counts:
// num_32bit_ops                     : 74
// num_64bit_ops                     : 8
// num_alu                           : 65
// num_fc                            : 16
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 0
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 1
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 40
// num_inst_vop3                     : 9
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 14
// num_inst_smem                     : 11
// constant_literal_operands         : 0
// num_tex                           : 1
// num_vmem_group                    : 0
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLLambert_main[] =
{
     68,  88,  66,  67,  26, 238, 
    230, 111, 112,   6, 131, 150, 
     12,  49, 154, 194, 163, 227, 
    139, 251,   1,   0,   0,   0, 
    141,   7,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0,  28,   7,   0,   0, 
     44,   7,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   0, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 192,   5,   0,   0, 
     80,   0,   0,   0, 112,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 161,   0, 
      0,   0,  80,   0,   0,   0, 
    156,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   5,   0,   0,   0, 
     89,   0,   0,   4,  70, 142, 
     32,   0,   1,   0,   0,   0, 
     21,   0,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3, 114,  16,  16,   0, 
      3,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   3,   0,   0,   0, 
     16,   0,   0,   7,  18,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  68,   0, 
      0,   5,  18,   0,  16,   0, 
      0,   0,   0,   0,  10,   0, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   7, 114,   0, 
     16,   0,   0,   0,   0,   0, 
      6,   0,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  16,  32, 
      0,   8, 130,   0,  16,   0, 
      0,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      9,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   1,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     50,   0,   0,  11, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  16,  32,   0,   8, 
    130,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,  10,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      2,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   2,   0,   0,   0, 
     50,   0,   0,   9, 114,   0, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     16,  32,   0,   8, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,  11,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  16,  32,   0,   8, 
     18,   0,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,  12,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      0,   0,   0,   0,   6,   0, 
     16,   0,   0,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   4,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   2,   0,   0,   0, 
    246,  15,  16,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   3,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  50,  32,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,  16,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    207,   0,   0,   0,  23,   0, 
      1,   0,  41, 158,  16,   0, 
    120,   1, 237,  87, 207, 107, 
     19,  65,  20, 126, 187,  59, 
     89, 247,  87,  38, 205, 146, 
    166, 219, 144, 150,  40,  90, 
     74, 105,  75, 181,  55, 145, 
    197, 254, 192, 138,  45,   8, 
    109, 149,  82, 214, 218, 164, 
     93, 104, 160, 105,  67, 210, 
    131, 167,  24, 165,  72, 145, 
     34, 197, 147,   7, 241, 228, 
    193, 147, 127, 129, 216, 178, 
    167,  61, 120,  42, 246,  63, 
    232, 197, 127,  64, 122,  40, 
    232, 123, 235, 174, 198, 212, 
    222,   2,  10, 230, 131, 239, 
    205, 124,  51, 111, 223, 188, 
    153, 183, 135, 153,  55,  29, 
     16, 224, 254,  81, 238,  43, 
    181, 183, 222,  29, 221,  46, 
    139,   0,  49, 236,  11,  72, 
    106,   9, 175, 226, 100,   1, 
    110,  36, 200,   2, 244, 147, 
     33,   7, 244, 165,  16,   3, 
    200,  53, 212,  55, 177, 165, 
    185, 136,   0, 245, 241, 209, 
    209, 157, 113, 116, 131,  65, 
     36, 249, 206, 134, 188, 131, 
     84, 144,  99,  72,  26, 167, 
    112, 205,  96, 100,  16, 205, 
    115,  52,  78, 241,  85,  36, 
    129,  35, 117,  36, 225,  76, 
     28, 151, 204, 159,  65, 121, 
    208, 218, 231, 129, 114, 139, 
     64, 113,  35,  95, 218, 239, 
    223,  70, 243,  62,  37, 100, 
     84,  39,   2, 213, 163,  17, 
    116,  70,  63, 135, 194,  58, 
     82,  93,   8, 169,  80, 211, 
    254, 104, 111,   7, 200, 243, 
    240,  13,  65, 117, 107,  68, 
    164,  41, 158,  44,  96,  48, 
     28, 144, 165,  46,   0,  11, 
      7, 254,  51,  68, 255,  44, 
    157,   5, 145, 206,  52,  60, 
    222,   0, 209, 252,  61,  50, 
     80, 223,  39, 238,  89, 112, 
     66,  42, 210,   2, 106, 141, 
    100, 168,  37, 210, 193,  15, 
    222, 160,  81, 105,  93, 226, 
    146,  44, 192,  82,  34,  11, 
     39,  84,  91, 212,  14, 106, 
    167,  65,  47, 162,  94, 108, 
    208, 203, 168, 151,  27, 116, 
      1, 117,  33, 210,  81, 252, 
     68, 176, 158,  28, 212,  26, 
      7, 107, 255,  50, 219,  57, 
    182, 134, 237,  28,  91, 195, 
    118, 142, 173,  97,  59, 199, 
    214, 176, 157,  99, 107, 216, 
    206, 177,  53, 108, 231, 216, 
     50, 226, 133, 222,  59,  16, 
    165, 211, 143,  32,  43,  62, 
    196,  12,  95, 144,  85, 255, 
     49, 236, 238,  95,  86, 235, 
     30, 176,  14,  95, 136, 197, 
    125,  49, 166, 113, 129,  37, 
    125, 233, 130, 102, 247, 171, 
    207,  60, 166, 106,  54,  83, 
    119, 188,  65, 245, 185,  23, 
    123, 160, 213,  64, 221, 245, 
     70, 212,  23, 158, 168,  51, 
     14, 177, 167, 158, 162, 238, 
    121, 146,  46, 115, 138,  35, 
     50, 131,  27, 234,  75, 143, 
    233,  10,  23, 100, 195, 238, 
     80, 183,  61,  89, 169,  31, 
    130, 146, 193, 107, 108, 202, 
      7,  33, 235, 131, 152, 243, 
     57,  51, 121, 135, 145, 226, 
     73,  35, 205,  77, 195, 224, 
      2, 116, 250, 130, 208, 227, 
     11, 226,  69,  63,  46, 155, 
    118, 154,  89,  92, 211,  83, 
     92,  79, 164, 185, 156,  52, 
    184,  37, 102, 106, 221,  98, 
    182, 150,  17, 123, 107,  42, 
    198,  51, 148,  62, 214,  41, 
     91, 118,  47,  99, 156, 101, 
     82, 118,  44, 155, 182, 229, 
     94, 195, 206, 153,  25, 126, 
    209, 204, 242,  75, 166, 201, 
     13, 244,  75,  41, 215,  88, 
    143, 204, 236, 184, 158, 178, 
    121,  34, 109, 171,  73, 195, 
     22, 113,  60, 171, 104,  44, 
    216, 183,  37, 243,  43, 150, 
    194, 251,  44, 147,  43, 184, 
    166, 202,  50,  92, 195, 152, 
     18, 250, 179, 208,  95,  67, 
    127,  67,  31, 192,  45, 213, 
     15, 227, 137,  97,  70, 251, 
     17, 147, 184,  31,   9, 124, 
     65,  18, 124, 188,  19, 255, 
    118, 167,   6, 120, 178, 223, 
     77,  29, 186, 204,  55,  32, 
    144, 236, 135,  71,   4, 145, 
     36, 142,  69, 119, 124, 194, 
    118, 120, 249, 159,  15, 219, 
     17,  36, 189,  91,   5,  92, 
    144, 220,  59, 195,  62, 129, 
    222, 219,  12, 100, 180,   0, 
     87, 213,  79,  95, 142, 247, 
    222, 119,  83, 159, 240,  33, 
    252, 254, 117, 216, 230, 144, 
      6, 242,  23, 222, 146,  57, 
    131, 227, 208, 255, 115, 216, 
    210, 123, 132, 242, 195,  98, 
    163,  69, 208, 195,  16, 193, 
    104,   2, 113,  26, 250, 209, 
    155, 142, 158,  28, 205, 121, 
    100,  67, 191,  69,  36, 101, 
     58, 113, 221, 153, 117, 203, 
    155,  85, 103, 161, 176, 249, 
    104, 104, 108, 126, 106, 104, 
     46,  95,  42, 175, 187,  85, 
    103, 186, 184,  85, 117,  38, 
    139,  21, 119, 101, 107,  97, 
    126, 218, 169,  86,  86, 156, 
    185, 181, 252, 170,  91, 169, 
     58,  19, 155, 165, 114, 113, 
    221,  93,  13,  62, 186, 187, 
    225,  78,  78, 205, 205, 204, 
    228,  75,   5, 183, 178, 245, 
    176, 148,  47, 110,  12, 151, 
     87,  11, 240,  29, 138,  61, 
      5,  38,  88,  72,  83,  72, 
      8,   0,   0,   0,  49,   9, 
    204, 233, 228, 144, 174,  25, 
     88,  80,  68,  80,  89,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  68, 
     71,  83,  76,  76,  97, 109, 
     98, 101, 114, 116,  95, 109, 
     97, 105, 110,  46, 112, 100, 
     98
};
