#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[83]
// Embedded Data:
//  0x00000053 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000004e - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t1.xyzw, s1
mul r0.xyzw, r0.xyzw, v0.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 1.000000)
mul o0.xyzw, r0.xyzw, r1.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[83], bundle is:[173] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDualTextureEffect_PSDualTextureNoFog.pdb
// Shader Semantic Hash      : 0x235532abb2069c56
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 192 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
NumVgprs             = 13;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000002
SPIC:NUM_INTERP             = 2
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0xAC, dwords=0x2B)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, off, off, off done vm         // 000000000008: F8001801 00000001
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, off, off done vm          // 000000000008: F8001803 00000201
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v0, off, off done vm          // 000000000008: F8001803 00000001
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 000000000000: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 000000000004: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v1, v1, v2                      // 000000000000: 5C020501
  v_cvt_pknorm_u16_f32  v0, v3, v0                      // 000000000004: 5C000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v1, v1, v2                      // 000000000000: 5A020501
  v_cvt_pknorm_i16_f32  v0, v3, v0                      // 000000000004: 5A000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v1, v1, v2                          // 000000000000: 60020501
  v_cvt_pk_u16_u32  v0, v3, v0                          // 000000000004: 60000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v1, v1, v2                          // 000000000000: 62020501
  v_cvt_pk_i16_i32  v0, v3, v0                          // 000000000004: 62000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 000000000008: F8001C0F 00000001
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v1, v2, v3, v0 done vm            // 000000000008: F800180F 00030201
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 00000000000C: C0CA0110
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.z                      // 000000000014: C8080600
  v_interp_p1_f32  v3, v0, attr1.w                      // 000000000018: C80C0700
  v_interp_p1_f32  v4, v0, attr1.x                      // 00000000001C: C8100400
  v_interp_p1_f32  v5, v0, attr1.y                      // 000000000020: C8140500
  v_interp_p2_f32  v2, v1, attr1.z                      // 000000000024: C8090601
  v_interp_p2_f32  v3, v1, attr1.w                      // 000000000028: C80D0701
  v_interp_p2_f32  v4, v1, attr1.x                      // 00000000002C: C8110401
  v_interp_p2_f32  v5, v1, attr1.y                      // 000000000030: C8150501
  s_waitcnt     lgkmcnt(0)                              // 000000000034: BF8C007F
  image_sample  v[6:9], v[2:3], s[12:19], s[24:27] dmask:0xf // 000000000038: F0800F00 00C30602
  image_sample  v[2:5], v[4:5], s[4:11], s[20:23] dmask:0xf // 000000000040: F0800F00 00A10204
  v_interp_p1_f32  v10, v0, attr0.x                     // 000000000048: C8280000
  v_interp_p1_f32  v11, v0, attr0.y                     // 00000000004C: C82C0100
  v_interp_p1_f32  v12, v0, attr0.z                     // 000000000050: C8300200
  v_interp_p1_f32  v0, v0, attr0.w                      // 000000000054: C8000300
  v_interp_p2_f32  v10, v1, attr0.x                     // 000000000058: C8290001
  v_interp_p2_f32  v11, v1, attr0.y                     // 00000000005C: C82D0101
  v_interp_p2_f32  v12, v1, attr0.z                     // 000000000060: C8310201
  v_interp_p2_f32  v0, v1, attr0.w                      // 000000000064: C8010301
  s_waitcnt     vmcnt(1)                                // 000000000068: BF8C0F71
  v_mul_legacy_f32  v1, v6, v10                         // 00000000006C: 0E021506
  v_mul_legacy_f32  v6, v7, v11                         // 000000000070: 0E0C1707
  v_mul_legacy_f32  v7, v8, v12                         // 000000000074: 0E0E1908
  v_mul_legacy_f32  v0, v9, v0                          // 000000000078: 0E000109
  s_waitcnt     vmcnt(0)                                // 00000000007C: BF8C0F70
  v_max_f32     v2, v2, v2 mul:2                        // 000000000080: D2200002 08020502
  v_max_f32     v3, v3, v3 mul:2                        // 000000000088: D2200003 08020703
  v_max_f32     v4, v4, v4 mul:2                        // 000000000090: D2200004 08020904
  v_mul_legacy_f32  v1, v1, v2                          // 000000000098: 0E020501
  v_mul_legacy_f32  v2, v6, v3                          // 00000000009C: 0E040706
  v_mul_legacy_f32  v3, v7, v4                          // 0000000000A0: 0E060907
  v_mul_legacy_f32  v0, v0, v5                          // 0000000000A4: 0E000B00
  s_mov_b64     exec, s[28:29]                          // 0000000000A8: BEFE041C
  v_cvt_pkrtz_f16_f32  v1, v1, v2                       // 0000000000AC: 5E020501
  v_cvt_pkrtz_f16_f32  v0, v3, v0                       // 0000000000B0: 5E000103
  exp           mrt0, v1, v1, v0, v0 done compr vm      // 0000000000B4: F8001C0F 00000001
  s_endpgm                                              // 0000000000BC: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   13
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   86
//  CycleSimNWaves:             86
//  Code Size:                  192
//Assembler Counts:
//  num_32bit_ops                     : 36
//  num_64bit_ops                     : 6
//  num_alu                           : 29
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 4
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 10
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 16
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 13
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 192
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 86
// m_uCycleSimNWaves                 : 86

// Assembler Counts:
// num_32bit_ops                     : 36
// num_64bit_ops                     : 6
// num_alu                           : 29
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 4
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 10
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 16
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DualTextureEffect_PSDualTextureNoFog[] =
{
     68,  88,  66,  67, 250,  28, 
    247, 179, 254, 162, 102, 107, 
    209, 246, 168, 114,  52,  16, 
    185, 103,   1,   0,   0,   0, 
    101,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 224,   4,   0,   0, 
    240,   4,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  86,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  12,  12, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,   8,   4,   0,   0, 
     80,   0,   0,   0,   2,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  83,   0, 
      0,   0,  80,   0,   0,   0, 
     78,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   1,   0,   0,   0, 
     85,  85,   0,   0,  98,  16, 
      0,   3, 242,  16,  16,   0, 
      0,   0,   0,   0,  98,  16, 
      0,   3,  50,  16,  16,   0, 
      1,   0,   0,   0,  98,  16, 
      0,   3, 194,  16,  16,   0, 
      1,   0,   0,   0, 101,   0, 
      0,   3, 242,  32,  16,   0, 
      0,   0,   0,   0, 104,   0, 
      0,   2,   2,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   0,   0, 
      0,   0, 230,  26,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   1,   0,   0,   0, 
      0,  96,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      1,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,  10, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,   2,  64, 
      0,   0,   0,   0,   0,  64, 
      0,   0,   0,  64,   0,   0, 
      0,  64,   0,   0, 128,  63, 
     56,   0,   0,   7, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    175,   0,   0,   0,  23,   0, 
      1,   0,  41,  26,  16,   0, 
    120,   1, 237,  87, 189,  79, 
     20,  65,  20, 127,  51, 187, 
    183, 183, 199, 199, 222, 153, 
     64,   4, 131,  74,  34,   5, 
    126,  96, 212, 202,  24,  11, 
      5, 212,   2, 227,  23, 104, 
      8, 217,  32,  28, 183, 167, 
     36,   7, 119, 222,  65,  66, 
    117,  98, 162,  29, 133, 165, 
      5, 141, 137, 157, 157, 181, 
    185, 195, 216,  76,  44, 141, 
    165, 127, 130,   5, 165, 133, 
     65, 223, 111, 119,   6,  87, 
    196, 110,  19,  77, 220,  95, 
    242, 123, 111, 126, 243, 241, 
    246, 205, 204,  22, 243,  14, 
     21,  40, 196, 218, 214, 231, 
     35, 240, 205, 202, 179, 219, 
    231,   5,  81, 134, 219, 236, 
     66,  15, 188, 232, 134,  37, 
    122, 235, 193,  18,  13, 195, 
     96, 130,  36, 194, 208,  32, 
    115, 139, 121, 137, 137,  49, 
     67, 162, 194, 104, 185, 220, 
     55, 138,  86,  63,  19, 203, 
    239, 105,  14,  49,  29, 230, 
     97, 102,   7,  19, 225,   0, 
     14, 185,  11,  27, 134,  97, 
    124,  28,  88,  99, 128, 109, 
    152, 117,  22, 211, 196,  10, 
     17, 192, 236, 143,  19,  76, 
    189, 181, 125, 129, 220,  76, 
     92, 196,  52, 223, 196, 126, 
    255,  54, 162,  61,  70, 217, 
     97, 207, 128, 185,  39,   0, 
    247,  17,   7, 206,  62,  90, 
     67,  52,  13, 193,  48, 231, 
     90, 209,  26, 203, 205,  93, 
    254,   9, 223,  25, 125, 104, 
    196,  96,  52, 178, 113,  40, 
    207, 150, 189,  56,  74, 228, 
    162, 245, 127, 193, 156,  41, 
    206,   2, 196, 191,  25, 157, 
     72,   4,  51, 126,  18, 134, 
    214, 219, 224, 243,  62, 250, 
     10, 101, 180,  96,  29, 221, 
     85, 164,  45, 104,   4, 139, 
    107,  86,  34,  35, 103,  45, 
     65, 179, 249, 129,  93, 237, 
    179, 246,  99, 122, 134, 245, 
     76,  76, 207, 177, 158, 139, 
    233,  34, 235, 162, 209,  38, 
    126,  62, 252, 158,  21, 222, 
     53, 119,  54, 255, 101, 166, 
     57,  38, 195,  52, 199, 100, 
    152, 230, 152,  12, 211,  28, 
    147,  97, 154,  99,  50,  76, 
    115,  76, 134, 105, 142, 137, 
    145, 154, 246, 102, 171, 217, 
    177, 211,  34,  33, 223,  21, 
    196, 135,  45, 105, 125, 107, 
    145, 227,  42, 202, 118,  41, 
    178,  11, 138,  50,  61,  74, 
     56,  57,  37, 178, 221,  74, 
    216,   7, 148, 200, 244, 170, 
    199, 180, 209, 166, 252, 250, 
    182, 116, 222, 243, 195, 116, 
    125, 219, 150,  47,  57, 210, 
    176,  34, 113,  74, 145,  60, 
    163, 184, 152,  80, 130, 142, 
     43,  33,  70, 148, 144, 103, 
    149, 176, 132, 122, 148, 223, 
    104,  59, 189, 210, 203,  30, 
    236, 242, 220, 126, 207, 203, 
      9, 242, 106, 220,  39, 105, 
    240, 163, 204,  72, 215,  98, 
    111, 101, 165, 107, 179, 183, 
    115, 210, 229, 119, 165, 231, 
    100, 109,  47, 155, 115,  60, 
    234,  36, 111, 192, 222, 105, 
    113, 223,  47, 111,  85, 162, 
     39, 237, 126,  52, 194, 119, 
    237,  30, 184, 209, 140,  93, 
     64, 114,  95, 188, 156,   8, 
    103, 216,  34, 124,  95,  27, 
      8, 116, 114,  95,  15,  59, 
    131,  47, 186, 182, 249, 164, 
     61, 106, 149,  28, 211,  14, 
    171,  79, 174,  69,  55, 157, 
     55, 175, 207, 221,  61, 134, 
     54,  48, 164,  31, 235, 182, 
    246, 168, 135, 186, 152,  63, 
    241,  10, 230,  55,  92, 215, 
    243,  47, 106, 143, 188, 240, 
    214, 247,  76,  21, 173, 191, 
     95, 209, 227,  37, 237, 177, 
    167,  78, 230, 222,  60, 158, 
    234, 241, 101,  38,  50,  29, 
    187, 224, 223,   9, 106, 213, 
    134,  63,  93, 172, 174, 141, 
     92, 158, 186,  54,  50,  57, 
    191,  84, 171,   4,  13, 127, 
     98, 113, 165, 225, 143,  47, 
    214, 131, 133, 149, 233, 169, 
      9, 191,  81,  95, 240,  39, 
     31, 206, 151, 130, 122, 195, 
     31, 171,  46, 213,  22,  43, 
     65,  41,  92, 116, 115,  57, 
     24,  95, 157, 175,  76,   5, 
    107,  43, 171, 245, 224,  74, 
    185, 204,  11, 238, 223, 154, 
    140, 245, 221, 168,  94, 173, 
     62,  56,  93,  43,  21, 233, 
      7, 150,   3, 242,  16,   0, 
     88,  72,  83,  72,   8,   0, 
      0,   0,  86, 156,   6, 178, 
    171,  50,  85,  35,  88,  80, 
     68,  80, 109,   0,   0,   0, 
     67,  58,  92,  82, 101, 112, 
    111, 115,  92,  88,  98, 111, 
    120,  45,  65,  84,  71,  45, 
     83,  97, 109, 112, 108, 101, 
    115,  92,  75, 105, 116, 115, 
     92,  68, 105, 114, 101,  99, 
    116,  88,  84,  75,  92, 115, 
    114,  99,  92,  83, 104,  97, 
    100, 101, 114, 115,  92,  67, 
    111, 109, 112, 105, 108, 101, 
    100,  92,  88,  98, 111, 120, 
     79, 110, 101,  68, 117,  97, 
    108,  84, 101, 120, 116, 117, 
    114, 101,  69, 102, 102, 101, 
     99, 116,  95,  80,  83,  68, 
    117,  97, 108,  84, 101, 120, 
    116, 117, 114, 101,  78, 111, 
     70, 111, 103,  46, 112, 100, 
     98
};
