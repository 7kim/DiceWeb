#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[97]
// Embedded Data:
//  0x00000061 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x0000005c - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[32], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
mov r0.xyzw, l(0,0,0,0)
mov r1.x, l(0)
loop 
  ige r1.y, r1.x, l(15)
  breakc_nz r1.y
  add r1.yz, v1.xxyx, cb0[r1.x + 0].xxyx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.yzyy, t0.xyzw, s0
  mad r0.xyzw, cb0[r1.x + 16].xyzw, r2.xyzw, r0.xyzw
  iadd r1.x, r1.x, l(1)
endloop 
mov o0.xyzw, r0.xyzw
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[97], bundle is:[270] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOnePostProcess_PSBloomBlur.pdb
// Shader Semantic Hash      : 0x4bd662fc94652301
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 732 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 28;
NumSgprs             = 64;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x2C8, dwords=0xB2)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, off, off, off done vm        // 000000000008: F8001801 00000018
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v25, off, off done vm        // 000000000008: F8001803 00001918
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v27, off, off done vm        // 000000000008: F8001803 00001B18
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v24, v25                     // 000000000000: 5E003318
  v_cvt_pkrtz_f16_f32  v1, v26, v27                     // 000000000004: 5E02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v24, v25                    // 000000000000: 5C003318
  v_cvt_pknorm_u16_f32  v1, v26, v27                    // 000000000004: 5C02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v24, v25                    // 000000000000: 5A003318
  v_cvt_pknorm_i16_f32  v1, v26, v27                    // 000000000004: 5A02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v24, v25                        // 000000000000: 60003318
  v_cvt_pk_u16_u32  v1, v26, v27                        // 000000000004: 6002371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v24, v25                        // 000000000000: 62003318
  v_cvt_pk_i16_i32  v1, v26, v27                        // 000000000004: 6202371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v24, v25, v26, v27 done vm        // 000000000008: F800180F 1B1A1918
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[60:61], exec                          // 000000000000: BEBC047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     s58, s2                                 // 000000000008: BEBA0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  s_waitcnt     lgkmcnt(0)                              // 000000000010: BF8C007F
  s_buffer_load_dwordx2  s[48:49], s[12:15], 0x00       // 000000000014: C2580D00
  s_buffer_load_dwordx16  s[16:31], s[12:15], 0x40      // 000000000018: C3080D40
  s_buffer_load_dwordx2  s[50:51], s[12:15], 0x04       // 00000000001C: C2590D04
  s_buffer_load_dwordx2  s[52:53], s[12:15], 0x08       // 000000000020: C25A0D08
  s_buffer_load_dwordx2  s[54:55], s[12:15], 0x0c       // 000000000024: C25B0D0C
  s_buffer_load_dwordx2  s[56:57], s[12:15], 0x10       // 000000000028: C25C0D10
  s_buffer_load_dwordx16  s[32:47], s[12:15], 0x50      // 00000000002C: C3100D50
  s_mov_b32     m0, s58                                 // 000000000030: BEFC033A
  v_interp_p1_f32  v20, v0, attr0.x                     // 000000000034: C8500000
  v_interp_p2_f32  v20, v1, attr0.x                     // 000000000038: C8510001
  v_interp_p1_f32  v21, v0, attr0.y                     // 00000000003C: C8540100
  v_interp_p2_f32  v21, v1, attr0.y                     // 000000000040: C8550101
  s_waitcnt     lgkmcnt(0)                              // 000000000044: BF8C007F
  v_add_f32     v0, s48, v20                            // 000000000048: 06002830
  v_add_f32     v1, s49, v21                            // 00000000004C: 06022A31
  v_add_f32     v4, s50, v20                            // 000000000050: 06082832
  v_add_f32     v5, s51, v21                            // 000000000054: 060A2A33
  v_add_f32     v8, s52, v20                            // 000000000058: 06102834
  v_add_f32     v9, s53, v21                            // 00000000005C: 06122A35
  v_add_f32     v12, s54, v20                           // 000000000060: 06182836
  v_add_f32     v13, s55, v21                           // 000000000064: 061A2A37
  v_add_f32     v16, s56, v20                           // 000000000068: 06202838
  v_add_f32     v17, s57, v21                           // 00000000006C: 06222A39
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 000000000070: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 000000000078: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 000000000080: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 000000000088: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 000000000090: F0800F00 00401010
  s_waitcnt     vmcnt(4)                                // 000000000098: BF8C0F74
  v_mul_legacy_f32  v0, s16, v0                         // 00000000009C: 0E000010
  v_mul_legacy_f32  v1, s17, v1                         // 0000000000A0: 0E020211
  v_mul_legacy_f32  v2, s18, v2                         // 0000000000A4: 0E040412
  v_mul_legacy_f32  v3, s19, v3                         // 0000000000A8: 0E060613
  s_waitcnt     vmcnt(3)                                // 0000000000AC: BF8C0F73
  v_mac_f32     v0, s20, v4                             // 0000000000B0: 3E000814
  v_mac_f32     v1, s21, v5                             // 0000000000B4: 3E020A15
  v_mac_f32     v2, s22, v6                             // 0000000000B8: 3E040C16
  v_mac_f32     v3, s23, v7                             // 0000000000BC: 3E060E17
  s_waitcnt     vmcnt(2)                                // 0000000000C0: BF8C0F72
  v_mac_f32     v0, s24, v8                             // 0000000000C4: 3E001018
  v_mac_f32     v1, s25, v9                             // 0000000000C8: 3E021219
  v_mac_f32     v2, s26, v10                            // 0000000000CC: 3E04141A
  v_mac_f32     v3, s27, v11                            // 0000000000D0: 3E06161B
  s_waitcnt     vmcnt(1)                                // 0000000000D4: BF8C0F71
  v_mac_f32     v0, s28, v12                            // 0000000000D8: 3E00181C
  v_mac_f32     v1, s29, v13                            // 0000000000DC: 3E021A1D
  v_mac_f32     v2, s30, v14                            // 0000000000E0: 3E041C1E
  v_mac_f32     v3, s31, v15                            // 0000000000E4: 3E061E1F
  s_buffer_load_dwordx2  s[48:49], s[12:15], 0x14       // 0000000000E8: C2580D14
  s_buffer_load_dwordx2  s[50:51], s[12:15], 0x18       // 0000000000EC: C2590D18
  s_buffer_load_dwordx2  s[52:53], s[12:15], 0x1c       // 0000000000F0: C25A0D1C
  s_buffer_load_dwordx2  s[54:55], s[12:15], 0x20       // 0000000000F4: C25B0D20
  s_buffer_load_dwordx16  s[16:31], s[12:15], 0x60      // 0000000000F8: C3080D60
  s_waitcnt     vmcnt(0)                                // 0000000000FC: BF8C0F70
  v_mad_f32     v16, s32, v16, v0                       // 000000000100: D2820010 04022020
  v_mad_f32     v17, s33, v17, v1                       // 000000000108: D2820011 04062221
  v_mad_f32     v18, s34, v18, v2                       // 000000000110: D2820012 040A2422
  v_mad_f32     v19, s35, v19, v3                       // 000000000118: D2820013 040E2623
  s_waitcnt     lgkmcnt(0)                              // 000000000120: BF8C007F
  v_add_f32     v0, s48, v20                            // 000000000124: 06002830
  v_add_f32     v1, s49, v21                            // 000000000128: 06022A31
  v_add_f32     v4, s50, v20                            // 00000000012C: 06082832
  v_add_f32     v5, s51, v21                            // 000000000130: 060A2A33
  v_add_f32     v8, s52, v20                            // 000000000134: 06102834
  v_add_f32     v9, s53, v21                            // 000000000138: 06122A35
  v_add_f32     v12, s54, v20                           // 00000000013C: 06182836
  v_add_f32     v13, s55, v21                           // 000000000140: 061A2A37
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 000000000144: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 00000000014C: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 000000000154: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 00000000015C: F0800F00 00400C0C
  s_waitcnt     vmcnt(3)                                // 000000000164: BF8C0F73
  v_mac_f32     v16, s36, v0                            // 000000000168: 3E200024
  v_mac_f32     v17, s37, v1                            // 00000000016C: 3E220225
  v_mac_f32     v18, s38, v2                            // 000000000170: 3E240426
  v_mac_f32     v19, s39, v3                            // 000000000174: 3E260627
  s_waitcnt     vmcnt(2)                                // 000000000178: BF8C0F72
  v_mac_f32     v16, s40, v4                            // 00000000017C: 3E200828
  v_mac_f32     v17, s41, v5                            // 000000000180: 3E220A29
  v_mac_f32     v18, s42, v6                            // 000000000184: 3E240C2A
  v_mac_f32     v19, s43, v7                            // 000000000188: 3E260E2B
  s_waitcnt     vmcnt(1)                                // 00000000018C: BF8C0F71
  v_mac_f32     v16, s44, v8                            // 000000000190: 3E20102C
  v_mac_f32     v17, s45, v9                            // 000000000194: 3E22122D
  v_mac_f32     v18, s46, v10                           // 000000000198: 3E24142E
  v_mac_f32     v19, s47, v11                           // 00000000019C: 3E26162F
  s_buffer_load_dwordx2  s[40:41], s[12:15], 0x24       // 0000000001A0: C2540D24
  s_buffer_load_dwordx2  s[42:43], s[12:15], 0x28       // 0000000001A4: C2550D28
  s_buffer_load_dwordx2  s[44:45], s[12:15], 0x2c       // 0000000001A8: C2560D2C
  s_buffer_load_dwordx2  s[46:47], s[12:15], 0x30       // 0000000001AC: C2570D30
  s_buffer_load_dwordx8  s[32:39], s[12:15], 0x70       // 0000000001B0: C2D00D70
  s_waitcnt     vmcnt(0)                                // 0000000001B4: BF8C0F70
  v_mad_f32     v24, s16, v12, v16                      // 0000000001B8: D2820018 04421810
  v_mad_f32     v25, s17, v13, v17                      // 0000000001C0: D2820019 04461A11
  v_mad_f32     v26, s18, v14, v18                      // 0000000001C8: D282001A 044A1C12
  v_mad_f32     v27, s19, v15, v19                      // 0000000001D0: D282001B 044E1E13
  s_waitcnt     lgkmcnt(0)                              // 0000000001D8: BF8C007F
  v_add_f32     v0, s40, v20                            // 0000000001DC: 06002828
  v_add_f32     v1, s41, v21                            // 0000000001E0: 06022A29
  s_buffer_load_dwordx2  s[16:17], s[12:15], 0x34       // 0000000001E4: C2480D34
  v_add_f32     v4, s42, v20                            // 0000000001E8: 0608282A
  v_add_f32     v5, s43, v21                            // 0000000001EC: 060A2A2B
  s_buffer_load_dwordx2  s[18:19], s[12:15], 0x38       // 0000000001F0: C2490D38
  v_add_f32     v8, s44, v20                            // 0000000001F4: 0610282C
  v_add_f32     v9, s45, v21                            // 0000000001F8: 06122A2D
  s_buffer_load_dwordx4  s[12:15], s[12:15], 0x78       // 0000000001FC: C2860D78
  v_add_f32     v12, s46, v20                           // 000000000200: 0618282E
  v_add_f32     v13, s47, v21                           // 000000000204: 061A2A2F
  s_waitcnt     lgkmcnt(0)                              // 000000000208: BF8C007F
  v_add_f32     v16, s16, v20                           // 00000000020C: 06202810
  v_add_f32     v17, s17, v21                           // 000000000210: 06222A11
  v_add_f32     v20, s18, v20                           // 000000000214: 06282812
  v_add_f32     v21, s19, v21                           // 000000000218: 062A2A13
  image_sample  v[0:3], v[0:1], s[0:7], s[8:11] dmask:0xf // 00000000021C: F0800F00 00400000
  image_sample  v[4:7], v[4:5], s[0:7], s[8:11] dmask:0xf // 000000000224: F0800F00 00400404
  image_sample  v[8:11], v[8:9], s[0:7], s[8:11] dmask:0xf // 00000000022C: F0800F00 00400808
  image_sample  v[12:15], v[12:13], s[0:7], s[8:11] dmask:0xf // 000000000234: F0800F00 00400C0C
  image_sample  v[16:19], v[16:17], s[0:7], s[8:11] dmask:0xf // 00000000023C: F0800F00 00401010
  image_sample  v[20:23], v[20:21], s[0:7], s[8:11] dmask:0xf // 000000000244: F0800F00 00401414
  s_waitcnt     vmcnt(5)                                // 00000000024C: BF8C0F75
  v_mac_f32     v24, s20, v0                            // 000000000250: 3E300014
  v_mac_f32     v25, s21, v1                            // 000000000254: 3E320215
  v_mac_f32     v26, s22, v2                            // 000000000258: 3E340416
  v_mac_f32     v27, s23, v3                            // 00000000025C: 3E360617
  s_waitcnt     vmcnt(4)                                // 000000000260: BF8C0F74
  v_mac_f32     v24, s24, v4                            // 000000000264: 3E300818
  v_mac_f32     v25, s25, v5                            // 000000000268: 3E320A19
  v_mac_f32     v26, s26, v6                            // 00000000026C: 3E340C1A
  v_mac_f32     v27, s27, v7                            // 000000000270: 3E360E1B
  s_waitcnt     vmcnt(3)                                // 000000000274: BF8C0F73
  v_mac_f32     v24, s28, v8                            // 000000000278: 3E30101C
  v_mac_f32     v25, s29, v9                            // 00000000027C: 3E32121D
  v_mac_f32     v26, s30, v10                           // 000000000280: 3E34141E
  v_mac_f32     v27, s31, v11                           // 000000000284: 3E36161F
  s_waitcnt     vmcnt(2)                                // 000000000288: BF8C0F72
  v_mac_f32     v24, s32, v12                           // 00000000028C: 3E301820
  v_mac_f32     v25, s33, v13                           // 000000000290: 3E321A21
  v_mac_f32     v26, s34, v14                           // 000000000294: 3E341C22
  v_mac_f32     v27, s35, v15                           // 000000000298: 3E361E23
  s_waitcnt     vmcnt(1)                                // 00000000029C: BF8C0F71
  v_mac_f32     v24, s36, v16                           // 0000000002A0: 3E302024
  v_mac_f32     v25, s37, v17                           // 0000000002A4: 3E322225
  v_mac_f32     v26, s38, v18                           // 0000000002A8: 3E342426
  v_mac_f32     v27, s39, v19                           // 0000000002AC: 3E362627
  s_waitcnt     vmcnt(0)                                // 0000000002B0: BF8C0F70
  v_mac_f32     v24, s12, v20                           // 0000000002B4: 3E30280C
  v_mac_f32     v25, s13, v21                           // 0000000002B8: 3E322A0D
  v_mac_f32     v26, s14, v22                           // 0000000002BC: 3E342C0E
  v_mac_f32     v27, s15, v23                           // 0000000002C0: 3E362E0F
  s_mov_b64     exec, s[60:61]                          // 0000000002C4: BEFE043C
  v_cvt_pkrtz_f16_f32  v0, v24, v25                     // 0000000002C8: 5E003318
  v_cvt_pkrtz_f16_f32  v1, v26, v27                     // 0000000002CC: 5E02371A
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002D0: F8001C0F 00000100
  s_endpgm                                              // 0000000002D8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         32
//  WorkgroupSize:              64
//  NumVRegs:                   28
//  NumSRegs:                   64
//  NumActiveWaveFrontByVReg:   36
//  NumActiveWaveFrontBySReg:   32
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   186
//  CycleSimNWaves:             186
//  Code Size:                  732
//Assembler Counts:
//  num_32bit_ops                     : 135
//  num_64bit_ops                     : 24
//  num_alu                           : 96
//  num_fc                            : 47
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 15
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 21
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 84
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 16
//  num_vmem_group                    : 3
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 32
// m_uVRegLimit                      : 47
// m_uSRegLimit                      : 100
// m_uNumVRegs                       : 28
// m_uNumSRegs                       : 64
// m_uSCCodeSize                     : 732
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 36
// m_uNumActiveWaveFrontBySReg       : 32
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 186
// m_uCycleSimNWaves                 : 186

// Assembler Counts:
// num_32bit_ops                     : 135
// num_64bit_ops                     : 24
// num_alu                           : 96
// num_fc                            : 47
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 15
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 21
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 84
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 21
// constant_literal_operands         : 0
// num_tex                           : 16
// num_vmem_group                    : 3
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE PostProcess_PSBloomBlur[] =
{
     68,  88,  66,  67, 193,  46, 
     12, 253,   8, 103, 196, 173, 
    148, 202, 107, 104, 156, 179, 
    165,  48,   1,   0,   0,   0, 
      4,   7,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 140,   6,   0,   0, 
    156,   6,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 196,   5, 
      0,   0,  80,   0,   0,   0, 
    113,   1,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     97,   0,   0,   0,  80,   0, 
      0,   0,  92,   0,   0,   0, 
    106,   8,   0,   1,  89,   8, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,  32,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   3,   0, 
      0,   0,  54,   0,   0,   8, 
    242,   0,  16,   0,   0,   0, 
      0,   0,   2,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  54,   0, 
      0,   5,  18,   0,  16,   0, 
      1,   0,   0,   0,   1,  64, 
      0,   0,   0,   0,   0,   0, 
     48,   0,   0,   1,  33,   0, 
      0,   7,  34,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,  15,   0, 
      0,   0,   3,   0,   4,   3, 
     26,   0,  16,   0,   1,   0, 
      0,   0,   0,   0,   0,   9, 
     98,   0,  16,   0,   1,   0, 
      0,   0,   6,  17,  16,   0, 
      1,   0,   0,   0,   6, 129, 
     32,   4,   0,   0,   0,   0, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      2,   0,   0,   0, 150,   5, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  50,   0, 
      0,  12, 242,   0,  16,   0, 
      0,   0,   0,   0,  70, 142, 
     32,   6,   0,   0,   0,   0, 
     16,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
     70,  14,  16,   0,   2,   0, 
      0,   0,  70,  14,  16,   0, 
      0,   0,   0,   0,  30,   0, 
      0,   7,  18,   0,  16,   0, 
      1,   0,   0,   0,  10,   0, 
     16,   0,   1,   0,   0,   0, 
      1,  64,   0,   0,   1,   0, 
      0,   0,  22,   0,   0,   1, 
     54,   0,   0,   5, 242,  32, 
     16,   0,   0,   0,   0,   0, 
     70,  14,  16,   0,   0,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0,  16,   1, 
      0,   0,  23,   0,   1,   0, 
     41,  49,  19,   0, 120,   1, 
    237,  88,  75, 111,  27,  85, 
     20, 190, 158,  92,  46, 131, 
    241, 140, 199, 143, 184, 227, 
     71,  83, 215, 113, 157, 233, 
     52,  15, 215,  53, 110,  40, 
    232, 200,  36,  85, 121,  68, 
      2,  67,  92,   8,  97,  84, 
     28, 199, 150, 136, 148, 212, 
    198, 118, 165, 172,  66,  96, 
      1,  44, 186,  96, 193, 162, 
     59,  54, 252,   2, 150,  21, 
    178,  97, 202,  34,  75, 196, 
    162,  43,  54, 252,   3, 150, 
     32,  85, 133, 115, 198,  51, 
    193,  45,  20, 117,  97,   9, 
      4, 254, 164, 239, 124, 115, 
    238, 220, 153, 251, 157, 123, 
    109, 203, 247, 158, 143,  48, 
      7, 115, 215, 127, 178,  73, 
     47,  15,  50, 129, 182, 143, 
    177,  39, 240,  26, 197,  81, 
    194,  45, 133,  34,  99, 223, 
    105,  20,  25,  75,  35, 151, 
    144,  13, 100,  10,  89,  70, 
    254,  40,  13,  53, 139, 164, 
    251,   6, 146, 149, 115, 171, 
    236, 208,  88, 165, 203, 231, 
    144, 212, 247, 182, 203,  79, 
    144,  58, 178, 134, 164, 119, 
    209, 120, 132,  32,   5,  23, 
    211,  20,  16, 158, 143,  81, 
     84,  41, 184, 224,  72, 175, 
     47,  89, 156,  66,  30, 163, 
     73, 225, 175, 241,   5, 146, 
     60,  61,  10, 228, 205, 243, 
     67, 254, 200,  39, 129, 234, 
    252, 167,  49, 156, 175,  63, 
     34, 209,  91,  39,   2, 173, 
    199,  40,  84,  36, 245,  33, 
    244, 220, 117, 244, 230, 233, 
     83,  55, 167, 185, 160, 218, 
    190,  65,  62,  10, 191,  33, 
    220, 238, 199, 240, 114, 122, 
    191, 240, 225,  91, 101, 188, 
    248, 159, 130,  62, 139,   4, 
    154,  11,  90,   2, 154, 155, 
    209, 207, 180, 119, 255,  43, 
     10, 236, 112,  64, 252,  76, 
    103, 191,  80, 230, 229,  62, 
    204, 233, 187, 225, 229,  83, 
    148, 199,  31, 202, 147, 248, 
    253, 185, 192, 174,  37,  46, 
     74, 215, 130,  41, 124,  30, 
      7, 196, 220, 194, 220,  26, 
    201,  55,  49, 223,  28, 201, 
    107, 152, 215,  70, 242,  58, 
    230, 117,  47, 247, 222,  31, 
    116, 198,  75,  36, 105, 173, 
    177, 241, 224, 223, 204, 137, 
    199, 241, 112, 226, 113,  60, 
    156, 120,  28,  15,  39,  30, 
    199, 195, 137, 199, 241, 112, 
    226, 113,  60, 156, 120,  28, 
     27, 217,   1, 255, 186, 127, 
    224, 191, 223, 151, 166, 110, 
    247, 241, 255, 219, 183,  31, 
    176, 155,   3, 166, 108, 216, 
    101,  69, 190, 195, 149, 183, 
    109,  89, 217, 180,   3, 202, 
     59, 182, 166,  88, 118,  69, 
    209, 238,  92, 154, 186, 215, 
    103, 172, 114, 228,  99, 175, 
     31,  49,  95, 245, 200, 231, 
    187, 122,  68, 207, 228,  13, 
     38, 206, 155, 146,  40,  24, 
    178, 184,  96, 250,  69, 209, 
    208, 196,  51, 102,  88, 148, 
     12,  93,  92,  52,  19,  98, 
    217,  72, 139, 103, 205, 140, 
     96, 193, 195, 159, 157,  29, 
      2,  42, 231,  67, 149, 229, 
    161,   6,   2,  67, 213, 180, 
     50, 235,   5, 111,  14, 240, 
    127, 175,  26, 146,  36,  53, 
    204, 185,  26,  17,  66, 237, 
     98,  91,  84, 102,  48, 237, 
    151,  32,  22, 224, 112,  66, 
     21, 208, 193,  54,  93,  99, 
     16,  15,  75, 144, 136, 114, 
     72, 198,   4, 188, 143, 109, 
     41, 157, 193, 201, 132,   4, 
     51,  41,  14, 167, 102,   4, 
     68, 177,  38,  29, 235,  73, 
     97,  61, 105, 172, 167, 134, 
    245, 181, 177, 159, 198,  62, 
    250,  33, 157, 150, 120,   8, 
    245, 116,  70, 240,  48, 106, 
     38, 235, 231,  17, 212, 217, 
    156, 202,  31, 167,  54, 242, 
    252, 119,  53, 145, 239,  44, 
     75, 195,  25,  41,   3,  57, 
    158, 133,  57, 145, 115, 124, 
     27, 114,  26, 206, 250,  51, 
     96,   6, 178, 112,  78, 205, 
     57, 190, 231, 181,  52,  44, 
    132,  51, 176,  24, 205, 194, 
     82,  44,   7,  89, 165, 106, 
     27, 202,  85, 123,  94, 121, 
    211, 206,  43, 111, 217, 109, 
    229, 123, 155, 124, 235, 232, 
     79, 211,  87, 120,  28,  53, 
    148, 184, 194,  19, 168, 225, 
    212,  43,  60, 137,  26, 153, 
    121, 213, 241, 109, 160, 239, 
    179, 232, 187, 168, 188, 100, 
    155, 232, 253,  28, 122,  95, 
     86,  94, 182, 231, 209, 255, 
      2, 250, 223,  87,  62, 182, 
     23, 177, 134,  37, 172, 129, 
    250, 107, 184,  70,  33,  92, 
    163, 176,  97, 136, 136, 105, 
     62, 246,  90, 145,  70, 163, 
    101, 118,   3, 125,  69,  89, 
     30, 166, 165,   2, 196, 120, 
     17,  78, 136,  18, 208,  58, 
    234, 114,  30, 226, 254,   2, 
     36,   2,  69,  72, 170,  37, 
    160, 249,  72, 105, 121,  56, 
     25,  46, 192,  76, 180,   8, 
    167,  98,  37, 103,  62, 210, 
    122,  30,  78,  39,  10, 144, 
     73,  21,  97, 118, 166, 228, 
    204,  71,  54, 157, 135,  51, 
    153,   2, 228, 178,  69, 152, 
    203, 149, 128, 106,  15,  24, 
    121,  80, 204,   2, 168, 243, 
     69,   8,  46, 150, 224, 121, 
    126, 191, 143, 251, 144,   7, 
    246,  49, 140, 125,  56, 136, 
    147,  62, 180, 135, 117,  32, 
     59,  29, 142, 225, 100, 220, 
    247, 192, 150, 211, 121,  12, 
    219,   2, 164,  30,  66,  20, 
    112,  95,  76,  27,  50,   4, 
    157,  83,  60, 133, 244, 185, 
    187,  96,  58, 179, 224,  76, 
     96, 196, 182, 217, 230, 231, 
    247, 234, 119, 215, 232, 154, 
    176, 236,  62, 171, 187,  74, 
    125, 189, 119,  47, 225, 112, 
     13, 246,  37,  93, 254,   9, 
     53, 183, 127, 197,  85,  26, 
    154, 246, 127, 170, 123, 162, 
    113, 168, 210,   9,   3, 170, 
    123, 127, 223,  85, 170, 229, 
    105, 164, 231, 227,  87, 183, 
    253, 150, 171,  91,  72, 114, 
    186, 122, 201, 122, 163, 217, 
    110, 117, 173, 141, 122, 107, 
    127, 225, 133, 234, 139,  11, 
    235,  91, 123, 237, 221, 102, 
    215,  90, 219, 233, 117, 173, 
    203,  59, 157, 230, 118, 111, 
    163, 186, 102, 117,  59, 219, 
    214, 250, 123,  91, 141, 102, 
    167, 107, 173, 182, 246, 218, 
     59, 187, 205, 134, 243, 208, 
    107, 215, 155, 149,  86, 183, 
     87, 233, 180, 182, 155, 221, 
    238, 187, 149, 245, 149, 221, 
     86, 107, 111, 101, 247,  70, 
    103, 177, 221, 168, 227,  16, 
     67, 132, 194,  20,  25, 174, 
    206, 240, 208, 128,  38, 157, 
    126,  36, 189, 205, 236, 112, 
     18,  16,  90, 249,  73, 247, 
     76, 233,  63,   8, 198, 126, 
      7, 241, 163, 120, 222,   0, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0,   1,  35, 
    101, 148, 252,  98, 214,  75, 
     88,  80,  68,  80,  96,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  80, 
    111, 115, 116,  80, 114, 111, 
     99, 101, 115, 115,  95,  80, 
     83,  66, 108, 111, 111, 109, 
     66, 108, 117, 114,  46, 112, 
    100,  98
};
