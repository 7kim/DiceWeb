#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyz         5     NONE   float       
// TEXCOORD                 4   xyzw        6     NONE   float       
// TEXCOORD                 5   xyz         7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[206]
// Embedded Data:
//  0x000000ce - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x000000c9 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.w, r0.w, v1.w
eq r1.x, r0.w, l(0.000000)
discard_nz r1.x
dp3 r1.x, v3.xyzx, v3.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v3.xyzx
dp3_sat r1.w, cb1[9].xyzx, r1.xyzx
mul r2.xyz, r1.wwww, cb1[1].xyzx
mul r2.xyz, r2.xyzx, v1.xyzx
mad r2.xyz, cb0[0].xyzx, cb1[0].xyzx, r2.xyzx
dp3_sat r1.w, cb1[10].xyzx, r1.xyzx
mul r3.xyz, r1.wwww, cb1[2].xyzx
mad r2.xyz, r3.xyzx, v1.xyzx, r2.xyzx
dp3_sat r1.w, cb1[11].xyzx, r1.xyzx
mul r3.xyz, r1.wwww, cb1[3].xyzx
mad r2.xyz, r3.xyzx, v1.xyzx, r2.xyzx
dp3_sat r1.x, cb1[12].xyzx, r1.xyzx
mul r1.xyz, r1.xxxx, cb1[4].xyzx
mad_sat r1.xyz, r1.xyzx, v1.xyzx, r2.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[206], bundle is:[231] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneDGSLLambert_mainTxTk.pdb
// Shader Semantic Hash      : 0x4c9f31e526db65b
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask 15, param0, paramSlot1, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 2, channelMask  3, param1, paramSlot2, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 3, channelMask  7, param2, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 444 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 4;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
;  extUserElements 1[3] = IMM_CONST_BUFFER 1, offset 0x10:19 dwords
NumVgprs             = 18;
NumSgprs             = 44;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000003

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000050
DB:Z_ORDER                  = 1
DB:KILL_ENABLE              = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x1A8, dwords=0x6A)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v5, off, off done vm          // 000000000008: F8001803 00000500
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v5                       // 000000000004: 5E020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v5                      // 000000000004: 5C020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v5                      // 000000000004: 5A020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v5                          // 000000000004: 60020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v5                          // 000000000004: 62020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v5 done vm            // 000000000008: F800180F 05020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[40:41], exec                          // 000000000000: BEA8047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 000000000008: C1020100
  s_mov_b32     m0, s2                                  // 00000000000C: BEFC0302
  v_interp_p1_f32  v2, v0, attr1.x                      // 000000000010: C8080400
  v_interp_p1_f32  v3, v0, attr1.y                      // 000000000014: C80C0500
  v_interp_p2_f32  v2, v1, attr1.x                      // 000000000018: C8090401
  v_interp_p2_f32  v3, v1, attr1.y                      // 00000000001C: C80D0501
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000024: F0800F00 00610202
  s_load_dwordx4  s[0:3], s[0:1], 0x10                  // 00000000002C: C0800110
  v_interp_p1_f32  v6, v0, attr0.w                      // 000000000030: C8180300
  v_interp_p2_f32  v6, v1, attr0.w                      // 000000000034: C8190301
  s_waitcnt     vmcnt(0)                                // 000000000038: BF8C0F70
  v_mul_legacy_f32  v5, v5, v6                          // 00000000003C: 0E0A0D05
  v_cmp_eq_f32  vcc, 0, v5                              // 000000000040: 7C040A80
  s_andn2_b64   s[40:41], s[40:41], vcc // wrscc        // 000000000044: 8AA86A28
  s_cbranch_scc0  label_0069                            // 000000000048: BF840056
  s_and_b64     exec, exec, s[40:41] // wrscc           // 00000000004C: 87FE287E
  s_wqm_b64     exec, exec // wrscc                     // 000000000050: BEFE0A7E
  v_interp_p1_f32  v6, v0, attr2.z                      // 000000000054: C8180A00
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000058: C81C0900
  v_interp_p2_f32  v6, v1, attr2.z                      // 00000000005C: C8190A01
  s_waitcnt     lgkmcnt(0)                              // 000000000060: BF8C007F
  s_buffer_load_dwordx4  s[4:7], s[0:3], 0x24           // 000000000064: C2820124
  v_interp_p1_f32  v8, v0, attr2.x                      // 000000000068: C8200800
  v_interp_p2_f32  v7, v1, attr2.y                      // 00000000006C: C81D0901
  v_mul_legacy_f32  v9, v6, v6                          // 000000000070: 0E120D06
  v_interp_p2_f32  v8, v1, attr2.x                      // 000000000074: C8210801
  v_mac_f32     v9, v7, v7                              // 000000000078: 3E120F07
  s_buffer_load_dwordx4  s[8:11], s[0:3], 0x28          // 00000000007C: C2840128
  v_mac_f32     v9, v8, v8                              // 000000000080: 3E121108
  s_buffer_load_dwordx4  s[12:15], s[0:3], 0x04         // 000000000084: C2860104
  s_buffer_load_dwordx4  s[20:23], s[0:3], 0x2c         // 000000000088: C28A012C
  v_rsq_f32     v9, v9                                  // 00000000008C: 7E125D09
  s_buffer_load_dwordx4  s[24:27], s[0:3], 0x00         // 000000000090: C28C0100
  s_buffer_load_dwordx4  s[28:31], s[0:3], 0x30         // 000000000094: C28E0130
  v_mul_legacy_f32  v6, v6, v9                          // 000000000098: 0E0C1306
  s_buffer_load_dwordx4  s[16:19], s[16:19], 0x00       // 00000000009C: C2881100
  s_buffer_load_dwordx4  s[32:35], s[0:3], 0x08         // 0000000000A0: C2900108
  v_mul_legacy_f32  v7, v7, v9                          // 0000000000A4: 0E0E1307
  s_waitcnt     lgkmcnt(0)                              // 0000000000A8: BF8C007F
  v_mul_legacy_f32  v10, s6, v6                         // 0000000000AC: 0E140C06
  s_buffer_load_dwordx4  s[36:39], s[0:3], 0x0c         // 0000000000B0: C292010C
  v_mul_legacy_f32  v8, v8, v9                          // 0000000000B4: 0E101308
  v_mac_f32     v10, s5, v7                             // 0000000000B8: 3E140E05
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x10           // 0000000000BC: C2800110
  v_mad_legacy_f32  v10, s4, v8, v10 clamp              // 0000000000C0: D280080A 042A1004
  v_interp_p1_f32  v9, v0, attr0.x                      // 0000000000C8: C8240000
  v_interp_p1_f32  v11, v0, attr0.y                     // 0000000000CC: C82C0100
  v_interp_p1_f32  v0, v0, attr0.z                      // 0000000000D0: C8000200
  v_mul_legacy_f32  v12, s10, v6                        // 0000000000D4: 0E180C0A
  v_mul_legacy_f32  v13, s12, v10                       // 0000000000D8: 0E1A140C
  v_mul_legacy_f32  v14, s13, v10                       // 0000000000DC: 0E1C140D
  v_mul_legacy_f32  v10, s14, v10                       // 0000000000E0: 0E14140E
  v_interp_p2_f32  v9, v1, attr0.x                      // 0000000000E4: C8250001
  v_interp_p2_f32  v11, v1, attr0.y                     // 0000000000E8: C82D0101
  v_interp_p2_f32  v0, v1, attr0.z                      // 0000000000EC: C8010201
  v_mac_f32     v12, s9, v7                             // 0000000000F0: 3E180E09
  v_mul_legacy_f32  v1, s22, v6                         // 0000000000F4: 0E020C16
  v_mul_legacy_f32  v13, v13, v9                        // 0000000000F8: 0E1A130D
  v_mul_legacy_f32  v14, v14, v11                       // 0000000000FC: 0E1C170E
  v_mul_legacy_f32  v10, v10, v0                        // 000000000100: 0E14010A
  v_mov_b32     v15, s24                                // 000000000104: 7E1E0218
  v_mov_b32     v16, s25                                // 000000000108: 7E200219
  v_mov_b32     v17, s26                                // 00000000010C: 7E22021A
  v_mad_legacy_f32  v12, s8, v8, v12 clamp              // 000000000110: D280080C 04321008
  v_mac_f32     v1, s21, v7                             // 000000000118: 3E020E15
  v_mul_legacy_f32  v6, s30, v6                         // 00000000011C: 0E0C0C1E
  v_mac_f32     v13, s16, v15                           // 000000000120: 3E1A1E10
  v_mac_f32     v14, s17, v16                           // 000000000124: 3E1C2011
  v_mac_f32     v10, s18, v17                           // 000000000128: 3E142212
  v_mul_legacy_f32  v15, s32, v12                       // 00000000012C: 0E1E1820
  v_mul_legacy_f32  v16, s33, v12                       // 000000000130: 0E201821
  v_mul_legacy_f32  v12, s34, v12                       // 000000000134: 0E181822
  v_mad_legacy_f32  v1, s20, v8, v1 clamp               // 000000000138: D2800801 04061014
  v_mac_f32     v6, s29, v7                             // 000000000140: 3E0C0E1D
  v_mac_f32     v13, v15, v9                            // 000000000144: 3E1A130F
  v_mac_f32     v14, v16, v11                           // 000000000148: 3E1C1710
  v_mac_f32     v10, v12, v0                            // 00000000014C: 3E14010C
  s_waitcnt     lgkmcnt(0)                              // 000000000150: BF8C007F
  v_mul_legacy_f32  v7, s36, v1                         // 000000000154: 0E0E0224
  v_mul_legacy_f32  v12, s37, v1                        // 000000000158: 0E180225
  v_mul_legacy_f32  v1, s38, v1                         // 00000000015C: 0E020226
  v_mad_legacy_f32  v6, s28, v8, v6 clamp               // 000000000160: D2800806 041A101C
  v_mac_f32     v13, v7, v9                             // 000000000168: 3E1A1307
  v_mac_f32     v14, v12, v11                           // 00000000016C: 3E1C170C
  v_mac_f32     v10, v1, v0                             // 000000000170: 3E140101
  v_mul_legacy_f32  v1, s0, v6                          // 000000000174: 0E020C00
  v_mul_legacy_f32  v7, s1, v6                          // 000000000178: 0E0E0C01
  v_mul_legacy_f32  v6, s2, v6                          // 00000000017C: 0E0C0C02
  v_mad_legacy_f32  v13, v1, v9, v13 clamp              // 000000000180: D280080D 04361301
  v_mad_legacy_f32  v14, v7, v11, v14 clamp             // 000000000188: D280080E 043A1707
  v_mad_legacy_f32  v10, v6, v0, v10 clamp              // 000000000190: D280080A 042A0106
  v_mul_legacy_f32  v0, v2, v13                         // 000000000198: 0E001B02
  v_mul_legacy_f32  v1, v3, v14                         // 00000000019C: 0E021D03
  v_mul_legacy_f32  v2, v4, v10                         // 0000000001A0: 0E041504
label_0069:
  s_mov_b64     exec, s[40:41]                          // 0000000001A4: BEFE0428
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 0000000001A8: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v5                       // 0000000001AC: 5E020B02
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000001B0: F8001C0F 00000100
  s_endpgm                                              // 0000000001B8: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   18
//  NumSRegs:                   44
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   92
//  CycleSimNWaves:             92
//  Code Size:                  444
//Assembler Counts:
//  num_32bit_ops                     : 93
//  num_64bit_ops                     : 9
//  num_alu                           : 74
//  num_fc                            : 26
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 7
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 2
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 4
//  num_inst_vop2                     : 44
//  num_inst_vop3                     : 9
//  num_inst_vopc                     : 1
//  num_inst_vintrp                   : 18
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 18
// m_uNumSRegs                       : 44
// m_uSCCodeSize                     : 444
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 92
// m_uCycleSimNWaves                 : 92

// Assembler Counts:
// num_32bit_ops                     : 93
// num_64bit_ops                     : 9
// num_alu                           : 74
// num_fc                            : 26
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 7
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 2
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 4
// num_inst_vop2                     : 44
// num_inst_vop3                     : 9
// num_inst_vopc                     : 1
// num_inst_vintrp                   : 18
// num_inst_smem                     : 12
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE DGSLLambert_mainTxTk[] =
{
     68,  88,  66,  67, 149,   9, 
    191, 145,  79, 198,  26, 133, 
    206, 209,   4, 118, 205, 133, 
    142,  76,   1,   0,   0,   0, 
    173,   8,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
     32,   1,   0,   0,  84,   1, 
      0,   0,  56,   8,   0,   0, 
     72,   8,   0,   0,  73,  83, 
     71,  78, 228,   0,   0,   0, 
      8,   0,   0,   0,   8,   0, 
      0,   0, 200,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0, 212,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 218,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 218,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0, 218,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      4,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      5,   0,   0,   0,   7,   0, 
      0,   0, 218,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      6,   0,   0,   0,  15,   0, 
      0,   0, 218,   0,   0,   0, 
      5,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      7,   0,   0,   0,   7,   0, 
      0,   0,  83,  86,  95,  80, 
     79,  83,  73,  84,  73,  79, 
     78,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 220,   6,   0,   0, 
     80,   0,   0,   0, 183,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 206,   0, 
      0,   0,  80,   0,   0,   0, 
    201,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,   5,   0,   0,   0, 
     89,   0,   0,   4,  70, 142, 
     32,   0,   1,   0,   0,   0, 
     21,   0,   0,   0,  90,   0, 
      0,   3,   0,  96,  16,   0, 
      0,   0,   0,   0,  88,  24, 
      0,   4,   0, 112,  16,   0, 
      0,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      4,   0,   0,   0,  69,   0, 
      0, 139, 194,   0,   0, 128, 
     67,  85,  21,   0, 242,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  16,  16,   0,   2,   0, 
      0,   0,  70, 126,  16,   0, 
      0,   0,   0,   0,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     56,   0,   0,   7, 130,   0, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  58,  16,  16,   0, 
      1,   0,   0,   0,  24,   0, 
      0,   7,  18,   0,  16,   0, 
      1,   0,   0,   0,  58,   0, 
     16,   0,   0,   0,   0,   0, 
      1,  64,   0,   0,   0,   0, 
      0,   0,  13,   0,   4,   3, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  16,   0,   0,   7, 
     18,   0,  16,   0,   1,   0, 
      0,   0,  70,  18,  16,   0, 
      3,   0,   0,   0,  70,  18, 
     16,   0,   3,   0,   0,   0, 
     68,   0,   0,   5,  18,   0, 
     16,   0,   1,   0,   0,   0, 
     10,   0,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   7, 
    114,   0,  16,   0,   1,   0, 
      0,   0,   6,   0,  16,   0, 
      1,   0,   0,   0,  70,  18, 
     16,   0,   3,   0,   0,   0, 
     16,  32,   0,   8, 130,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   9,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   8, 
    114,   0,  16,   0,   2,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   7, 114,   0,  16,   0, 
      2,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
     70,  18,  16,   0,   1,   0, 
      0,   0,  50,   0,   0,  11, 
    114,   0,  16,   0,   2,   0, 
      0,   0,  70, 130,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  16,  32, 
      0,   8, 130,   0,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
     10,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     56,   0,   0,   8, 114,   0, 
     16,   0,   3,   0,   0,   0, 
    246,  15,  16,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,   2,   0, 
      0,   0,  50,   0,   0,   9, 
    114,   0,  16,   0,   2,   0, 
      0,   0,  70,   2,  16,   0, 
      3,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   2,   0, 
      0,   0,  16,  32,   0,   8, 
    130,   0,  16,   0,   1,   0, 
      0,   0,  70, 130,  32,   0, 
      1,   0,   0,   0,  11,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  56,   0, 
      0,   8, 114,   0,  16,   0, 
      3,   0,   0,   0, 246,  15, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
     50,   0,   0,   9, 114,   0, 
     16,   0,   2,   0,   0,   0, 
     70,   2,  16,   0,   3,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   2,   0,   0,   0, 
     16,  32,   0,   8,  18,   0, 
     16,   0,   1,   0,   0,   0, 
     70, 130,  32,   0,   1,   0, 
      0,   0,  12,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  56,   0,   0,   8, 
    114,   0,  16,   0,   1,   0, 
      0,   0,   6,   0,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   1,   0,   0,   0, 
      4,   0,   0,   0,  50,  32, 
      0,   9, 114,   0,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   1,   0,   0,   0, 
     70,  18,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      2,   0,   0,   0,  56,   0, 
      0,   7, 114,  32,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   1,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    233,   0,   0,   0,  23,   0, 
      1,   0,  41,  30,  17,   0, 
    120,   1, 237,  87,  65, 107, 
     27,  71,  20, 126,  51,  59, 
    146,  86, 202, 234, 105,  45, 
    173, 227, 181,  42, 171, 178, 
    113,  90,  17, 236,  16,  18, 
     40,  37, 135, 165,  77,   2, 
    129,  36,  80,  19, 139,  18, 
    210, 141, 107,  41, 150, 137, 
    211,  40,  22, 150,  15,  62, 
      4,  85,   9, 161,  45, 193, 
    148,  80,  40, 228,   7,  20, 
    106, 200,  45, 135, 146,  67, 
    176, 146, 165, 135, 233, 173, 
    228, 151,   4, 122, 233, 161, 
    164, 125, 111, 179, 171,   8, 
    183, 185,   9,  90, 168,  62, 
    248, 222, 219, 111, 231, 205, 
    155,  55,  51,  18, 236,  43, 
     79,  64, 136, 165, 239, 103, 
     31, 179, 223, 179, 127, 126, 
    119, 222,   0,  72, 208, 179, 
     32, 178, 103,  60, 204, 178, 
      5, 120, 146,  99,  11,  80, 
    101, 195,   1,  18,  32,  79, 
    110, 129, 248, 148, 244,  71, 
    228, 121,  44, 230, 201, 147, 
     63, 158,  94,  95, 127, 116, 
    154,  30, 195, 152,   2, 209, 
    143, 120, 149, 152,  38, 158, 
     39,  22, 137, 156, 142,  17, 
    123,  70, 138,  13, 129, 235, 
    160, 165,   6,  80,  68, 206, 
    199, 243,  57, 158, 107, 176, 
    136,  12, 142,  27, 206,   1, 
     77,  54, 255, 140, 117,  34, 
    207, 125,  27, 184, 182,  56, 
     23, 123, 174, 147, 193, 107, 
    255, 219, 120,  93, 215,  27, 
     75, 215,  54, 184,  39,   6, 
    223, 199,  48, 144,  24, 191, 
    170,  69, 247, 200, 231, 200, 
    184,  30, 105,  62,  11, 222, 
    219,  51, 226, 219, 240,  39, 
    193, 225, 135,  33, 196, 154, 
    107,  72,  10,  74, 102, 146, 
    151, 116, 219,  54, 121, 227, 
    125,   0, 151,   6, 254,  39, 
    136, 207, 148, 207, 130, 127, 
    139,  75, 196, 232, 120,  67, 
    196, 227,  55, 216,  64, 175, 
    207, 124, 224, 194, 239, 172, 
     98,  45,  14, 104, 131, 117, 
    120, 121,  67, 154, 255,  20, 
      6, 172, 200,  67, 114,  37, 
     87, 138, 198,  13, 240,  73, 
    251,  67, 250,  10, 233,  43, 
     67, 122, 149, 244, 234, 144, 
    110, 144, 110,  12, 116, 148, 
     63,  23, 174,  39,  19, 124, 
    215, 244, 178, 251,  95, 230, 
    184, 198, 209, 112,  92, 227, 
    104,  56, 174, 113,  52,  28, 
    215,  56,  26, 142, 107,  28, 
     13, 199,  53, 142, 134, 227, 
     26,  71,  70, 232, 170, 189, 
    253, 110, 230, 213,  62, 125, 
    171,  61, 151, 198,  31, 251, 
    160,  76,  13,   9,  75,  11, 
    149, 214,  34, 145, 213,  95, 
    194, 110,  31, 114, 189, 151, 
     82, 214, 193,  22, 189, 103, 
     96, 184,  90,  24, 211, 186, 
    157, 219, 237,  39, 178,  25, 
    236, 101, 212, 237, 234, 141, 
    189, 251, 159, 194, 189, 126, 
    183, 250, 234, 235,  48,  87, 
    198, 213, 144,  46, 105, 145, 
    153,  14, 231, 207, 139, 187, 
      1, 152,  21,  45, 210,  51, 
     58, 153, 205, 163,  48, 103, 
    117,  42, 151, 247, 170, 226, 
     94,  96,  78, 228,  61,  37, 
    190,  10,  22, 196, 253,  32, 
    125,  53, 223,   5, 177,  27, 
     28,  23, 223,   6, 201, 130, 
    133,  48, 241,  77,  96, 138, 
      7,  65, 170, 128, 200, 121, 
    146, 150, 131, 150, 248,  46, 
     48,  11,  54,  38, 208, 241, 
    168, 158,  32,  99, 246,  94, 
     40, 251,  40, 125,  18, 207, 
    107,  16,  11, 154,  62, 152, 
    117, 198, 114, 209, 114, 138, 
    152, 117,  74, 136, 142, 131, 
      2, 142, 104,  33,  22, 181, 
    144,  66, 167, 209, 245,  14, 
     91,  18, 179, 133,  34, 226, 
     84,   9,  51, 194,  65,  87, 
    150, 187, 211, 178, 210,  45, 
    202, 185, 174,  69, 249,  76, 
    251, 132, 154,  68, 233, 149, 
     45,  11, 237, 114, 209, 155, 
    168, 148, 188, 252, 156, 227, 
     85, 220,  50, 206, 186,  21, 
    156, 115,  93, 218,  67, 239, 
    133,  99,  39, 213,  12,  90, 
     94, 174,  80, 244, 236, 169, 
    146, 103,   9, 199,  11, 247, 
     43,  17, 143,  72,  23, 223, 
    147,  18, 147,  20,  87, 178, 
    139,  42,  69,  49,  22, 197, 
      8, 138,   1,  90,  95,  88, 
    136, 146, 242, 103, 105,  92, 
     20,  62,  80,  72,  62,  53, 
    117,  74, 241, 126, 146, 226, 
    168, 146, 239,   0,  26,  51, 
     18, 213, 164, 194, 170, 162, 
     51,  61, 248, 157,  14, 119, 
    250, 211, 236, 185,  65,  56, 
      8,  51,  12,  24,  32,  84, 
     74, 112,  75,  53,  64,  56, 
    141, 222, 197,  61,  47,  67, 
    114,  32, 189, 163, 150, 235, 
     13,  34, 241, 107, 212, 128, 
     28,  39, 190, 238, 153, 141, 
     48, 239, 100, 244, 204, 224, 
    118,  66,  65, 146,  44, 192, 
    103,  63, 181,  46, 149, 127, 
    251,  37, 110,  85, 224, 195, 
     40, 143,  27, 249,  10, 113, 
    120, 109, 128,  31, 216, 252, 
     13, 171,  81, 252,  82, 228, 
    217, 113,  82,  12,  87,  35, 
    112,  83,  74, 232,  69, 227, 
     59, 145, 231, 189,  30,  34, 
     30, 172, 227,  97,  52, 190, 
     66, 228,  74, 207, 156, 242, 
     47,  53, 219, 155,  29, 255, 
    114,  99, 115, 103, 241, 227, 
    218, 185, 197, 229, 122, 171, 
    125, 179, 217, 241,  47, 108, 
    108, 119, 252, 179,  27,  91, 
    205, 107, 219, 151, 107,  23, 
    252, 206, 214,  53, 127, 249, 
    122, 125, 173, 185, 213, 241, 
    207, 108, 182, 218,  27,  55, 
    155, 107, 225, 164,  79, 110, 
     53, 207, 158,  91, 190, 120, 
    177, 222, 106,  52, 183, 182, 
     63, 111, 213,  55, 110, 213, 
    118, 106,  95,  28, 107, 175, 
     53, 224,  47, 156,   4,  32, 
    223,   0,   0,   0,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     91, 182, 109,  82,  30, 243, 
    201,   4,  88,  80,  68,  80, 
     93,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  68,  71,  83,  76,  76, 
     97, 109,  98, 101, 114, 116, 
     95, 109,  97, 105, 110,  84, 
    120,  84, 107,  46, 112, 100, 
     98
};
