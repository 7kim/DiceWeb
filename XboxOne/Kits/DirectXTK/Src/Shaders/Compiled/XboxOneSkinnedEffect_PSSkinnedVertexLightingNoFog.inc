#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[62]
// Embedded Data:
//  0x0000003e - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000039 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, v0.xyzw
mad o0.xyz, v1.xyzx, r0.wwww, r0.xyzx
mov o0.w, r0.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[62], bundle is:[169] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneSkinnedEffect_PSSkinnedVertexLightingNoFog.pdb
// Shader Semantic Hash      : 0xf7732a536fbb27d2
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask  7, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}

codeLenInByte        = 160 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 2;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
NumVgprs             = 12;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000000

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000003
SPIC:NUM_INTERP             = 3
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x8C, dwords=0x23)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, off, off, off done vm         // 000000000008: F8001801 00000002
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, off, off done vm          // 000000000008: F8001803 00000302
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v5, off, off done vm          // 000000000008: F8001803 00000502
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000000: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000004: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: 5C000702
  v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000004: 5C020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: 5A000702
  v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000004: 5A020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: 60000702
  v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000004: 60020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: 62000702
  v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000004: 62020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v2, v3, v4, v5 done vm            // 000000000008: F800180F 05040302
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_load_dwordx8  s[4:11], s[0:1], 0x00                 // 000000000008: C0C20100
  s_load_dwordx4  s[12:15], s[0:1], 0x08                // 00000000000C: C0860108
  s_mov_b32     m0, s2                                  // 000000000010: BEFC0302
  v_interp_p1_f32  v2, v0, attr2.x                      // 000000000014: C8080800
  v_interp_p1_f32  v3, v0, attr2.y                      // 000000000018: C80C0900
  v_interp_p2_f32  v2, v1, attr2.x                      // 00000000001C: C8090801
  v_interp_p2_f32  v3, v1, attr2.y                      // 000000000020: C80D0901
  s_waitcnt     lgkmcnt(0)                              // 000000000024: BF8C007F
  image_sample  v[2:5], v[2:3], s[4:11], s[12:15] dmask:0xf // 000000000028: F0800F00 00610202
  v_interp_p1_f32  v6, v0, attr0.x                      // 000000000030: C8180000
  v_interp_p1_f32  v7, v0, attr0.y                      // 000000000034: C81C0100
  v_interp_p1_f32  v8, v0, attr0.z                      // 000000000038: C8200200
  v_interp_p1_f32  v9, v0, attr0.w                      // 00000000003C: C8240300
  v_interp_p2_f32  v6, v1, attr0.x                      // 000000000040: C8190001
  v_interp_p2_f32  v7, v1, attr0.y                      // 000000000044: C81D0101
  v_interp_p2_f32  v8, v1, attr0.z                      // 000000000048: C8210201
  v_interp_p2_f32  v9, v1, attr0.w                      // 00000000004C: C8250301
  v_interp_p1_f32  v10, v0, attr1.x                     // 000000000050: C8280400
  v_interp_p1_f32  v11, v0, attr1.y                     // 000000000054: C82C0500
  v_interp_p1_f32  v0, v0, attr1.z                      // 000000000058: C8000600
  s_waitcnt     vmcnt(0)                                // 00000000005C: BF8C0F70
  v_mul_legacy_f32  v2, v2, v6                          // 000000000060: 0E040D02
  v_mul_legacy_f32  v3, v3, v7                          // 000000000064: 0E060F03
  v_mul_legacy_f32  v4, v4, v8                          // 000000000068: 0E081104
  v_mul_legacy_f32  v5, v5, v9                          // 00000000006C: 0E0A1305
  v_interp_p2_f32  v10, v1, attr1.x                     // 000000000070: C8290401
  v_interp_p2_f32  v11, v1, attr1.y                     // 000000000074: C82D0501
  v_interp_p2_f32  v0, v1, attr1.z                      // 000000000078: C8010601
  v_mac_f32     v2, v10, v5                             // 00000000007C: 3E040B0A
  v_mac_f32     v3, v11, v5                             // 000000000080: 3E060B0B
  v_mac_f32     v4, v0, v5                              // 000000000084: 3E080B00
  s_mov_b64     exec, s[16:17]                          // 000000000088: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 00000000008C: 5E000702
  v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000090: 5E020B04
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000094: F8001C0F 00000100
  s_endpgm                                              // 00000000009C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   12
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   80
//  CycleSimNWaves:             80
//  Code Size:                  160
//Assembler Counts:
//  num_32bit_ops                     : 36
//  num_64bit_ops                     : 2
//  num_alu                           : 27
//  num_fc                            : 9
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 9
//  num_inst_vop3                     : 3
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 18
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 12
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 160
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 80
// m_uCycleSimNWaves                 : 80

// Assembler Counts:
// num_32bit_ops                     : 36
// num_64bit_ops                     : 2
// num_alu                           : 27
// num_fc                            : 9
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 9
// num_inst_vop3                     : 3
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 18
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE SkinnedEffect_PSSkinnedVertexLightingNoFog[] =
{
     68,  88,  66,  67, 231,   4, 
     99,  72, 241,  78,  74, 157, 
     87, 121,  13,  11, 148,  85, 
    195, 145,   1,   0,   0,   0, 
      7,   5,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    156,   0,   0,   0, 208,   0, 
      0,   0, 124,   4,   0,   0, 
    140,   4,   0,   0,  73,  83, 
     71,  78,  96,   0,   0,   0, 
      3,   0,   0,   0,   8,   0, 
      0,   0,  80,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0,  80,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,   7, 
      0,   0,  86,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88, 164,   3,   0,   0, 
     80,   0,   0,   0, 233,   0, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0,  62,   0, 
      0,   0,  80,   0,   0,   0, 
     57,   0,   0,   0, 106,   8, 
      0,   1,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3, 242,  16, 
     16,   0,   0,   0,   0,   0, 
     98,  16,   0,   3, 114,  16, 
     16,   0,   1,   0,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   2,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   2,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,   7, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  14, 
     16,   0,   0,   0,   0,   0, 
     70,  30,  16,   0,   0,   0, 
      0,   0,  50,   0,   0,   9, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,  18,  16,   0, 
      1,   0,   0,   0, 246,  15, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  54,   0,   0,   5, 
    130,  32,  16,   0,   0,   0, 
      0,   0,  58,   0,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    171,   0,   0,   0,  23,   0, 
      1,   0,  41, 216,  15,   0, 
    120,   1, 237,  87, 191, 111, 
    211,  64,  20, 126, 103,  95, 
    130,  19,  55,  78, 249,  37, 
     82,  17, 164,  34,   2,  20, 
     68,  88, 186,  32, 132,  34, 
    104,  11,  12, 173, 160,  34, 
     21, 170,  42, 171, 180, 105, 
    220,  52, 162,  77, 162,  56, 
     67, 167,  80,  22, 166,  12, 
     29,  41,  18,  18,  67,  87, 
    118,  36,  80,  18,  49, 221, 
    204, 196, 192, 200,  31, 192, 
    128,   4,   3,  42, 188, 231, 
    220, 181,  78, 160, 155,  37, 
    144, 240,  39, 125, 239, 249, 
    243, 221,  61,  63, 223, 179, 
    165, 119,  31, 147, 224,  97, 
    234, 228, 155, 186, 231,  95, 
    190, 222, 249, 140,  62, 130, 
    100, 210,  19, 158,  39, 200, 
      2,  52,  44, 178,   0,  99, 
    100, 104, 130,   6,  48, 132, 
    238,   4, 242,  21, 242,  38, 
    146, 198,  20, 199, 199, 245, 
    137,  23,  59, 230,   4,  94, 
      2, 133,  32, 206,  74, 102, 
    144, 184,  28,  78,  35,  99, 
     72,  10,  71,  80, 158, 160, 
    147,  65, 112,  50,   3, 160, 
     53, 106, 252,  24, 146,  98, 
     17, 200, 251,  99, 128,  67, 
    230, 207, 184, 128, 164, 252, 
     15,   3, 229, 166,  98, 145, 
    167, 103,  18, 232, 125, 255, 
     54, 122, 121, 249, 237,  65, 
    157,   8,  84,  15,  63, 168, 
    116, 106, 222,  53,  89,  71, 
    181, 103,  51,  82, 171,  90, 
    118, 145, 135, 225,  39,  98, 
    112, 207, 148, 166, 122,  68, 
    161, 247,  81,  69, 217,  41, 
      0,   3, 189, 118,  14,  96, 
    152, 238, 252,  31,  80, 223, 
     42, 237,   5, 237,  47, 189, 
    186, 252, 205,  60, 168, 113, 
    220,  21, 196,  86, 135, 184, 
    157, 130, 239, 164, 148, 102, 
    168, 123, 181, 233, 105, 157, 
     52,   5, 244, 107, 252,  57, 
    181,  35, 176, 200,  77, 109, 
     49, 153, 198, 245,  88,  92, 
    212,  54, 106, 219, 167,  23, 
     80,  47, 248, 244,  18, 234, 
     37, 159,  46, 160,  46,  40, 
    173, 226,  39, 189, 231, 241, 
      8, 213,  26, 111,  54, 255, 
    101, 134,  57,   6, 195,  48, 
    199,  96,  24, 230,  24,  12, 
    195,  28, 131,  97, 152,  99, 
     48,  12, 115,  12, 134,  97, 
    142, 129,  17, 154, 124, 187, 
    221, 140, 239, 181, 129, 189, 
    239,  26, 236,  89,  87, 211, 
    127, 180, 193,  48,   4, 196, 
    134,   4,  51,  98, 130, 197, 
     18, 226,   9, 180,  58, 144, 
    220, 250, 162, 105, 203, 184, 
     34,  37, 128, 165,   5, 104, 
    163,   2, 244, 140,  96,  48, 
     34,  24,  59,  35, 152, 118, 
     86,  48, 253, 188,   0,  62, 
     38,  32, 114,  69,  96,  19, 
     47, 106, 201,  86,  71,  75, 
    112,  75,  79,  70,  45, 126, 
    212, 176,  34, 199, 227,  22, 
    227, 151,   4, 139, 100,   5, 
    139,  50,  17,  55, 121, 206, 
     52, 163,  57,  48, 141, 220, 
     48, 223, 107,  99,  47, 217, 
    215, 139,   2,  60, 237, 140, 
    144, 239,  53, 178, 253,  48, 
    188,   9, 251, 240,  20, 103, 
    116,  92, 216, 199, 174,  60, 
    147, 180, 164,  79,  33, 233, 
    252, 197,  49,  57, 194, 135, 
    139, 111, 171, 249, 203, 238, 
     55, 186,  38, 124, 146, 243, 
    222,  73,  63, 138, 236,  63, 
    167, 236, 146, 249,  13,  92, 
     54, 231,  95, 229,  58, 234, 
    215, 169,  71, 183, 212, 233, 
     87, 222, 207, 200, 121, 105, 
    233,  41,  87,  19,  57, 152, 
    199,  13,  57, 222,  64,  82, 
    166, 147, 215, 237,   7,  78, 
    173, 234, 218, 243, 133, 234, 
    102, 246, 214, 220, 221, 108, 
    126, 121, 163, 182, 238, 184, 
    246, 116, 185, 225, 218,  83, 
    229, 186, 179, 210, 152, 159, 
    155, 182, 221, 250, 138, 157, 
     95,  91,  46,  58, 117, 215, 
    158, 172, 110, 212, 202, 235, 
     78, 209,  91, 116, 191, 226, 
    228,  31, 151,  43,  21, 167, 
    120, 123, 117,  21,  39,  63, 
    154, 205,  75, 253, 208, 169, 
     55, 156, 205, 153, 114, 105, 
    173,  81, 174, 148, 238,  85, 
    239,  84,  75,  87, 107, 197, 
      2, 252,   2,  44,  64, 243, 
     77,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 210,  39, 
    187, 111,  83,  42, 115, 247, 
     88,  80,  68,  80, 115,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  83, 
    107, 105, 110, 110, 101, 100, 
     69, 102, 102, 101,  99, 116, 
     95,  80,  83,  83, 107, 105, 
    110, 110, 101, 100,  86, 101, 
    114, 116, 101, 120,  76, 105, 
    103, 104, 116, 105, 110, 103, 
     78, 111,  70, 111, 103,  46, 
    112, 100,  98
};
