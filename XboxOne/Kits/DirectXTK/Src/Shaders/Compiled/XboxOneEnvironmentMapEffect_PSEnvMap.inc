#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[117]
// Embedded Data:
//  0x00000075 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000070 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texturecube)(float,float,float,float) r0.xyz, v3.xyzx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v0.xyzw
mad r0.xyz, r0.xyzx, r1.wwww, -r1.xyzx
mad r0.xyz, v1.xyzx, r0.xyzx, r1.xyzx
mad r1.xyz, cb0[11].xyzx, r1.wwww, -r0.xyzx
mad o0.xyz, v1.wwww, r1.xyzx, r0.xyzx
mov o0.w, r1.w
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[117], bundle is:[206] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneEnvironmentMapEffect_PSEnvMap.pdb
// Shader Semantic Hash      : 0x2a2c2decf4332c36
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 0, channelMask 15, param0, paramSlot0, DefaultVal={0,0,0,0}
;   [1] generic,  usageIdx 1, channelMask 15, param1, paramSlot1, DefaultVal={0,0,0,0}
;   [2] generic,  usageIdx 2, channelMask  3, param2, paramSlot2, DefaultVal={0,0,0,0}
;   [3] generic,  usageIdx 3, channelMask  7, param3, paramSlot3, DefaultVal={0,0,0,0}

codeLenInByte        = 336 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 5;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_RESOURCE 1, offset 0x8:15 dwords
;  extUserElements 1[2] = IMM_SAMPLER 0, offset 0x10:19 dwords
;  extUserElements 1[3] = IMM_SAMPLER 1, offset 0x14:23 dwords
;  extUserElements 1[4] = IMM_CONST_BUFFER 0, offset 0x18:27 dwords
NumVgprs             = 13;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000003
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000004
SPIC:NUM_INTERP             = 4
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

dx9TexCubeMask           = 0x00000002

; export table for mrt0 [patch@(bytes=0x13C, dwords=0x4F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, off, off, off done vm         // 000000000008: F8001801 00000005
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, off, off done vm          // 000000000008: F8001803 00000605
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v8, off, off done vm          // 000000000008: F8001803 00000805
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 000000000000: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000004: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v5, v6                      // 000000000000: 5C000D05
  v_cvt_pknorm_u16_f32  v1, v7, v8                      // 000000000004: 5C021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v5, v6                      // 000000000000: 5A000D05
  v_cvt_pknorm_i16_f32  v1, v7, v8                      // 000000000004: 5A021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v5, v6                          // 000000000000: 60000D05
  v_cvt_pk_u16_u32  v1, v7, v8                          // 000000000004: 60021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v5, v6                          // 000000000000: 62000D05
  v_cvt_pk_i16_i32  v1, v7, v8                          // 000000000004: 62021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v5, v6, v7, v8 done vm            // 000000000008: F800180F 08070605
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[28:29], exec                          // 000000000000: BE9C047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[4:19], s[0:1], 0x00                // 00000000000C: C1020100
  s_load_dwordx8  s[20:27], s[0:1], 0x10                // 000000000010: C0CA0110
  v_interp_p1_f32  v2, v0, attr3.x                      // 000000000014: C8080C00
  v_interp_p1_f32  v3, v0, attr3.y                      // 000000000018: C80C0D00
  v_interp_p1_f32  v4, v0, attr3.z                      // 00000000001C: C8100E00
  v_interp_p2_f32  v2, v1, attr3.x                      // 000000000020: C8090C01
  v_interp_p2_f32  v3, v1, attr3.y                      // 000000000024: C80D0D01
  v_interp_p2_f32  v4, v1, attr3.z                      // 000000000028: C8110E01
  v_cubema_f32  v5, v2, v3, v4                          // 00000000002C: D28E0005 04120702
  v_interp_p1_f32  v6, v0, attr2.x                      // 000000000034: C8180800
  v_interp_p1_f32  v7, v0, attr2.y                      // 000000000038: C81C0900
  v_cubetc_f32  v8, v2, v3, v4                          // 00000000003C: D28C0008 04120702
  v_cubesc_f32  v9, v2, v3, v4                          // 000000000044: D28A0009 04120702
  v_rcp_f32     v5, abs(v5)                             // 00000000004C: D3540105 00000105
  v_interp_p2_f32  v6, v1, attr2.x                      // 000000000054: C8190801
  v_interp_p2_f32  v7, v1, attr2.y                      // 000000000058: C81D0901
  v_cubeid_f32  v4, v2, v3, v4                          // 00000000005C: D2880004 04120702
  v_madak_f32   v3, v8, v5, 0x3fc00000                  // 000000000064: 42060B08 3FC00000
  v_madak_f32   v2, v9, v5, 0x3fc00000                  // 00000000006C: 42040B09 3FC00000
  s_waitcnt     lgkmcnt(0)                              // 000000000074: BF8C007F
  image_sample  v[5:8], v[6:7], s[4:11], s[20:23] dmask:0xf // 000000000078: F0800F00 00A10506
  image_sample  v[2:5], v[2:3], s[12:19], s[24:27] dmask:0x7 // 000000000080: F0800700 00C30202
  s_load_dwordx4  s[0:3], s[0:1], 0x18                  // 000000000088: C0800118
  s_waitcnt     lgkmcnt(0)                              // 00000000008C: BF8C007F
  s_buffer_load_dwordx4  s[0:3], s[0:3], 0x2c           // 000000000090: C280012C
  v_interp_p1_f32  v9, v0, attr0.x                      // 000000000094: C8240000
  v_interp_p1_f32  v10, v0, attr0.y                     // 000000000098: C8280100
  v_interp_p1_f32  v11, v0, attr0.z                     // 00000000009C: C82C0200
  v_interp_p1_f32  v12, v0, attr0.w                     // 0000000000A0: C8300300
  v_interp_p2_f32  v9, v1, attr0.x                      // 0000000000A4: C8250001
  v_interp_p2_f32  v10, v1, attr0.y                     // 0000000000A8: C8290101
  v_interp_p2_f32  v11, v1, attr0.z                     // 0000000000AC: C82D0201
  v_interp_p2_f32  v12, v1, attr0.w                     // 0000000000B0: C8310301
  s_waitcnt     vmcnt(1)                                // 0000000000B4: BF8C0F71
  v_mul_legacy_f32  v5, v5, v9                          // 0000000000B8: 0E0A1305
  v_mul_legacy_f32  v6, v6, v10                         // 0000000000BC: 0E0C1506
  v_mul_legacy_f32  v7, v7, v11                         // 0000000000C0: 0E0E1707
  v_mul_legacy_f32  v8, v8, v12                         // 0000000000C4: 0E101908
  v_interp_p1_f32  v9, v0, attr1.x                      // 0000000000C8: C8240400
  v_interp_p1_f32  v10, v0, attr1.y                     // 0000000000CC: C8280500
  v_interp_p1_f32  v11, v0, attr1.z                     // 0000000000D0: C82C0600
  s_waitcnt     vmcnt(0)                                // 0000000000D4: BF8C0F70
  v_mad_legacy_f32  v2, v2, v8, -v5                     // 0000000000D8: D2800002 84161102
  v_mad_legacy_f32  v3, v3, v8, -v6                     // 0000000000E0: D2800003 841A1103
  v_mad_legacy_f32  v4, v4, v8, -v7                     // 0000000000E8: D2800004 841E1104
  v_interp_p2_f32  v9, v1, attr1.x                      // 0000000000F0: C8250401
  v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000F4: C8290501
  v_interp_p2_f32  v11, v1, attr1.z                     // 0000000000F8: C82D0601
  v_mac_f32     v5, v9, v2                              // 0000000000FC: 3E0A0509
  v_mac_f32     v6, v10, v3                             // 000000000100: 3E0C070A
  v_mac_f32     v7, v11, v4                             // 000000000104: 3E0E090B
  v_interp_p1_f32  v0, v0, attr1.w                      // 000000000108: C8000700
  s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8C007F
  v_mad_legacy_f32  v2, s0, v8, -v5                     // 000000000110: D2800002 84161000
  v_mad_legacy_f32  v3, s1, v8, -v6                     // 000000000118: D2800003 841A1001
  v_mad_legacy_f32  v4, s2, v8, -v7                     // 000000000120: D2800004 841E1002
  v_interp_p2_f32  v0, v1, attr1.w                      // 000000000128: C8010701
  v_mac_f32     v5, v0, v2                              // 00000000012C: 3E0A0500
  v_mac_f32     v6, v0, v3                              // 000000000130: 3E0C0700
  v_mac_f32     v7, v0, v4                              // 000000000134: 3E0E0900
  s_mov_b64     exec, s[28:29]                          // 000000000138: BEFE041C
  v_cvt_pkrtz_f16_f32  v0, v5, v6                       // 00000000013C: 5E000D05
  v_cvt_pkrtz_f16_f32  v1, v7, v8                       // 000000000140: 5E021107
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000144: F8001C0F 00000100
  s_endpgm                                              // 00000000014C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   13
//  NumSRegs:                   32
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   85
//  CycleSimNWaves:             85
//  Code Size:                  336
//Assembler Counts:
//  num_32bit_ops                     : 54
//  num_64bit_ops                     : 14
//  num_alu                           : 51
//  num_fc                            : 14
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 2
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 6
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 4
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 0
//  num_inst_vop2                     : 14
//  num_inst_vop3                     : 13
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 26
//  constant_literal_operands         : 0
//  num_tex                           : 3
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 13
// m_uNumSRegs                       : 32
// m_uSCCodeSize                     : 336
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 85
// m_uCycleSimNWaves                 : 85

// Assembler Counts:
// num_32bit_ops                     : 54
// num_64bit_ops                     : 14
// num_alu                           : 51
// num_fc                            : 14
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 2
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 6
// num_inst_sopc                     : 0
// num_inst_sop1                     : 4
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 0
// num_inst_vop2                     : 14
// num_inst_vop3                     : 13
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 26
// num_inst_smem                     : 4
// constant_literal_operands         : 0
// num_tex                           : 3
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE EnvironmentMapEffect_PSEnvMap[] =
{
     68,  88,  66,  67, 121, 102, 
    222, 131,  90, 100,  99, 131, 
    213, 242, 202, 144,  81, 110, 
    180,  29,   1,   0,   0,   0, 
    130,   6,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    180,   0,   0,   0, 232,   0, 
      0,   0,   4,   6,   0,   0, 
     20,   6,   0,   0,  73,  83, 
     71,  78, 120,   0,   0,   0, 
      4,   0,   0,   0,   8,   0, 
      0,   0, 104,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,  15, 
      0,   0, 104,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,  15,  15, 
      0,   0, 110,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      2,   0,   0,   0,   3,   3, 
      0,   0, 110,   0,   0,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      3,   0,   0,   0,   7,   7, 
      0,   0,  67,  79,  76,  79, 
     82,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
     79,  83,  71,  78,  44,   0, 
      0,   0,   1,   0,   0,   0, 
      8,   0,   0,   0,  32,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   3,   0, 
      0,   0,   0,   0,   0,   0, 
     15,   0,   0,   0,  83,  86, 
     95,  84,  97, 114, 103, 101, 
    116,   0, 171, 171,  83,  72, 
     69,  88,  20,   5,   0,   0, 
     80,   0,   0,   0,  69,   1, 
      0,   0,  53,  16,   0,   0, 
      5,   0,   0,   0, 117,   0, 
      0,   0,  80,   0,   0,   0, 
    112,   0,   0,   0, 106,   8, 
      0,   1,  89,   0,   0,   4, 
     70, 142,  32,   0,   0,   0, 
      0,   0,  24,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   0,   0,   0,   0, 
     90,   0,   0,   3,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     88,  24,   0,   4,   0, 112, 
     16,   0,   0,   0,   0,   0, 
     85,  85,   0,   0,  88,  48, 
      0,   4,   0, 112,  16,   0, 
      1,   0,   0,   0,  85,  85, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   0,   0, 
      0,   0,  98,  16,   0,   3, 
    242,  16,  16,   0,   1,   0, 
      0,   0,  98,  16,   0,   3, 
     50,  16,  16,   0,   2,   0, 
      0,   0,  98,  16,   0,   3, 
    114,  16,  16,   0,   3,   0, 
      0,   0, 101,   0,   0,   3, 
    242,  32,  16,   0,   0,   0, 
      0,   0, 104,   0,   0,   2, 
      2,   0,   0,   0,  69,   0, 
      0, 139, 130,   1,   0, 128, 
     67,  85,  21,   0, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,  18,  16,   0,   3,   0, 
      0,   0,  70, 126,  16,   0, 
      1,   0,   0,   0,   0,  96, 
     16,   0,   1,   0,   0,   0, 
     69,   0,   0, 139, 194,   0, 
      0, 128,  67,  85,  21,   0, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  16,  16,   0, 
      2,   0,   0,   0,  70, 126, 
     16,   0,   0,   0,   0,   0, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  56,   0,   0,   7, 
    242,   0,  16,   0,   1,   0, 
      0,   0,  70,  14,  16,   0, 
      1,   0,   0,   0,  70,  30, 
     16,   0,   0,   0,   0,   0, 
     50,   0,   0,  10, 114,   0, 
     16,   0,   0,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0, 246,  15,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16, 128,  65,   0,   0,   0, 
      1,   0,   0,   0,  50,   0, 
      0,   9, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,  18, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  50,   0, 
      0,  11, 114,   0,  16,   0, 
      1,   0,   0,   0,  70, 130, 
     32,   0,   0,   0,   0,   0, 
     11,   0,   0,   0, 246,  15, 
     16,   0,   1,   0,   0,   0, 
     70,   2,  16, 128,  65,   0, 
      0,   0,   0,   0,   0,   0, 
     50,   0,   0,   9, 114,  32, 
     16,   0,   0,   0,   0,   0, 
    246,  31,  16,   0,   1,   0, 
      0,   0,  70,   2,  16,   0, 
      1,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   1,   0, 
      0,   0,  62,   0,   0,   1, 
     53,  16,   0,   0, 208,   0, 
      0,   0,  23,   0,   1,   0, 
     41, 195,  16,   0, 120,   1, 
    237,  87,  75, 107,  83,  65, 
     20,  62, 115, 115,  95, 121, 
    221,  36,  90,  53,  45, 241, 
      1,  86, 168, 146, 136,  18, 
    169, 224,  34, 106,  31, 184, 
     40, 210, 106,  43, 148, 114, 
    169, 109, 218,  84,   3, 109, 
     18, 147,  42, 133,  66, 141, 
    208,  69, 145,  34,  46,  93, 
    116,  35, 248,  19,  92,  39, 
    209, 110,   6, 209,  77,  43, 
    248,  23,  92, 116,  33, 232, 
    194,  69, 169, 158,  51, 153, 
    105,  99, 173, 187, 128,  34, 
    249, 224, 155,  51, 223, 204, 
    156, 115, 207, 220, 185,  23, 
    230, 172, 135,  65, 224, 225, 
    226, 173, 175, 100,  87,  62, 
    109, 166, 106,  12, 192, 192, 
     62,  26,  97,   9,  47, 130, 
    212,   2,  76, 132, 168,   5, 
    232, 162, 134,  22, 104,   0, 
     52, 117,  10,  57, 132, 250, 
     26,  90, 154,  83, 252, 240, 
    190, 216, 147,  76,  46, 246, 
     96,  23,  58, 144,  14, 242, 
    142, 100,  55, 146, 116,  82, 
     90,  10,  71, 192, 144, 187, 
     48, 169,  65, 232, 212, 236, 
      3, 249, 200, 180,  68, 108, 
    181, 198, 131,  84, 177,   4, 
     50, 212,  28, 140,  62, 164, 
    138, 113,  16,  40,  55, 149, 
     15, 197, 164, 103,  18, 104, 
    191, 127,  27, 245,  61, 214, 
    179,  83, 123,  86, 231,  68, 
    160, 243, 104,   4, 229, 174, 
    134,  62, 203, 141, 168, 243, 
    221, 150, 154, 220, 105, 111, 
     53, 228, 159, 240,   3,  17, 
    163,  78,   3, 148, 166,  51, 
     48, 161, 254, 145, 152, 236, 
     36, 128, 141,  86,  59,  13, 
    128, 223, 153, 233, 185,  12, 
     16, 165, 153, 255,  27, 234, 
     59,  36,  75, 167,  67, 191, 
    152, 252, 109,   4, 212, 252, 
     32,  53,  80, 174,  18, 159, 
     71, 225,  59,  41, 165,  25, 
    234, 250, 217, 212, 181, 135, 
    180, 248,  25,  26,  52, 190, 
     91,  35,   8, 227,  86,  68, 
     27,  15, 197, 208,  31,  15, 
     23, 181, 139, 218, 109, 208, 
     99, 168, 199,  26, 244,   4, 
    234, 137,   6, 157,  70, 157, 
     86,  90, 197,  15, 137, 231, 
     89,  54, 157,  53,  14,  46, 
    253, 203, 108, 229, 216,  28, 
    182, 114, 108,  14,  91,  57, 
     54, 135, 173,  28, 155, 195, 
     86, 142, 205,  97,  43, 199, 
    230, 176, 149,  99, 115,  72, 
    119, 203,  37, 125, 173, 178, 
    228, 219, 169, 104, 158, 237, 
     10,  48, 237,  77, 152, 189, 
    171,  65, 192, 230,  16,  12, 
    112, 112, 194, 156,   5, 188, 
    156,   5, 131, 156,  57,  17, 
    110, 192, 179,  13, 205,  58, 
    164, 131,  29, 229, 224, 141, 
    113,  27,  86, 133, 246, 194, 
     83,  97,  13,  54, 178, 105, 
    224,  29, 144, 217, 237, 156, 
    121, 143, 115,  29,  86, 196, 
    184, 237,  55, 177, 126, 171, 
     93, 245, 250, 117,  97,  31, 
    195, 106,  21,  66, 229,  47, 
    166, 241,  18, 192,  42, 127, 
    209, 180, 117, 136, 178, 114, 
    141, 198, 227, 172, 252,  22, 
    160, 147,   3, 235, 226, 160, 
    197,  57, 120,  46, 112,   6, 
    103,  56,  99, 103,  57, 211, 
     18, 156, 121,  46, 242,   7, 
    161, 213, 170, 113, 216, 231, 
    152,  71,   2, 142, 117, 204, 
    113, 236, 246, 176,   3,  58, 
    250,  24, 232,  99, 198, 121, 
      1, 231,  53,  40, 111, 104, 
    145, 163, 203,  30, 180, 158, 
     72, 199, 178, 142,  86, 143, 
    156,  88, 102,  58, 198,  50, 
     48, 150, 153, 224,  94, 195, 
    151, 242,  89, 129, 148, 223, 
    235, 164, 192,   2,  78, 207, 
     39,  63,   8, 215, 253,  88, 
    184, 238, 167, 133, 209, 207, 
     98,  24, 223, 135, 235,   2, 
     41, 192, 245,  49, 125, 167, 
    130, 119, 223,  95, 238, 206, 
      0,  79, 170, 237, 100, 233, 
    197, 238, 135,  45,  22, 236, 
    129,  36, 142, 225,  21, 124, 
     23,  98, 133, 206, 196, 125, 
     95, 129, 209,  32, 142, 181, 
    161,  81,  16, 225, 113, 172, 
    177,  20,  90, 147,   5, 194, 
    130, 180, 157,  72,  47, 146, 
    137, 202, 174,  94,  54, 233, 
    178,  26, 238, 142,  39, 191, 
    109,  37, 226, 231, 168,  79, 
    248,  40, 125,  94,  75,  75, 
    245,  91,   0, 185, 135,  87, 
    212, 252, 134, 109, 185, 126, 
     75,  90, 202, 155, 106,  19, 
     71,  85, 133, 178,  38, 140, 
    201,  13, 181,  73,  75, 123, 
    246,  35, 247, 231, 113,  73, 
    206, 223,  67,  82, 166, 189, 
     87, 220, 219, 153,  66, 190, 
    228, 142, 166, 243,  11, 137, 
    235,  35,  55,  18, 195, 147, 
    115, 133, 217,  76, 201,  29, 
    200, 206, 151, 220, 190, 108, 
     49,  51,  53,  63,  58,  50, 
    224, 150, 138,  83, 238, 240, 
    253, 201, 233,  76, 177, 228, 
    246, 230, 231,  10, 217, 217, 
    204, 180, 112,  26, 204, 101, 
    250, 115, 143, 178, 197, 124, 
    110,  46, 147, 155, 191,  57, 
     89, 232, 159, 153,  65, 159, 
    187,  67, 195,  56, 140, 242, 
    124,  97,  58,  13,  63,   1, 
    135,  10,  27, 109,  88,  72, 
     83,  72,   8,   0,   0,   0, 
     54,  44,  51, 244, 236,  45, 
     44,  42,  88,  80,  68,  80, 
    102,   0,   0,   0,  67,  58, 
     92,  82, 101, 112, 111, 115, 
     92,  88,  98, 111, 120,  45, 
     65,  84,  71,  45,  83,  97, 
    109, 112, 108, 101, 115,  92, 
     75, 105, 116, 115,  92,  68, 
    105, 114, 101,  99, 116,  88, 
     84,  75,  92, 115, 114,  99, 
     92,  83, 104,  97, 100, 101, 
    114, 115,  92,  67, 111, 109, 
    112, 105, 108, 101, 100,  92, 
     88,  98, 111, 120,  79, 110, 
    101,  69, 110, 118, 105, 114, 
    111, 110, 109, 101, 110, 116, 
     77,  97, 112,  69, 102, 102, 
    101,  99, 116,  95,  80,  83, 
     69, 110, 118,  77,  97, 112, 
     46, 112, 100,  98
};
