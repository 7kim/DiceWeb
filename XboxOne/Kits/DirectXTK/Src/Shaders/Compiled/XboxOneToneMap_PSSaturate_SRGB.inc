#if 0
//
// Generated by Microsoft (R) D3D Shader Disassembler for Durango
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
// Opaque Custom Data - XBOX Precompiled Shader Header
// First Precompiled Shader at offset:[72]
// Embedded Data:
//  0x00000048 - Offset To First Precompiled Shader
//  0x00000050 - Original Shader Descriptor
//  0x00000043 - Original Shader Size
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 1
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul_sat r0.xyz, r0.xyzx, cb0[0].xxxx
mov o0.w, r0.w
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp o0.xyz, r0.xyzx
ret 
// Opaque Custom Data - XBOX Precompiled Shader Object
// Offset:[72], bundle is:[160] DWORDS.
// Disassembled Precompiled Shader Object:
// Shader Type               : (PS)
// Shader Hw Stage           : (PS)
// PDB Filename              : C:\Repos\Xbox-ATG-Samples\Kits\DirectXTK\src\Shaders\Compiled\XboxOneToneMap_PSSaturate_SRGB.pdb
// Shader Semantic Hash      : 0x791aa01221dff969
//
// Shader Data:
; ----------------- PS Data ------------------------
; Input Semantic Mappings
;   [0] generic,  usageIdx 1, channelMask  3, param0, paramSlot1, DefaultVal={0,0,0,0}

codeLenInByte        = 144 bytes;

; launchModeFlags    = 0x0000000E
srdTableSupport      = TRUE
immediateSupportExt  = TRUE
srdTableSupportExt   = TRUE

userElementCount     = 1;
;  userElements[0]      = PTR_EXTENDED_USER_DATA, ReferencedExtUserElements=1, s[0x0:1]
extUserElementCount  = 3;
;  extUserElements 1[0] = IMM_RESOURCE 0, offset 0x0:7 dwords
;  extUserElements 1[1] = IMM_SAMPLER 0, offset 0x8:11 dwords
;  extUserElements 1[2] = IMM_CONST_BUFFER 0, offset 0xc:15 dwords
NumVgprs             = 4;
NumSgprs             = 20;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s65535;
; texSamplerUsage         = 0x00000001
; constBufUsage           = 0x00000001

; SPI_SHADER_PGM_RSRC2_PS = 0x00000004
SSPRP:SCRATCH_EN            = 0
SSPRP:USER_SGPR             = 2
SSPRP:TRAP_PRESENT          = 0
SSPRP:WAVE_CNT_EN           = 0
SSPRP:EXTRA_LDS_SIZE        = 0
SSPRP:EXCP_EN               = 0
; SPI_SHADER_Z_FORMAT     = 0x00000000
SPZF:Z_EXPORT_FORMAT        = 0; SPI_SHADER_ZERO
; SPI_PS_IN_CONTROL       = 0x00000001
SPIC:NUM_INTERP             = 1
SPIC:PARAM_GEN              = 0
SPIC:FOG_ADDR               = 0
SPIC:BC_OPTIMIZE_DISABLE    = 0
SPIC:PASS_FOG_THROUGH_PS    = 0
; SPI_PS_INPUT_ADDR       = 0x00000002
SPIA:PERSP_CENTER_ENA       = 1
; DB_SHADER_CONTROL       = 0x00000010
DB:Z_ORDER                  = 1
DB:CONSERVATIVE_Z_EXPORT    = 0; EXPORT_ANY_Z
; CB_SHADER_MASK          = 0x0000000F
CB:OUTPUT0_ENABLE           = 15

; export table for mrt0 [patch@(bytes=0x7C, dwords=0x1F)]
// Export Patch Code (FMT_ZERO):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           null, off, off, off, off done vm        // 000000000008: F8001890 00000000
end
// Export Patch Code (FMT_32_R):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, off, off, off done vm         // 000000000008: F8001801 00000000
end
// Export Patch Code (FMT_32_GR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, off, off done vm          // 000000000008: F8001803 00000100
end
// Export Patch Code (FMT_32_AR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v3, off, off done vm          // 000000000008: F8001803 00000300
end
// Export Patch Code (FMT_FP16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 000000000000: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000004: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_u16_f32  v0, v0, v1                      // 000000000000: 5C000300
  v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000004: 5C020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SNORM16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pknorm_i16_f32  v0, v0, v1                      // 000000000000: 5A000300
  v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000004: 5A020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_UINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_u16_u32  v0, v0, v1                          // 000000000000: 60000300
  v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000004: 60020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_SINT16_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  v_cvt_pk_i16_i32  v0, v0, v1                          // 000000000000: 62000300
  v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000004: 62020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000008: F8001C0F 00000100
end
// Export Patch Code (FMT_32_ABGR):
shader patch
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_nop         0x0000                                  // 000000000000: BF800000
  s_nop         0x0000                                  // 000000000004: BF800000
  exp           mrt0, v0, v1, v2, v3 done vm            // 000000000008: F800180F 03020100
end

// Shader Instructions:
shader main
  asic(CI)
  type(PS)
                                                            // s_ps_state in s0
  s_mov_b64     s[16:17], exec                          // 000000000000: BE90047E
  s_wqm_b64     exec, exec // wrscc                     // 000000000004: BEFE0A7E
  s_mov_b32     m0, s2                                  // 000000000008: BEFC0302
  s_load_dwordx16  s[0:15], s[0:1], 0x00                // 00000000000C: C1000100
  v_interp_p1_f32  v2, v0, attr0.x                      // 000000000010: C8080000
  v_interp_p2_f32  v2, v1, attr0.x                      // 000000000014: C8090001
  v_interp_p1_f32  v3, v0, attr0.y                      // 000000000018: C80C0100
  v_interp_p2_f32  v3, v1, attr0.y                      // 00000000001C: C80D0101
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  image_sample  v[0:3], v[2:3], s[0:7], s[8:11] dmask:0xf // 000000000024: F0800F00 00400002
  s_buffer_load_dword  s0, s[12:15], 0x00               // 00000000002C: C2000D00
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000030: BF8C0070
  v_mul_legacy_f32  v0, v0, s0 clamp                    // 000000000034: D20E0800 00000100
  v_mul_legacy_f32  v1, v1, s0 clamp                    // 00000000003C: D20E0801 00000101
  v_mul_legacy_f32  v2, v2, s0 clamp                    // 000000000044: D20E0802 00000102
  v_log_f32     v0, v0                                  // 00000000004C: 7E004F00
  v_log_f32     v1, v1                                  // 000000000050: 7E024F01
  v_log_f32     v2, v2                                  // 000000000054: 7E044F02
  s_mov_b32     s0, 0x3ee8ba2f                          // 000000000058: BE8003FF 3EE8BA2F
  v_mul_legacy_f32  v0, s0, v0                          // 000000000060: 0E000000
  v_mul_legacy_f32  v1, s0, v1                          // 000000000064: 0E020200
  v_mul_legacy_f32  v2, s0, v2                          // 000000000068: 0E040400
  v_exp_f32     v0, v0                                  // 00000000006C: 7E004B00
  v_exp_f32     v1, v1                                  // 000000000070: 7E024B01
  v_exp_f32     v2, v2                                  // 000000000074: 7E044B02
  s_mov_b64     exec, s[16:17]                          // 000000000078: BEFE0410
  v_cvt_pkrtz_f16_f32  v0, v0, v1                       // 00000000007C: 5E000300
  v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000080: 5E020702
  exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000084: F8001C0F 00000100
  s_endpgm                                              // 00000000008C: BF810000
end


// Shader Statistics:
//  NumActiveWaveFront:         40
//  WorkgroupSize:              64
//  NumVRegs:                   4
//  NumSRegs:                   20
//  NumActiveWaveFrontByVReg:   40
//  NumActiveWaveFrontBySReg:   40
//  NumActiveWaveFrontByLDS:    40
//  CycleSim:                   85
//  CycleSimNWaves:             85
//  Code Size:                  144
//Assembler Counts:
//  num_32bit_ops                     : 25
//  num_64bit_ops                     : 5
//  num_alu                           : 18
//  num_fc                            : 10
//  num_inst_exp                      : 1
//  num_inst_ldsgds                   : 0
//  num_inst_mimg                     : 1
//  num_inst_mtbuf                    : 0
//  num_inst_mubuf                    : 0
//  num_inst_sopp                     : 3
//  num_inst_sopc                     : 0
//  num_inst_sop1                     : 5
//  num_inst_sop2                     : 0
//  num_inst_smrd                     : 0
//  num_inst_sopk                     : 0
//  num_inst_vop1                     : 6
//  num_inst_vop2                     : 5
//  num_inst_vop3                     : 0
//  num_inst_vopc                     : 0
//  num_inst_vintrp                   : 4
//  constant_literal_operands         : 0
//  num_tex                           : 2
//  num_vmem_group                    : 1
//  vmem_grouping_started             : 0
//
//Compilation Notes:
//
//  PS has no UAV writes, consider forcing REZ/LATEZ.
// Shader Statistics:
// m_uNumActiveWaveFront             : 40
// m_uVRegLimit                      : 256
// m_uSRegLimit                      : 512
// m_uNumVRegs                       : 4
// m_uNumSRegs                       : 20
// m_uSCCodeSize                     : 144
// m_uWorkgroupSize                  : 64
// m_uNumActiveWaveFrontByVReg       : 40
// m_uNumActiveWaveFrontBySReg       : 40
// m_uNumActiveWaveFrontByLDS        : 40
// m_uCycleSim1Wave                  : 85
// m_uCycleSimNWaves                 : 85

// Assembler Counts:
// num_32bit_ops                     : 25
// num_64bit_ops                     : 5
// num_alu                           : 18
// num_fc                            : 10
// num_inst_exp                      : 1
// num_inst_ldsgds                   : 0
// num_inst_mimg                     : 1
// num_inst_mtbuf                    : 0
// num_inst_mubuf                    : 0
// num_inst_sopp                     : 3
// num_inst_sopc                     : 0
// num_inst_sop1                     : 5
// num_inst_sop2                     : 0
// num_inst_smrd                     : 0
// num_inst_sopk                     : 0
// num_inst_vop1                     : 6
// num_inst_vop2                     : 5
// num_inst_vop3                     : 0
// num_inst_vopc                     : 0
// num_inst_vintrp                   : 4
// num_inst_smem                     : 2
// constant_literal_operands         : 0
// num_tex                           : 2
// num_vmem_group                    : 1
// vmem_grouping_started             : 0
// m_fFullPrecompilePromise          : 0
// m_fIntegerDivideExpansion         : 0
// m_fIntegerModExpansion            : 0
// m_fDoubleDivideExpansion          : 0
// m_fUsesScratch                    : 0
// m_fPerThreadIndirection           : 0
// m_fUsingTableLoads                : 0
// m_fUsingSHmemLoads                : 1
// fSemanticHashFlagOverrideApplied  : 0
// fPSHasNoUAVWrite                  : 1
// m_fRenderTargetsCanBeCompacted    : 0
// version                           : 3
// fCodePatched                      : 0

// Approximately 0 instruction slots used
#endif

const BYTE ToneMap_PSSaturate_SRGB[] =
{
     68,  88,  66,  67, 159, 122, 
     20,  95,  79, 239, 185, 184, 
     15,  40, 247,  81, 151, 205, 
     43,  18,   1,   0,   0,   0, 
    232,   4,   0,   0,   5,   0, 
      0,   0,  52,   0,   0,   0, 
    140,   0,   0,   0, 192,   0, 
      0,   0, 112,   4,   0,   0, 
    128,   4,   0,   0,  73,  83, 
     71,  78,  80,   0,   0,   0, 
      2,   0,   0,   0,   8,   0, 
      0,   0,  56,   0,   0,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,   3,   0,   0,   0, 
      0,   0,   0,   0,  15,   0, 
      0,   0,  68,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   0,   0,   3,   3, 
      0,   0,  83,  86,  95,  80, 
    111, 115, 105, 116, 105, 111, 
    110,   0,  84,  69,  88,  67, 
     79,  79,  82,  68,   0, 171, 
    171, 171,  79,  83,  71,  78, 
     44,   0,   0,   0,   1,   0, 
      0,   0,   8,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   0,   0, 
      0,   0,  15,   0,   0,   0, 
     83,  86,  95,  84,  97, 114, 
    103, 101, 116,   0, 171, 171, 
     83,  72,  69,  88, 168,   3, 
      0,   0,  80,   0,   0,   0, 
    234,   0,   0,   0,  53,  16, 
      0,   0,   5,   0,   0,   0, 
     72,   0,   0,   0,  80,   0, 
      0,   0,  67,   0,   0,   0, 
    106,   8,   0,   1,  89,   0, 
      0,   4,  70, 142,  32,   0, 
      0,   0,   0,   0,   1,   0, 
      0,   0,  90,   0,   0,   3, 
      0,  96,  16,   0,   0,   0, 
      0,   0,  88,  24,   0,   4, 
      0, 112,  16,   0,   0,   0, 
      0,   0,  85,  85,   0,   0, 
     98,  16,   0,   3,  50,  16, 
     16,   0,   1,   0,   0,   0, 
    101,   0,   0,   3, 242,  32, 
     16,   0,   0,   0,   0,   0, 
    104,   0,   0,   2,   1,   0, 
      0,   0,  69,   0,   0, 139, 
    194,   0,   0, 128,  67,  85, 
     21,   0, 242,   0,  16,   0, 
      0,   0,   0,   0,  70,  16, 
     16,   0,   1,   0,   0,   0, 
     70, 126,  16,   0,   0,   0, 
      0,   0,   0,  96,  16,   0, 
      0,   0,   0,   0,  56,  32, 
      0,   8, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      6, 128,  32,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     54,   0,   0,   5, 130,  32, 
     16,   0,   0,   0,   0,   0, 
     58,   0,  16,   0,   0,   0, 
      0,   0,  47,   0,   0,   5, 
    114,   0,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  56,   0, 
      0,  10, 114,   0,  16,   0, 
      0,   0,   0,   0,  70,   2, 
     16,   0,   0,   0,   0,   0, 
      2,  64,   0,   0,  47, 186, 
    232,  62,  47, 186, 232,  62, 
     47, 186, 232,  62,   0,   0, 
      0,   0,  25,   0,   0,   5, 
    114,  32,  16,   0,   0,   0, 
      0,   0,  70,   2,  16,   0, 
      0,   0,   0,   0,  62,   0, 
      0,   1,  53,  16,   0,   0, 
    162,   0,   0,   0,  23,   0, 
      1,   0,  41, 213,  15,   0, 
    120,   1, 237,  87, 207, 107, 
     19,  65,  24, 253, 102, 118, 
    109, 211,  54, 217, 148, 210, 
    131,  21, 241,   7, 122,  40, 
    104, 245,  16,  79,  34, 162, 
    169, 208,  67, 148,  72,  55, 
     66,  41,  75, 219,  77, 179, 
     96, 160, 109, 150,  36,  66, 
     61, 184, 198, 187, 135,  92, 
     20, 245,  32,  30, 252,  19, 
     60,   9, 110, 212,  83,  14, 
    158,   4, 207,  94,  61, 120, 
     16, 188,  40,  72, 235, 247, 
    214, 153, 186,  77, 237, 109, 
     65, 193, 125, 240, 230, 205, 
    155, 217, 249, 242, 237, 204, 
      6, 190, 249, 144, 167,   8, 
     95,  95, 141,  61, 128,  62, 
     61, 241, 240,  78,  86,  16, 
     29, 224,  62,  75, 164, 192, 
    163,  28,  90, 162,  77,  11, 
     45, 209,  52,  26,  60,  32, 
    137,  76, 150,  73, 102, 151, 
    121, 137, 137,  57, 205,  66, 
    225,  84, 241, 201, 227,  66, 
    145, 187,  52, 206,  28, 102, 
    222,  80, 156,  98,  34, 254, 
      4, 115, 148, 137, 112, 128, 
     86, 192,  64, 195, 208, 121, 
    104,  12,  49, 227,  99, 200, 
    129,  83, 137,   0, 141, 199, 
     32,  15, 205, 159, 113, 132, 
    137, 181, 251,   1, 185, 233, 
     88,  80, 228,   9, 224, 125, 
    255,  54, 126, 229, 245, 187, 
      5, 245,  57,   1,  56, 143, 
     56, 112, 116, 120,   6, 152, 
     86, 231, 168, 247, 247, 130, 
    242, 216,  11, 188, 219, 107, 
    230, 126, 216, 102, 224,  44, 
    227, 208,  30, 241, 135,   4, 
     71, 205, 112, 231,  63, 133, 
    254, 158, 176,  23, 248,  22, 
    177,  55, 234, 111,  22,  65, 
    207,  31,  69,  67, 157,  30, 
    216,  61,  72, 223, 224, 180, 
     23,   3, 222, 128,  71, 192, 
    184, 199, 225,  25, 180,  36, 
    135, 229,  82, 254, 176, 154, 
     55, 200,  97, 239, 196, 252, 
     34, 251, 197, 152,  95,  97, 
    191,  18, 243,  85, 246, 213, 
     29, 175, 226, 231, 163, 223, 
    147,   6, 206, 154,   7, 131, 
    127, 153, 105, 142, 201,  48, 
    205,  49,  25, 166,  57,  38, 
    195,  52, 199, 100, 152, 230, 
    152,  12, 211,  28, 147,  97, 
    154,  99,  98, 164, 192, 236, 
    134, 193, 232,  86,  40, 141, 
     31,  33, 215, 111, 111, 184, 
    240, 238,  11,  26, 233, 147, 
    200, 246, 133, 200, 245, 239, 
    210, 253,  30, 229,  59,  95, 
     36, 110, 102,  57, 122, 235, 
    195, 103, 172, 247, 168, 245, 
      4, 171,  96, 149, 172, 146, 
    149, 202,  20, 136, 178,  12, 
    100, 217,  12, 182, 141,  78, 
    120, 246, 229, 167, 139,  60, 
    106, 145, 148,  22, 153, 166, 
     69,  37, 158,  47, 241, 124, 
    201,  12, 198, 205, 173, 144, 
    107, 199, 221, 181,  39, 221, 
    235,  77,  65,  81, 244,  14, 
     34,  19,  61, 176, 131, 200, 
    153,  98, 215,  53,  33,  90, 
    198,  99,  89, 168, 194,  11, 
    117,  47, 233,  42,  61, 201, 
     28,  97,  10, 254, 113,   0, 
    113, 204, 232,  54,  72,  84, 
    255, 254, 241, 248, 196, 179, 
     67, 183, 209,   7,  62, 171, 
     53, 239, 148,  30,  99, 198, 
     99,  19,  61,  71, 179,   7, 
    147, 170,  88,  55, 149, 162, 
    126,  71, 205, 110, 233,  27, 
    167, 138, 119,  78, 205, 159, 
     86, 138, 119,  25,  99,  14, 
    230, 113,  85, 205, 187,  76, 
    100,  58, 123, 222, 153, 247, 
    252,  70, 203,  89, 168,  54, 
     54, 103,  46,  87, 230, 102, 
    108, 119, 221,  95, 243,  90, 
     78, 169, 222, 110,  57,  87, 
    234,  77, 111, 181, 189,  80, 
     41,  57, 173, 230, 170,  99, 
    223, 116, 107,  94, 179, 229, 
    204,  54, 214, 253, 250, 154, 
     87, 139,  22, 149,  55, 188, 
     74,  99, 195, 187, 230, 250, 
    203, 215, 109, 219, 109, 223, 
    106, 186, 109, 111, 217, 158, 
    159,  43, 158, 241, 107,  85, 
    250,   9, 189,  54, 229,  17, 
      0,   0,  88,  72,  83,  72, 
      8,   0,   0,   0, 105, 249, 
    223,  33,  18, 160,  26, 121, 
     88,  80,  68,  80,  96,   0, 
      0,   0,  67,  58,  92,  82, 
    101, 112, 111, 115,  92,  88, 
     98, 111, 120,  45,  65,  84, 
     71,  45,  83,  97, 109, 112, 
    108, 101, 115,  92,  75, 105, 
    116, 115,  92,  68, 105, 114, 
    101,  99, 116,  88,  84,  75, 
     92, 115, 114,  99,  92,  83, 
    104,  97, 100, 101, 114, 115, 
     92,  67, 111, 109, 112, 105, 
    108, 101, 100,  92,  88,  98, 
    111, 120,  79, 110, 101,  84, 
    111, 110, 101,  77,  97, 112, 
     95,  80,  83,  83,  97, 116, 
    117, 114,  97, 116, 101,  95, 
     83,  82,  71,  66,  46, 112, 
    100,  98
};
